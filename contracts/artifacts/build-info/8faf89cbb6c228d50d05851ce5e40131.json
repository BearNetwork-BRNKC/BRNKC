{
	"id": "8faf89cbb6c228d50d05851ce5e40131",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.17",
	"solcLongVersion": "0.8.17+commit.8df45f5f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/BRNKC.sol": {
				"content": "//SPDX-License-Identifier: MIT\r\n//Bear Network - BRNKC - From TAIWAN https://bearnetwork.net\r\n//Bear Network - [ BRNKC ] 運行在幣安鏈（BSC）上。\r\n//熊網區塊鏈的目標將圍繞項目與質量、企業、本地化、行業、環境、教育、組織、公益和可持續發展。\r\n\r\npragma solidity >0.5.16 <1.0.0;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\";\r\n\r\n/// @custom:security-contact bnkt@bearnetwork.net\r\ncontract BearNetwork is Initializable, ERC20Upgradeable, ERC20BurnableUpgradeable, ERC20SnapshotUpgradeable, OwnableUpgradeable, PausableUpgradeable, UUPSUpgradeable {\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    function initialize() initializer public {\r\n        __ERC20_init(\"Bear Network\", \"BRNKC\");\r\n        __ERC20Burnable_init();\r\n        __ERC20Snapshot_init();\r\n        __Ownable_init();\r\n        __Pausable_init();\r\n        __UUPSUpgradeable_init();\r\n\r\n        _mint(msg.sender, 100000000 * 10 ** decimals());\r\n    }\r\n\r\n    function snapshot() public onlyOwner {\r\n        _snapshot();\r\n    }\r\n\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function mint(address to, uint256 amount) public onlyOwner {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount)\r\n        internal\r\n        whenNotPaused\r\n        override(ERC20Upgradeable, ERC20SnapshotUpgradeable)\r\n    {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _authorizeUpgrade(address newImplementation)\r\n        internal\r\n        onlyOwner\r\n        override\r\n    {}\r\n}\r\n"
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/extensions/ERC20Snapshot.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/ArraysUpgradeable.sol\";\nimport \"../../../utils/CountersUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\n * total supply at the time are recorded for later access.\n *\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\n * In naive implementations it's possible to perform a \"double spend\" attack by reusing the same balance from different\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\n * used to create an efficient ERC20 forking mechanism.\n *\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\n * and the account address.\n *\n * NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\n * return `block.number` will trigger the creation of snapshot at the beginning of each new block. When overriding this\n * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\n *\n * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\n * alternative consider {ERC20Votes}.\n *\n * ==== Gas Costs\n *\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\n *\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\n * transfers will have normal cost until the next snapshot, and so on.\n */\n\nabstract contract ERC20SnapshotUpgradeable is Initializable, ERC20Upgradeable {\n    function __ERC20Snapshot_init() internal onlyInitializing {\n    }\n\n    function __ERC20Snapshot_init_unchained() internal onlyInitializing {\n    }\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\n    // https://github.com/Giveth/minime/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\n\n    using ArraysUpgradeable for uint256[];\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\n    // Snapshot struct, but that would impede usage of functions that work on an array.\n    struct Snapshots {\n        uint256[] ids;\n        uint256[] values;\n    }\n\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\n    Snapshots private _totalSupplySnapshots;\n\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\n    CountersUpgradeable.Counter private _currentSnapshotId;\n\n    /**\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\n     */\n    event Snapshot(uint256 id);\n\n    /**\n     * @dev Creates a new snapshot and returns its snapshot id.\n     *\n     * Emits a {Snapshot} event that contains the same id.\n     *\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\n     *\n     * [WARNING]\n     * ====\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\n     * you must consider that it can potentially be used by attackers in two ways.\n     *\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\n     * section above.\n     *\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\n     * ====\n     */\n    function _snapshot() internal virtual returns (uint256) {\n        _currentSnapshotId.increment();\n\n        uint256 currentId = _getCurrentSnapshotId();\n        emit Snapshot(currentId);\n        return currentId;\n    }\n\n    /**\n     * @dev Get the current snapshotId\n     */\n    function _getCurrentSnapshotId() internal view virtual returns (uint256) {\n        return _currentSnapshotId.current();\n    }\n\n    /**\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\n     */\n    function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\n\n        return snapshotted ? value : balanceOf(account);\n    }\n\n    /**\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\n     */\n    function totalSupplyAt(uint256 snapshotId) public view virtual returns (uint256) {\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\n\n        return snapshotted ? value : totalSupply();\n    }\n\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        if (from == address(0)) {\n            // mint\n            _updateAccountSnapshot(to);\n            _updateTotalSupplySnapshot();\n        } else if (to == address(0)) {\n            // burn\n            _updateAccountSnapshot(from);\n            _updateTotalSupplySnapshot();\n        } else {\n            // transfer\n            _updateAccountSnapshot(from);\n            _updateAccountSnapshot(to);\n        }\n    }\n\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) {\n        require(snapshotId > 0, \"ERC20Snapshot: id is 0\");\n        require(snapshotId <= _getCurrentSnapshotId(), \"ERC20Snapshot: nonexistent id\");\n\n        // When a valid snapshot is queried, there are three possibilities:\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\n        //  to this id is the current one.\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\n        //  requested id, and its value is the one to return.\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\n        //  larger than the requested one.\n        //\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\n        // exactly this.\n\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\n\n        if (index == snapshots.ids.length) {\n            return (false, 0);\n        } else {\n            return (true, snapshots.values[index]);\n        }\n    }\n\n    function _updateAccountSnapshot(address account) private {\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\n    }\n\n    function _updateTotalSupplySnapshot() private {\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\n    }\n\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\n        uint256 currentId = _getCurrentSnapshotId();\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\n            snapshots.ids.push(currentId);\n            snapshots.values.push(currentValue);\n        }\n    }\n\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\n        if (ids.length == 0) {\n            return 0;\n        } else {\n            return ids[ids.length - 1];\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[46] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/ContextUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\n    function __ERC20Burnable_init() internal onlyInitializing {\n    }\n\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/utils/CountersUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Arrays.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./StorageSlotUpgradeable.sol\";\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary ArraysUpgradeable {\n    using StorageSlotUpgradeable for bytes32;\n\n    /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * `array` is expected to be sorted in ascending order, and to contain no\n     * repeated elements.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        if (array.length == 0) {\n            return 0;\n        }\n\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        while (low < high) {\n            uint256 mid = MathUpgradeable.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds down (it does integer division with truncation).\n            if (unsafeAccess(array, mid).value > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlotUpgradeable.AddressSlot storage) {\n        bytes32 slot;\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getAddressSlot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlotUpgradeable.Bytes32Slot storage) {\n        bytes32 slot;\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getBytes32Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlotUpgradeable.Uint256Slot storage) {\n        bytes32 slot;\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getUint256Slot();\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/IERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/interfaces/draft-IERC1822Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/utils/StorageSlotUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/proxy/beacon/IBeaconUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol": {
				"OwnableUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d7fc8396619de513c96b6e00301b88dd790e83542aab918425633a5f7297a15a\",\"dweb:/ipfs/QmXbP4kiZyp7guuS7xe8KaybnwkRPGrBc2Kbi3vhcTfpxb\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://899f850f7df5a270bccfb765d70069959ca1c20d3a7381c1c3bda8a3ffee1935\",\"dweb:/ipfs/QmVdnAqwyX2L3nX2HDA5WKGtVBFyH1nKE9A1k7fZnPBkhP\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 527,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 530,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 2560,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 10,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_owner",
								"offset": 0,
								"slot": "51",
								"type": "t_address"
							},
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/interfaces/draft-IERC1822Upgradeable.sol": {
				"IERC1822ProxiableUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "proxiableUUID",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.",
						"kind": "dev",
						"methods": {
							"proxiableUUID()": {
								"details": "Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"proxiableUUID()": "52d1902d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.8.0/interfaces/draft-IERC1822Upgradeable.sol\":\"IERC1822ProxiableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.8.0/interfaces/draft-IERC1822Upgradeable.sol\":{\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://496bd9b3df2455d571018c09f0c6badd29713fdeb907c6aa09d8d28cb603f053\",\"dweb:/ipfs/QmXdJDyYs6WMwMh21dez2BYPxhSUaUYFMDtVNcn2cgFR79\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
				"ERC1967UpgradeUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "previousAdmin",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "newAdmin",
									"type": "address"
								}
							],
							"name": "AdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "beacon",
									"type": "address"
								}
							],
							"name": "BeaconUpgraded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "implementation",
									"type": "address"
								}
							],
							"name": "Upgraded",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "delegatecall",
						"details": "This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._",
						"events": {
							"AdminChanged(address,address)": {
								"details": "Emitted when the admin account has changed."
							},
							"BeaconUpgraded(address)": {
								"details": "Emitted when the beacon is upgraded."
							},
							"Upgraded(address)": {
								"details": "Emitted when the implementation is upgraded."
							}
						},
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_ADMIN_SLOT": {
								"details": "Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."
							},
							"_BEACON_SLOT": {
								"details": "The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."
							},
							"_IMPLEMENTATION_SLOT": {
								"details": "Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."
							},
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"delegatecall\",\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is upgraded.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"},\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":\"ERC1967UpgradeUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.8.0/interfaces/draft-IERC1822Upgradeable.sol\":{\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://496bd9b3df2455d571018c09f0c6badd29713fdeb907c6aa09d8d28cb603f053\",\"dweb:/ipfs/QmXdJDyYs6WMwMh21dez2BYPxhSUaUYFMDtVNcn2cgFR79\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29dda00da6d269685b555e710e4abf1c3eb6d00c15b888a7880a2f8dd3c4fdc2\",\"dweb:/ipfs/QmSqcjtdECygtT1Gy7uEo42x8542srpgGEeKKHfcnQqXgn\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/proxy/beacon/IBeaconUpgradeable.sol\":{\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4dbfe1a3b3b3fb64294ce41fd2ad362e7b7012208117864f42c1a67620a6d5c1\",\"dweb:/ipfs/QmVMU5tWt7zBQMmf5cpMX8UMHV86T3kFeTxBTBjFqVWfoJ\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://899f850f7df5a270bccfb765d70069959ca1c20d3a7381c1c3bda8a3ffee1935\",\"dweb:/ipfs/QmVdnAqwyX2L3nX2HDA5WKGtVBFyH1nKE9A1k7fZnPBkhP\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/StorageSlotUpgradeable.sol\":{\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://aedb48081190fa828d243529ce25c708202c7d4ccfe99f0e4ecd6bc0cfcd03f3\",\"dweb:/ipfs/QmWyiDQHPZA56iqsAwTmiJoxvNeRQLUVr4gTfzpdpXivpo\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 527,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 530,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 509,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/proxy/beacon/IBeaconUpgradeable.sol": {
				"IBeaconUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "implementation",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "This is the interface that {BeaconProxy} expects of its beacon.",
						"kind": "dev",
						"methods": {
							"implementation()": {
								"details": "Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"implementation()": "5c60da1b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.8.0/proxy/beacon/IBeaconUpgradeable.sol\":\"IBeaconUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.8.0/proxy/beacon/IBeaconUpgradeable.sol\":{\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4dbfe1a3b3b3fb64294ce41fd2ad362e7b7012208117864f42c1a67620a6d5c1\",\"dweb:/ipfs/QmVMU5tWt7zBQMmf5cpMX8UMHV86T3kFeTxBTBjFqVWfoJ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"events": {
							"Initialized(uint8)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_initialized": {
								"custom:oz-retyped-from": "bool",
								"details": "Indicates that the contract has been initialized."
							},
							"_initializing": {
								"details": "Indicates that the contract is in the process of being initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://899f850f7df5a270bccfb765d70069959ca1c20d3a7381c1c3bda8a3ffee1935\",\"dweb:/ipfs/QmVdnAqwyX2L3nX2HDA5WKGtVBFyH1nKE9A1k7fZnPBkhP\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 527,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol:Initializable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 530,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol:Initializable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol": {
				"UUPSUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "previousAdmin",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "newAdmin",
									"type": "address"
								}
							],
							"name": "AdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "beacon",
									"type": "address"
								}
							],
							"name": "BeaconUpgraded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "implementation",
									"type": "address"
								}
							],
							"name": "Upgraded",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "proxiableUUID",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newImplementation",
									"type": "address"
								}
							],
							"name": "upgradeTo",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newImplementation",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "upgradeToAndCall",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"proxiableUUID()": {
								"details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
							},
							"upgradeTo(address)": {
								"details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
							},
							"upgradeToAndCall(address,bytes)": {
								"details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							},
							"__self": {
								"custom:oz-upgrades-unsafe-allow": "state-variable-immutable state-variable-assignment"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"proxiableUUID()": "52d1902d",
							"upgradeTo(address)": "3659cfe6",
							"upgradeToAndCall(address,bytes)": "4f1ef286"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"__self\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable state-variable-assignment\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":\"UUPSUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.8.0/interfaces/draft-IERC1822Upgradeable.sol\":{\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://496bd9b3df2455d571018c09f0c6badd29713fdeb907c6aa09d8d28cb603f053\",\"dweb:/ipfs/QmXdJDyYs6WMwMh21dez2BYPxhSUaUYFMDtVNcn2cgFR79\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29dda00da6d269685b555e710e4abf1c3eb6d00c15b888a7880a2f8dd3c4fdc2\",\"dweb:/ipfs/QmSqcjtdECygtT1Gy7uEo42x8542srpgGEeKKHfcnQqXgn\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/proxy/beacon/IBeaconUpgradeable.sol\":{\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4dbfe1a3b3b3fb64294ce41fd2ad362e7b7012208117864f42c1a67620a6d5c1\",\"dweb:/ipfs/QmVMU5tWt7zBQMmf5cpMX8UMHV86T3kFeTxBTBjFqVWfoJ\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://899f850f7df5a270bccfb765d70069959ca1c20d3a7381c1c3bda8a3ffee1935\",\"dweb:/ipfs/QmVdnAqwyX2L3nX2HDA5WKGtVBFyH1nKE9A1k7fZnPBkhP\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":{\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40e60cbf0e2efede4d9c169e66336a64615af7b719a896ef1f37ae8cd4614ec1\",\"dweb:/ipfs/QmYNiwY22ifhfa8yK6mLCEKfj39caYUHLqe2VBtzDnvdsV\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/StorageSlotUpgradeable.sol\":{\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://aedb48081190fa828d243529ce25c708202c7d4ccfe99f0e4ecd6bc0cfcd03f3\",\"dweb:/ipfs/QmWyiDQHPZA56iqsAwTmiJoxvNeRQLUVr4gTfzpdpXivpo\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 527,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 530,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 509,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 824,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "51",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol": {
				"PausableUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.",
						"events": {
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"paused()": "5c975abb"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":\"PausableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://899f850f7df5a270bccfb765d70069959ca1c20d3a7381c1c3bda8a3ffee1935\",\"dweb:/ipfs/QmVdnAqwyX2L3nX2HDA5WKGtVBFyH1nKE9A1k7fZnPBkhP\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":{\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9c7d1f5e15633ab912b74c2f57e24559e66b03232300d4b27ff0f25bc452ecad\",\"dweb:/ipfs/QmYTJkc1cntYkKQ1Tu11nBcJLakiy93Tjytc4XHELo4GmR\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 527,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol:PausableUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 530,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol:PausableUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 2560,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol:PausableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 846,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol:PausableUpgradeable",
								"label": "_paused",
								"offset": 0,
								"slot": "51",
								"type": "t_bool"
							},
							{
								"astId": 951,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol:PausableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol": {
				"ERC20Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":1480:13639  contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":1480:13639  contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2491:2589  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4768:4965  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_19\n      tag_20\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n        /* \"#utility.yul\":1169:1183   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1162:1184   */\n      iszero\n        /* \"#utility.yul\":1144:1185   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1132:1134   */\n      0x20\n        /* \"#utility.yul\":1117:1135   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4768:4965  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      tag_17\n        /* \"#utility.yul\":1004:1191   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3579:3685  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3666:3678  _totalSupply */\n      sload(0x35)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3579:3685  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_25:\n      mload(0x40)\n        /* \"#utility.yul\":1342:1367   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1330:1332   */\n      0x20\n        /* \"#utility.yul\":1315:1333   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3579:3685  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_17\n        /* \"#utility.yul\":1196:1373   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5527:5813  function transferFrom(... */\n    tag_6:\n      tag_19\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3428:3519  function decimals() public view virtual override returns (uint8) {... */\n    tag_7:\n      mload(0x40)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3510:3512  18 */\n      0x12\n        /* \"#utility.yul\":1853:1889   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1841:1843   */\n      0x20\n        /* \"#utility.yul\":1826:1844   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3428:3519  function decimals() public view virtual override returns (uint8) {... */\n      tag_17\n        /* \"#utility.yul\":1711:1895   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6208:6442  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_19\n      tag_39\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_39:\n      tag_40\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3743:3868  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_9:\n      tag_25\n      tag_43\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_43:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3843:3861  _balances[account] */\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3817:3824  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3843:3861  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3843:3852  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3843:3861  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3743:3868  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2702:2804  function symbol() public view virtual override returns (string memory) {... */\n    tag_10:\n      tag_15\n      tag_48\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6929:7356  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_11:\n      tag_19\n      tag_51\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_51:\n      tag_52\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4064:4253  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_12:\n      tag_19\n      tag_55\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_55:\n      tag_56\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4311:4460  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_25\n      tag_59\n      calldatasize\n      0x04\n      tag_60\n      jump\t// in\n    tag_59:\n      tag_61\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2491:2589  function name() public view virtual override returns (string memory) {... */\n    tag_16:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2545:2558  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2577:2582  _name */\n      0x36\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2570:2582  return _name */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_64:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_66\n      swap1\n      tag_65\n      jump\t// in\n    tag_66:\n      dup1\n      iszero\n      tag_67\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_68\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_67)\n    tag_68:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_69:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_69\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_67:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2491:2589  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4768:4965  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_22:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4851:4855  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4905:4937  _approve(owner, spender, amount) */\n      tag_73\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4921:4928  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4930:4936  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4905:4913  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4905:4937  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_73:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4954:4958  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4947:4958  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4768:4965  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_70:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5527:5813  function transferFrom(... */\n    tag_32:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5654:5658  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5710:5748  _spendAllowance(from, spender, amount) */\n      tag_78\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5726:5730  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5741:5747  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5710:5725  _spendAllowance */\n      tag_79\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5710:5748  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_78:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5758:5785  _transfer(from, to, amount) */\n      tag_80\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5768:5772  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5774:5776  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5778:5784  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5758:5767  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5758:5785  _transfer(from, to, amount) */\n      jump\t// in\n    tag_80:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5802:5806  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5527:5813  function transferFrom(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6208:6442  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_40:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6296:6300  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6350:6414  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_73\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6366:6373  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6403:6413  addedValue */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6375:6400  allowance(owner, spender) */\n      tag_86\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6366:6373  spender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6375:6384  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6375:6400  allowance(owner, spender) */\n      jump\t// in\n    tag_86:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6375:6413  allowance(owner, spender) + addedValue */\n      tag_87\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_87:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6350:6358  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6350:6414  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2702:2804  function symbol() public view virtual override returns (string memory) {... */\n    tag_48:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2758:2771  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2790:2797  _symbol */\n      0x37\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2783:2797  return _symbol */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6929:7356  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_52:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7022:7026  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7022:7026  bool */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7103:7128  allowance(owner, spender) */\n      tag_98\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7120:7127  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7103:7112  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7103:7128  allowance(owner, spender) */\n      jump\t// in\n    tag_98:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7076:7128  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7166:7181  subtractedValue */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7146:7162  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7146:7181  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7138:7223  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_99\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3170:3172   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7138:7223  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3152:3173   */\n      mstore\n        /* \"#utility.yul\":3209:3211   */\n      0x25\n        /* \"#utility.yul\":3189:3207   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3182:3212   */\n      mstore\n        /* \"#utility.yul\":3248:3282   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":3228:3246   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3221:3283   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":3299:3317   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3292:3327   */\n      mstore\n        /* \"#utility.yul\":3344:3363   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7138:7223  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_100:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_99:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7257:7317  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_80\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7266:7271  owner */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7273:7280  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7301:7316  subtractedValue */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7282:7298  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7282:7316  currentAllowance - subtractedValue */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7257:7265  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7257:7317  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4064:4253  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_56:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4143:4147  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4197:4225  _transfer(owner, to, amount) */\n      tag_73\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4214:4216  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4218:4224  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4197:4206  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4197:4225  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4311:4460  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_61:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4426:4444  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4400:4407  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4426:4444  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4426:4437  _allowances */\n      0x34\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4426:4444  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4426:4453  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4311:4460  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10841:11211  function _approve(... */\n    tag_74:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10972:10991  owner != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10964:11032  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3576:3578   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10964:11032  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3558:3579   */\n      mstore\n        /* \"#utility.yul\":3615:3617   */\n      0x24\n        /* \"#utility.yul\":3595:3613   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":3588:3618   */\n      mstore\n        /* \"#utility.yul\":3654:3688   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":3634:3652   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3627:3689   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":3705:3723   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3698:3732   */\n      mstore\n        /* \"#utility.yul\":3749:3768   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10964:11032  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":3374:3774   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10964:11032  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_109:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11050:11071  spender != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11042:11110  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_112\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3981:3983   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11042:11110  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3963:3984   */\n      mstore\n        /* \"#utility.yul\":4020:4022   */\n      0x22\n        /* \"#utility.yul\":4000:4018   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3993:4023   */\n      mstore\n        /* \"#utility.yul\":4059:4093   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":4039:4057   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4032:4094   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":4110:4128   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4103:4135   */\n      mstore\n        /* \"#utility.yul\":4152:4171   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11042:11110  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":3779:4177   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11042:11110  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_112:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11121:11139  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11121:11132  _allowances */\n      0x34\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11121:11139  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11121:11148  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11121:11157  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11172:11204  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":1342:1367   */\n      dup5\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11172:11204  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":1315:1333   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11172:11204  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10841:11211  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11492:11933  function _spendAllowance(... */\n    tag_79:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11622:11646  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11649:11674  allowance(owner, spender) */\n      tag_117\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11659:11664  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11666:11673  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11649:11658  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11649:11674  allowance(owner, spender) */\n      jump\t// in\n    tag_117:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11622:11674  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11688:11704  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11688:11725  currentAllowance != type(uint256).max */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11684:11927  if (currentAllowance != type(uint256).max) {... */\n      tag_122\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11769:11775  amount */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11749:11765  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11749:11775  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11741:11809  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4384:4386   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11741:11809  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4366:4387   */\n      mstore\n        /* \"#utility.yul\":4423:4425   */\n      0x1d\n        /* \"#utility.yul\":4403:4421   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4396:4426   */\n      mstore\n        /* \"#utility.yul\":4462:4493   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":4442:4460   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4435:4494   */\n      mstore\n        /* \"#utility.yul\":4511:4529   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11741:11809  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_100\n        /* \"#utility.yul\":4182:4535   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11741:11809  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_119:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11851:11902  _approve(owner, spender, currentAllowance - amount) */\n      tag_122\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11860:11865  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11867:11874  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11895:11901  amount */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11876:11892  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11876:11901  currentAllowance - amount */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11851:11859  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11851:11902  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_122:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11612:11933  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11492:11933  function _spendAllowance(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7810:8628  function _transfer(... */\n    tag_81:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7936:7954  from != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7928:7996  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_124\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4742:4744   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7928:7996  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4724:4745   */\n      mstore\n        /* \"#utility.yul\":4781:4783   */\n      0x25\n        /* \"#utility.yul\":4761:4779   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4754:4784   */\n      mstore\n        /* \"#utility.yul\":4820:4854   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":4800:4818   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4793:4855   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":4871:4889   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4864:4899   */\n      mstore\n        /* \"#utility.yul\":4916:4935   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7928:7996  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":4540:4941   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7928:7996  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_124:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8014:8030  to != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8006:8070  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_127\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5148:5150   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8006:8070  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5130:5151   */\n      mstore\n        /* \"#utility.yul\":5187:5189   */\n      0x23\n        /* \"#utility.yul\":5167:5185   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5160:5190   */\n      mstore\n        /* \"#utility.yul\":5226:5260   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":5206:5224   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5199:5261   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":5277:5295   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5270:5303   */\n      mstore\n        /* \"#utility.yul\":5320:5339   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8006:8070  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":4946:5345   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8006:8070  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_127:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8152:8167  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8130:8149  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8152:8167  _balances[from] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8152:8161  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8152:8167  _balances[from] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8185:8206  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8177:8249  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_132\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5552:5554   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8177:8249  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5534:5555   */\n      mstore\n        /* \"#utility.yul\":5591:5593   */\n      0x26\n        /* \"#utility.yul\":5571:5589   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5564:5594   */\n      mstore\n        /* \"#utility.yul\":5630:5664   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":5610:5628   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5603:5665   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":5681:5699   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5674:5710   */\n      mstore\n        /* \"#utility.yul\":5727:5746   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8177:8249  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_100\n        /* \"#utility.yul\":5350:5752   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8177:8249  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_132:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8283:8298  _balances[from] */\n      dup1\n      dup6\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8283:8292  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8283:8298  _balances[from] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8301:8321  fromBalance - amount */\n      dup7\n      dup7\n      sub\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8283:8321  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8498:8511  _balances[to] */\n      swap3\n      dup7\n      and\n      dup1\n      dup3\n      mstore\n      swap1\n      dup4\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8498:8521  _balances[to] += amount */\n      dup1\n      sload\n      dup7\n      add\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8547:8573  Transfer(from, to, amount) */\n      swap2\n      mload\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n      tag_135\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8315:8321  amount */\n      dup7\n        /* \"#utility.yul\":1342:1367   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1330:1332   */\n      0x20\n        /* \"#utility.yul\":1315:1333   */\n      add\n      swap1\n        /* \"#utility.yul\":1196:1373   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8547:8573  Transfer(from, to, amount) */\n    tag_135:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8584:8621  _afterTokenTransfer(from, to, amount) */\n      tag_122\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":12517:12638  function _beforeTokenTransfer(... */\n      jump\n        /* \"#utility.yul\":14:562   */\n    tag_18:\n        /* \"#utility.yul\":126:130   */\n      0x00\n        /* \"#utility.yul\":155:157   */\n      0x20\n        /* \"#utility.yul\":184:186   */\n      dup1\n        /* \"#utility.yul\":173:182   */\n      dup4\n        /* \"#utility.yul\":166:187   */\n      mstore\n        /* \"#utility.yul\":216:222   */\n      dup4\n        /* \"#utility.yul\":210:223   */\n      mload\n        /* \"#utility.yul\":259:265   */\n      dup1\n        /* \"#utility.yul\":254:256   */\n      dup3\n        /* \"#utility.yul\":243:252   */\n      dup6\n        /* \"#utility.yul\":239:257   */\n      add\n        /* \"#utility.yul\":232:266   */\n      mstore\n        /* \"#utility.yul\":284:285   */\n      0x00\n        /* \"#utility.yul\":294:434   */\n    tag_143:\n        /* \"#utility.yul\":308:314   */\n      dup2\n        /* \"#utility.yul\":305:306   */\n      dup2\n        /* \"#utility.yul\":302:315   */\n      lt\n        /* \"#utility.yul\":294:434   */\n      iszero\n      tag_145\n      jumpi\n        /* \"#utility.yul\":403:417   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":399:422   */\n      dup4\n      add\n        /* \"#utility.yul\":393:423   */\n      mload\n        /* \"#utility.yul\":369:386   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":388:390   */\n      0x40\n        /* \"#utility.yul\":365:391   */\n      add\n        /* \"#utility.yul\":358:424   */\n      mstore\n        /* \"#utility.yul\":323:333   */\n      dup3\n      add\n        /* \"#utility.yul\":294:434   */\n      jump(tag_143)\n    tag_145:\n        /* \"#utility.yul\":298:301   */\n      pop\n        /* \"#utility.yul\":483:484   */\n      0x00\n        /* \"#utility.yul\":478:480   */\n      0x40\n        /* \"#utility.yul\":469:475   */\n      dup3\n        /* \"#utility.yul\":458:467   */\n      dup7\n        /* \"#utility.yul\":454:476   */\n      add\n        /* \"#utility.yul\":450:481   */\n      add\n        /* \"#utility.yul\":443:485   */\n      mstore\n        /* \"#utility.yul\":553:555   */\n      0x40\n        /* \"#utility.yul\":546:548   */\n      0x1f\n        /* \"#utility.yul\":542:549   */\n      not\n        /* \"#utility.yul\":537:539   */\n      0x1f\n        /* \"#utility.yul\":529:535   */\n      dup4\n        /* \"#utility.yul\":525:540   */\n      add\n        /* \"#utility.yul\":521:550   */\n      and\n        /* \"#utility.yul\":510:519   */\n      dup6\n        /* \"#utility.yul\":506:551   */\n      add\n        /* \"#utility.yul\":502:556   */\n      add\n        /* \"#utility.yul\":494:556   */\n      swap3\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":14:562   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":567:740   */\n    tag_140:\n        /* \"#utility.yul\":635:655   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":684:715   */\n      dup2\n      and\n        /* \"#utility.yul\":674:716   */\n      dup2\n      eq\n        /* \"#utility.yul\":664:734   */\n      tag_147\n      jumpi\n        /* \"#utility.yul\":730:731   */\n      0x00\n        /* \"#utility.yul\":727:728   */\n      dup1\n        /* \"#utility.yul\":720:732   */\n      revert\n        /* \"#utility.yul\":664:734   */\n    tag_147:\n        /* \"#utility.yul\":567:740   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":745:999   */\n    tag_21:\n        /* \"#utility.yul\":813:819   */\n      0x00\n        /* \"#utility.yul\":821:827   */\n      dup1\n        /* \"#utility.yul\":874:876   */\n      0x40\n        /* \"#utility.yul\":862:871   */\n      dup4\n        /* \"#utility.yul\":853:860   */\n      dup6\n        /* \"#utility.yul\":849:872   */\n      sub\n        /* \"#utility.yul\":845:877   */\n      slt\n        /* \"#utility.yul\":842:894   */\n      iszero\n      tag_149\n      jumpi\n        /* \"#utility.yul\":890:891   */\n      0x00\n        /* \"#utility.yul\":887:888   */\n      dup1\n        /* \"#utility.yul\":880:892   */\n      revert\n        /* \"#utility.yul\":842:894   */\n    tag_149:\n        /* \"#utility.yul\":913:942   */\n      tag_150\n        /* \"#utility.yul\":932:941   */\n      dup4\n        /* \"#utility.yul\":913:942   */\n      tag_140\n      jump\t// in\n    tag_150:\n        /* \"#utility.yul\":903:942   */\n      swap5\n        /* \"#utility.yul\":989:991   */\n      0x20\n        /* \"#utility.yul\":974:992   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":961:993   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":745:999   */\n      jump\t// out\n        /* \"#utility.yul\":1378:1706   */\n    tag_31:\n        /* \"#utility.yul\":1455:1461   */\n      0x00\n        /* \"#utility.yul\":1463:1469   */\n      dup1\n        /* \"#utility.yul\":1471:1477   */\n      0x00\n        /* \"#utility.yul\":1524:1526   */\n      0x60\n        /* \"#utility.yul\":1512:1521   */\n      dup5\n        /* \"#utility.yul\":1503:1510   */\n      dup7\n        /* \"#utility.yul\":1499:1522   */\n      sub\n        /* \"#utility.yul\":1495:1527   */\n      slt\n        /* \"#utility.yul\":1492:1544   */\n      iszero\n      tag_154\n      jumpi\n        /* \"#utility.yul\":1540:1541   */\n      0x00\n        /* \"#utility.yul\":1537:1538   */\n      dup1\n        /* \"#utility.yul\":1530:1542   */\n      revert\n        /* \"#utility.yul\":1492:1544   */\n    tag_154:\n        /* \"#utility.yul\":1563:1592   */\n      tag_155\n        /* \"#utility.yul\":1582:1591   */\n      dup5\n        /* \"#utility.yul\":1563:1592   */\n      tag_140\n      jump\t// in\n    tag_155:\n        /* \"#utility.yul\":1553:1592   */\n      swap3\n      pop\n        /* \"#utility.yul\":1611:1649   */\n      tag_156\n        /* \"#utility.yul\":1645:1647   */\n      0x20\n        /* \"#utility.yul\":1634:1643   */\n      dup6\n        /* \"#utility.yul\":1630:1648   */\n      add\n        /* \"#utility.yul\":1611:1649   */\n      tag_140\n      jump\t// in\n    tag_156:\n        /* \"#utility.yul\":1601:1649   */\n      swap2\n      pop\n        /* \"#utility.yul\":1696:1698   */\n      0x40\n        /* \"#utility.yul\":1685:1694   */\n      dup5\n        /* \"#utility.yul\":1681:1699   */\n      add\n        /* \"#utility.yul\":1668:1700   */\n      calldataload\n        /* \"#utility.yul\":1658:1700   */\n      swap1\n      pop\n        /* \"#utility.yul\":1378:1706   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1900:2086   */\n    tag_44:\n        /* \"#utility.yul\":1959:1965   */\n      0x00\n        /* \"#utility.yul\":2012:2014   */\n      0x20\n        /* \"#utility.yul\":2000:2009   */\n      dup3\n        /* \"#utility.yul\":1991:1998   */\n      dup5\n        /* \"#utility.yul\":1987:2010   */\n      sub\n        /* \"#utility.yul\":1983:2015   */\n      slt\n        /* \"#utility.yul\":1980:2032   */\n      iszero\n      tag_159\n      jumpi\n        /* \"#utility.yul\":2028:2029   */\n      0x00\n        /* \"#utility.yul\":2025:2026   */\n      dup1\n        /* \"#utility.yul\":2018:2030   */\n      revert\n        /* \"#utility.yul\":1980:2032   */\n    tag_159:\n        /* \"#utility.yul\":2051:2080   */\n      tag_160\n        /* \"#utility.yul\":2070:2079   */\n      dup3\n        /* \"#utility.yul\":2051:2080   */\n      tag_140\n      jump\t// in\n    tag_160:\n        /* \"#utility.yul\":2041:2080   */\n      swap4\n        /* \"#utility.yul\":1900:2086   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2091:2351   */\n    tag_60:\n        /* \"#utility.yul\":2159:2165   */\n      0x00\n        /* \"#utility.yul\":2167:2173   */\n      dup1\n        /* \"#utility.yul\":2220:2222   */\n      0x40\n        /* \"#utility.yul\":2208:2217   */\n      dup4\n        /* \"#utility.yul\":2199:2206   */\n      dup6\n        /* \"#utility.yul\":2195:2218   */\n      sub\n        /* \"#utility.yul\":2191:2223   */\n      slt\n        /* \"#utility.yul\":2188:2240   */\n      iszero\n      tag_162\n      jumpi\n        /* \"#utility.yul\":2236:2237   */\n      0x00\n        /* \"#utility.yul\":2233:2234   */\n      dup1\n        /* \"#utility.yul\":2226:2238   */\n      revert\n        /* \"#utility.yul\":2188:2240   */\n    tag_162:\n        /* \"#utility.yul\":2259:2288   */\n      tag_163\n        /* \"#utility.yul\":2278:2287   */\n      dup4\n        /* \"#utility.yul\":2259:2288   */\n      tag_140\n      jump\t// in\n    tag_163:\n        /* \"#utility.yul\":2249:2288   */\n      swap2\n      pop\n        /* \"#utility.yul\":2307:2345   */\n      tag_164\n        /* \"#utility.yul\":2341:2343   */\n      0x20\n        /* \"#utility.yul\":2330:2339   */\n      dup5\n        /* \"#utility.yul\":2326:2344   */\n      add\n        /* \"#utility.yul\":2307:2345   */\n      tag_140\n      jump\t// in\n    tag_164:\n        /* \"#utility.yul\":2297:2345   */\n      swap1\n      pop\n        /* \"#utility.yul\":2091:2351   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2356:2736   */\n    tag_65:\n        /* \"#utility.yul\":2435:2436   */\n      0x01\n        /* \"#utility.yul\":2431:2443   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":2478:2490   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":2499:2560   */\n      tag_166\n      jumpi\n        /* \"#utility.yul\":2553:2557   */\n      0x7f\n        /* \"#utility.yul\":2545:2551   */\n      dup3\n        /* \"#utility.yul\":2541:2558   */\n      and\n        /* \"#utility.yul\":2531:2558   */\n      swap2\n      pop\n        /* \"#utility.yul\":2499:2560   */\n    tag_166:\n        /* \"#utility.yul\":2606:2608   */\n      0x20\n        /* \"#utility.yul\":2598:2604   */\n      dup3\n        /* \"#utility.yul\":2595:2609   */\n      lt\n        /* \"#utility.yul\":2575:2593   */\n      dup2\n        /* \"#utility.yul\":2572:2610   */\n      sub\n        /* \"#utility.yul\":2569:2730   */\n      tag_167\n      jumpi\n        /* \"#utility.yul\":2652:2662   */\n      0x4e487b71\n        /* \"#utility.yul\":2647:2650   */\n      0xe0\n        /* \"#utility.yul\":2643:2663   */\n      shl\n        /* \"#utility.yul\":2640:2641   */\n      0x00\n        /* \"#utility.yul\":2633:2664   */\n      mstore\n        /* \"#utility.yul\":2687:2691   */\n      0x22\n        /* \"#utility.yul\":2684:2685   */\n      0x04\n        /* \"#utility.yul\":2677:2692   */\n      mstore\n        /* \"#utility.yul\":2715:2719   */\n      0x24\n        /* \"#utility.yul\":2712:2713   */\n      0x00\n        /* \"#utility.yul\":2705:2720   */\n      revert\n        /* \"#utility.yul\":2569:2730   */\n    tag_167:\n      pop\n        /* \"#utility.yul\":2356:2736   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2741:2963   */\n    tag_88:\n        /* \"#utility.yul\":2806:2815   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":2827:2837   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":2824:2957   */\n      iszero\n      tag_70\n      jumpi\n        /* \"#utility.yul\":2879:2889   */\n      0x4e487b71\n        /* \"#utility.yul\":2874:2877   */\n      0xe0\n        /* \"#utility.yul\":2870:2890   */\n      shl\n        /* \"#utility.yul\":2867:2868   */\n      0x00\n        /* \"#utility.yul\":2860:2891   */\n      mstore\n        /* \"#utility.yul\":2914:2918   */\n      0x11\n        /* \"#utility.yul\":2911:2912   */\n      0x04\n        /* \"#utility.yul\":2904:2919   */\n      mstore\n        /* \"#utility.yul\":2942:2946   */\n      0x24\n        /* \"#utility.yul\":2939:2940   */\n      0x00\n        /* \"#utility.yul\":2932:2947   */\n      revert\n\n    auxdata: 0xa26469706673582212204de8484411654014a98a1c91aa3de4caf4465e0a5185a83875572259e8be63c564736f6c63430008110033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610859806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c391906106a3565b60405180910390f35b6100df6100da36600461070d565b610232565b60405190151581526020016100c3565b6035545b6040519081526020016100c3565b6100df61010f366004610737565b61024c565b604051601281526020016100c3565b6100df61013136600461070d565b610270565b6100f3610144366004610773565b6001600160a01b031660009081526033602052604090205490565b6100b6610292565b6100df61017536600461070d565b6102a1565b6100df61018836600461070d565b610321565b6100f361019b366004610795565b61032f565b6060603680546101af906107c8565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906107c8565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b60003361024081858561035a565b60019150505b92915050565b60003361025a85828561047e565b6102658585856104f8565b506001949350505050565b600033610240818585610283838361032f565b61028d9190610802565b61035a565b6060603780546101af906107c8565b600033816102af828661032f565b9050838110156103145760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b610265828686840361035a565b6000336102408185856104f8565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b0383166103bc5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161030b565b6001600160a01b03821661041d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161030b565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061048a848461032f565b905060001981146104f257818110156104e55760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161030b565b6104f2848484840361035a565b50505050565b6001600160a01b03831661055c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161030b565b6001600160a01b0382166105be5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161030b565b6001600160a01b038316600090815260336020526040902054818110156106365760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161030b565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906106969086815260200190565b60405180910390a36104f2565b600060208083528351808285015260005b818110156106d0578581018301518582016040015282016106b4565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461070857600080fd5b919050565b6000806040838503121561072057600080fd5b610729836106f1565b946020939093013593505050565b60008060006060848603121561074c57600080fd5b610755846106f1565b9250610763602085016106f1565b9150604084013590509250925092565b60006020828403121561078557600080fd5b61078e826106f1565b9392505050565b600080604083850312156107a857600080fd5b6107b1836106f1565b91506107bf602084016106f1565b90509250929050565b600181811c908216806107dc57607f821691505b6020821081036107fc57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561024657634e487b7160e01b600052601160045260246000fdfea26469706673582212204de8484411654014a98a1c91aa3de4caf4465e0a5185a83875572259e8be63c564736f6c63430008110033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x859 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x6A3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x70D JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x737 JUMP JUMPDEST PUSH2 0x24C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x70D JUMP JUMPDEST PUSH2 0x270 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x773 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x292 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x70D JUMP JUMPDEST PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x70D JUMP JUMPDEST PUSH2 0x321 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x795 JUMP JUMPDEST PUSH2 0x32F JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7C8 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x7C8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x228 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x228 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x35A JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x25A DUP6 DUP3 DUP6 PUSH2 0x47E JUMP JUMPDEST PUSH2 0x265 DUP6 DUP6 DUP6 PUSH2 0x4F8 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x283 DUP4 DUP4 PUSH2 0x32F JUMP JUMPDEST PUSH2 0x28D SWAP2 SWAP1 PUSH2 0x802 JUMP JUMPDEST PUSH2 0x35A JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7C8 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2AF DUP3 DUP7 PUSH2 0x32F JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x314 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x265 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x35A JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x4F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x41D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x48A DUP5 DUP5 PUSH2 0x32F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4F2 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30B JUMP JUMPDEST PUSH2 0x4F2 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x35A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x636 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x696 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4F2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6D0 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x6B4 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x708 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x720 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x729 DUP4 PUSH2 0x6F1 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x74C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x755 DUP5 PUSH2 0x6F1 JUMP JUMPDEST SWAP3 POP PUSH2 0x763 PUSH1 0x20 DUP6 ADD PUSH2 0x6F1 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x785 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x78E DUP3 PUSH2 0x6F1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7B1 DUP4 PUSH2 0x6F1 JUMP JUMPDEST SWAP2 POP PUSH2 0x7BF PUSH1 0x20 DUP5 ADD PUSH2 0x6F1 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x7DC JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x7FC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x246 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4D 0xE8 BASEFEE DIFFICULTY GT PUSH6 0x4014A98A1C91 0xAA RETURNDATASIZE 0xE4 0xCA DELEGATECALL CHAINID 0x5E EXP MLOAD DUP6 0xA8 CODESIZE PUSH22 0x572259E8BE63C564736F6C6343000811003300000000 ",
							"sourceMap": "1480:12159:7:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_afterTokenTransfer_1558": {
									"entryPoint": null,
									"id": 1558,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_1493": {
									"entryPoint": 858,
									"id": 1493,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_1547": {
									"entryPoint": null,
									"id": 1547,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_msgSender_2546": {
									"entryPoint": null,
									"id": 2546,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_1536": {
									"entryPoint": 1150,
									"id": 1536,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_1319": {
									"entryPoint": 1272,
									"id": 1319,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_1114": {
									"entryPoint": 815,
									"id": 1114,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_1139": {
									"entryPoint": 562,
									"id": 1139,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_1071": {
									"entryPoint": null,
									"id": 1071,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_1047": {
									"entryPoint": null,
									"id": 1047,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decreaseAllowance_1242": {
									"entryPoint": 673,
									"id": 1242,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@increaseAllowance_1201": {
									"entryPoint": 624,
									"id": 1201,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@name_1027": {
									"entryPoint": 416,
									"id": 1027,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@symbol_1037": {
									"entryPoint": 658,
									"id": 1037,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_1057": {
									"entryPoint": null,
									"id": 1057,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_1172": {
									"entryPoint": 588,
									"id": 1172,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_1096": {
									"entryPoint": 801,
									"id": 1096,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 1777,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 1907,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 1941,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 1847,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 1805,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1699,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 2050,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 1992,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5754:19",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:19",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "135:427:19",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "145:12:19",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "155:2:19",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "149:2:19",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "173:9:19"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "184:2:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "166:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "166:21:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "196:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "216:6:19"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "210:5:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "210:13:19"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "200:6:19",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "243:9:19"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "254:2:19"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "239:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "239:18:19"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "259:6:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "232:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:34:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "232:34:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "275:10:19",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "284:1:19",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "279:1:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "344:90:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "373:9:19"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "384:1:19"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "369:3:19"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "369:17:19"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "388:2:19",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "365:3:19"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "365:26:19"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "407:6:19"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "415:1:19"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "403:3:19"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "403:14:19"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "419:2:19"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "399:3:19"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "399:23:19"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "393:5:19"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "393:30:19"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "358:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "358:66:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "358:66:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "305:1:19"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "308:6:19"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "302:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "302:13:19"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "316:19:19",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "318:15:19",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "327:1:19"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "330:2:19"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "323:3:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "323:10:19"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "318:1:19"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "298:3:19",
																"statements": []
															},
															"src": "294:140:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "458:9:19"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "469:6:19"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "454:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "454:22:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "478:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "450:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "450:31:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "483:1:19",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "443:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "443:42:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "443:42:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "494:62:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "510:9:19"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "529:6:19"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "537:2:19",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "525:3:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "525:15:19"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "546:2:19",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "542:3:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "542:7:19"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "521:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "521:29:19"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "506:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "506:45:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "553:2:19",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "502:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "502:54:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "494:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "104:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "115:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "126:4:19",
														"type": ""
													}
												],
												"src": "14:548:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "616:124:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "626:29:19",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "648:6:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "635:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "635:20:19"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "626:5:19"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "718:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "727:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "730:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "720:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "720:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "720:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "677:5:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "688:5:19"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "703:3:19",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "708:1:19",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "699:3:19"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "699:11:19"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "712:1:19",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "695:3:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "695:19:19"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "684:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "684:31:19"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "674:2:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "674:42:19"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "667:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "667:50:19"
															},
															"nodeType": "YulIf",
															"src": "664:70:19"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "595:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "606:5:19",
														"type": ""
													}
												],
												"src": "567:173:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "832:167:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "878:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "887:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "890:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "880:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "880:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "880:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "853:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "862:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "849:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "849:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "874:2:19",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "845:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "845:32:19"
															},
															"nodeType": "YulIf",
															"src": "842:52:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "903:39:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "932:9:19"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "913:18:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "913:29:19"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "903:6:19"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "951:42:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "978:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "989:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "974:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "974:18:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "961:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "961:32:19"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "951:6:19"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "790:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "801:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "813:6:19",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "821:6:19",
														"type": ""
													}
												],
												"src": "745:254:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1099:92:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1109:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1121:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1132:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1117:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1117:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1109:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1151:9:19"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1176:6:19"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1169:6:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1169:14:19"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1162:6:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1162:22:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1144:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1144:41:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1144:41:19"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1068:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1079:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1090:4:19",
														"type": ""
													}
												],
												"src": "1004:187:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1297:76:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1307:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1319:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1330:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1315:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1315:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1307:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1349:9:19"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1360:6:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1342:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1342:25:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1342:25:19"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1266:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1277:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1288:4:19",
														"type": ""
													}
												],
												"src": "1196:177:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1482:224:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1528:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1537:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1540:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1530:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1530:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1530:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1503:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1512:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1499:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1499:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1524:2:19",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1495:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1495:32:19"
															},
															"nodeType": "YulIf",
															"src": "1492:52:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1553:39:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1582:9:19"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1563:18:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1563:29:19"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1553:6:19"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1601:48:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1634:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1645:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1630:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1630:18:19"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1611:18:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1611:38:19"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1601:6:19"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1658:42:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1685:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1696:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1681:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1681:18:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1668:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1668:32:19"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1658:6:19"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1432:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1443:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1455:6:19",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1463:6:19",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1471:6:19",
														"type": ""
													}
												],
												"src": "1378:328:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1808:87:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1818:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1830:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1841:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1826:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1826:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1818:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1860:9:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1875:6:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1883:4:19",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1871:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1871:17:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1853:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1853:36:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1853:36:19"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1777:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1788:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1799:4:19",
														"type": ""
													}
												],
												"src": "1711:184:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1970:116:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2016:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2025:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2028:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2018:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2018:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2018:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1991:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2000:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1987:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1987:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2012:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1983:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1983:32:19"
															},
															"nodeType": "YulIf",
															"src": "1980:52:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2041:39:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2070:9:19"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2051:18:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2051:29:19"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2041:6:19"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1936:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1947:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1959:6:19",
														"type": ""
													}
												],
												"src": "1900:186:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2178:173:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2224:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2233:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2236:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2226:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2226:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2226:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2199:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2208:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2195:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2195:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2220:2:19",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2191:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2191:32:19"
															},
															"nodeType": "YulIf",
															"src": "2188:52:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2249:39:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2278:9:19"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2259:18:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2259:29:19"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2249:6:19"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2297:48:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2330:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2341:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2326:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2326:18:19"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2307:18:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2307:38:19"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2297:6:19"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2136:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2147:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2159:6:19",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2167:6:19",
														"type": ""
													}
												],
												"src": "2091:260:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2411:325:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2421:22:19",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2435:1:19",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2438:4:19"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "2431:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2431:12:19"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "2421:6:19"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2452:38:19",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2482:4:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2488:1:19",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2478:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2478:12:19"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "2456:18:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2529:31:19",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2531:27:19",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "2545:6:19"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2553:4:19",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "2541:3:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2541:17:19"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2531:6:19"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2509:18:19"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2502:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2502:26:19"
															},
															"nodeType": "YulIf",
															"src": "2499:61:19"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2619:111:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2640:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2647:3:19",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2652:10:19",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2643:3:19"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2643:20:19"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2633:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2633:31:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2633:31:19"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2684:1:19",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2687:4:19",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2677:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2677:15:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2677:15:19"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2712:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2715:4:19",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2705:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2705:15:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2705:15:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2575:18:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2598:6:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2606:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "2595:2:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2595:14:19"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "2572:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2572:38:19"
															},
															"nodeType": "YulIf",
															"src": "2569:161:19"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "2391:4:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2400:6:19",
														"type": ""
													}
												],
												"src": "2356:380:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2789:174:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2799:16:19",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2810:1:19"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2813:1:19"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2806:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2806:9:19"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "2799:3:19"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2846:111:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2867:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2874:3:19",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2879:10:19",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2870:3:19"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2870:20:19"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2860:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2860:31:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2860:31:19"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2911:1:19",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2914:4:19",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2904:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2904:15:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2904:15:19"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2939:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2942:4:19",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2932:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2932:15:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2932:15:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2830:1:19"
																	},
																	{
																		"name": "sum",
																		"nodeType": "YulIdentifier",
																		"src": "2833:3:19"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2827:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2827:10:19"
															},
															"nodeType": "YulIf",
															"src": "2824:133:19"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2772:1:19",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2775:1:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2781:3:19",
														"type": ""
													}
												],
												"src": "2741:222:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3142:227:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3159:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3170:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3152:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3152:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3152:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3193:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3204:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3189:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3189:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3209:2:19",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3182:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3182:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3182:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3232:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3243:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3228:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3228:18:19"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3248:34:19",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3221:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3221:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3221:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3303:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3314:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3299:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3299:18:19"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3319:7:19",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3292:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3292:35:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3292:35:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3336:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3348:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3359:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3344:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3344:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3336:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3119:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3133:4:19",
														"type": ""
													}
												],
												"src": "2968:401:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3548:226:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3565:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3576:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3558:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3558:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3558:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3599:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3610:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3595:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3595:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3615:2:19",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3588:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3588:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3588:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3638:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3649:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3634:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3634:18:19"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3654:34:19",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3627:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3627:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3627:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3709:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3720:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3705:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3705:18:19"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3725:6:19",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3698:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3698:34:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3698:34:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3741:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3753:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3764:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3749:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3749:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3741:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3525:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3539:4:19",
														"type": ""
													}
												],
												"src": "3374:400:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3953:224:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3970:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3981:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3963:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3963:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3963:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4004:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4015:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4000:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4000:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4020:2:19",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3993:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3993:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3993:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4043:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4054:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4039:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4039:18:19"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4059:34:19",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4032:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4032:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4032:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4114:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4125:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4110:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4110:18:19"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4130:4:19",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4103:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4103:32:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4103:32:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4144:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4156:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4167:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4152:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4152:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4144:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3930:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3944:4:19",
														"type": ""
													}
												],
												"src": "3779:398:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4356:179:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4373:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4384:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4366:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4366:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4366:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4407:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4418:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4403:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4403:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4423:2:19",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4396:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4396:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4396:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4446:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4457:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4442:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4442:18:19"
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4462:31:19",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4435:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4435:59:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4435:59:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4503:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4515:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4526:2:19",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4511:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4511:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4503:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4333:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4347:4:19",
														"type": ""
													}
												],
												"src": "4182:353:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4714:227:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4731:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4742:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4724:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4724:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4724:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4765:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4776:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4761:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4761:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4781:2:19",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4754:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4754:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4754:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4804:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4815:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4800:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4800:18:19"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4820:34:19",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4793:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4793:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4793:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4875:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4886:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4871:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4871:18:19"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4891:7:19",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4864:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4864:35:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4864:35:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4908:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4920:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4931:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4916:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4916:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4908:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4691:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4705:4:19",
														"type": ""
													}
												],
												"src": "4540:401:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5120:225:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5137:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5148:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5130:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5130:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5130:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5171:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5182:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5167:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5167:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5187:2:19",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5160:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5160:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5160:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5210:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5221:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5206:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5206:18:19"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5226:34:19",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5199:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5199:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5199:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5281:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5292:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5277:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5277:18:19"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5297:5:19",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5270:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5270:33:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5270:33:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5312:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5324:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5335:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5320:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5320:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5312:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5097:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5111:4:19",
														"type": ""
													}
												],
												"src": "4946:399:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5524:228:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5541:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5552:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5534:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5534:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5534:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5575:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5586:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5571:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5571:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5591:2:19",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5564:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5564:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5564:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5614:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5625:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5610:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5610:18:19"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5630:34:19",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5603:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5603:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5603:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5685:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5696:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5681:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5681:18:19"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5701:8:19",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5674:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5674:36:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5674:36:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5719:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5731:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5742:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5727:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5727:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5719:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5501:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5515:4:19",
														"type": ""
													}
												],
												"src": "5350:402:19"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n}",
									"id": 19,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c391906106a3565b60405180910390f35b6100df6100da36600461070d565b610232565b60405190151581526020016100c3565b6035545b6040519081526020016100c3565b6100df61010f366004610737565b61024c565b604051601281526020016100c3565b6100df61013136600461070d565b610270565b6100f3610144366004610773565b6001600160a01b031660009081526033602052604090205490565b6100b6610292565b6100df61017536600461070d565b6102a1565b6100df61018836600461070d565b610321565b6100f361019b366004610795565b61032f565b6060603680546101af906107c8565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906107c8565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b60003361024081858561035a565b60019150505b92915050565b60003361025a85828561047e565b6102658585856104f8565b506001949350505050565b600033610240818585610283838361032f565b61028d9190610802565b61035a565b6060603780546101af906107c8565b600033816102af828661032f565b9050838110156103145760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b610265828686840361035a565b6000336102408185856104f8565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b0383166103bc5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161030b565b6001600160a01b03821661041d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161030b565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061048a848461032f565b905060001981146104f257818110156104e55760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161030b565b6104f2848484840361035a565b50505050565b6001600160a01b03831661055c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161030b565b6001600160a01b0382166105be5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161030b565b6001600160a01b038316600090815260336020526040902054818110156106365760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161030b565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906106969086815260200190565b60405180910390a36104f2565b600060208083528351808285015260005b818110156106d0578581018301518582016040015282016106b4565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461070857600080fd5b919050565b6000806040838503121561072057600080fd5b610729836106f1565b946020939093013593505050565b60008060006060848603121561074c57600080fd5b610755846106f1565b9250610763602085016106f1565b9150604084013590509250925092565b60006020828403121561078557600080fd5b61078e826106f1565b9392505050565b600080604083850312156107a857600080fd5b6107b1836106f1565b91506107bf602084016106f1565b90509250929050565b600181811c908216806107dc57607f821691505b6020821081036107fc57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561024657634e487b7160e01b600052601160045260246000fdfea26469706673582212204de8484411654014a98a1c91aa3de4caf4465e0a5185a83875572259e8be63c564736f6c63430008110033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x6A3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x70D JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x737 JUMP JUMPDEST PUSH2 0x24C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x70D JUMP JUMPDEST PUSH2 0x270 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x773 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x292 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x70D JUMP JUMPDEST PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x70D JUMP JUMPDEST PUSH2 0x321 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x795 JUMP JUMPDEST PUSH2 0x32F JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7C8 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x7C8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x228 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x228 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x35A JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x25A DUP6 DUP3 DUP6 PUSH2 0x47E JUMP JUMPDEST PUSH2 0x265 DUP6 DUP6 DUP6 PUSH2 0x4F8 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x283 DUP4 DUP4 PUSH2 0x32F JUMP JUMPDEST PUSH2 0x28D SWAP2 SWAP1 PUSH2 0x802 JUMP JUMPDEST PUSH2 0x35A JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7C8 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2AF DUP3 DUP7 PUSH2 0x32F JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x314 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x265 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x35A JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x4F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x41D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x48A DUP5 DUP5 PUSH2 0x32F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4F2 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30B JUMP JUMPDEST PUSH2 0x4F2 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x35A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x636 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x696 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4F2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6D0 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x6B4 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x708 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x720 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x729 DUP4 PUSH2 0x6F1 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x74C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x755 DUP5 PUSH2 0x6F1 JUMP JUMPDEST SWAP3 POP PUSH2 0x763 PUSH1 0x20 DUP6 ADD PUSH2 0x6F1 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x785 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x78E DUP3 PUSH2 0x6F1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7B1 DUP4 PUSH2 0x6F1 JUMP JUMPDEST SWAP2 POP PUSH2 0x7BF PUSH1 0x20 DUP5 ADD PUSH2 0x6F1 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x7DC JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x7FC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x246 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4D 0xE8 BASEFEE DIFFICULTY GT PUSH6 0x4014A98A1C91 0xAA RETURNDATASIZE 0xE4 0xCA DELEGATECALL CHAINID 0x5E EXP MLOAD DUP6 0xA8 CODESIZE PUSH22 0x572259E8BE63C564736F6C6343000811003300000000 ",
							"sourceMap": "1480:12159:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2491:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4768:197;;;;;;:::i;:::-;;:::i;:::-;;;1169:14:19;;1162:22;1144:41;;1132:2;1117:18;4768:197:7;1004:187:19;3579:106:7;3666:12;;3579:106;;;1342:25:19;;;1330:2;1315:18;3579:106:7;1196:177:19;5527:286:7;;;;;;:::i;:::-;;:::i;3428:91::-;;;3510:2;1853:36:19;;1841:2;1826:18;3428:91:7;1711:184:19;6208:234:7;;;;;;:::i;:::-;;:::i;3743:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3843:18:7;3817:7;3843:18;;;:9;:18;;;;;;;3743:125;2702:102;;;:::i;6929:427::-;;;;;;:::i;:::-;;:::i;4064:189::-;;;;;;:::i;:::-;;:::i;4311:149::-;;;;;;:::i;:::-;;:::i;2491:98::-;2545:13;2577:5;2570:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2491:98;:::o;4768:197::-;4851:4;929:10:14;4905:32:7;929:10:14;4921:7:7;4930:6;4905:8;:32::i;:::-;4954:4;4947:11;;;4768:197;;;;;:::o;5527:286::-;5654:4;929:10:14;5710:38:7;5726:4;929:10:14;5741:6:7;5710:15;:38::i;:::-;5758:27;5768:4;5774:2;5778:6;5758:9;:27::i;:::-;-1:-1:-1;5802:4:7;;5527:286;-1:-1:-1;;;;5527:286:7:o;6208:234::-;6296:4;929:10:14;6350:64:7;929:10:14;6366:7:7;6403:10;6375:25;929:10:14;6366:7:7;6375:9;:25::i;:::-;:38;;;;:::i;:::-;6350:8;:64::i;2702:102::-;2758:13;2790:7;2783:14;;;;;:::i;6929:427::-;7022:4;929:10:14;7022:4:7;7103:25;929:10:14;7120:7:7;7103:9;:25::i;:::-;7076:52;;7166:15;7146:16;:35;;7138:85;;;;-1:-1:-1;;;7138:85:7;;3170:2:19;7138:85:7;;;3152:21:19;3209:2;3189:18;;;3182:30;3248:34;3228:18;;;3221:62;-1:-1:-1;;;3299:18:19;;;3292:35;3344:19;;7138:85:7;;;;;;;;;7257:60;7266:5;7273:7;7301:15;7282:16;:34;7257:8;:60::i;4064:189::-;4143:4;929:10:14;4197:28:7;929:10:14;4214:2:7;4218:6;4197:9;:28::i;4311:149::-;-1:-1:-1;;;;;4426:18:7;;;4400:7;4426:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4311:149::o;10841:370::-;-1:-1:-1;;;;;10972:19:7;;10964:68;;;;-1:-1:-1;;;10964:68:7;;3576:2:19;10964:68:7;;;3558:21:19;3615:2;3595:18;;;3588:30;3654:34;3634:18;;;3627:62;-1:-1:-1;;;3705:18:19;;;3698:34;3749:19;;10964:68:7;3374:400:19;10964:68:7;-1:-1:-1;;;;;11050:21:7;;11042:68;;;;-1:-1:-1;;;11042:68:7;;3981:2:19;11042:68:7;;;3963:21:19;4020:2;4000:18;;;3993:30;4059:34;4039:18;;;4032:62;-1:-1:-1;;;4110:18:19;;;4103:32;4152:19;;11042:68:7;3779:398:19;11042:68:7;-1:-1:-1;;;;;11121:18:7;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;11172:32;;1342:25:19;;;11172:32:7;;1315:18:19;11172:32:7;;;;;;;10841:370;;;:::o;11492:441::-;11622:24;11649:25;11659:5;11666:7;11649:9;:25::i;:::-;11622:52;;-1:-1:-1;;11688:16:7;:37;11684:243;;11769:6;11749:16;:26;;11741:68;;;;-1:-1:-1;;;11741:68:7;;4384:2:19;11741:68:7;;;4366:21:19;4423:2;4403:18;;;4396:30;4462:31;4442:18;;;4435:59;4511:18;;11741:68:7;4182:353:19;11741:68:7;11851:51;11860:5;11867:7;11895:6;11876:16;:25;11851:8;:51::i;:::-;11612:321;11492:441;;;:::o;7810:818::-;-1:-1:-1;;;;;7936:18:7;;7928:68;;;;-1:-1:-1;;;7928:68:7;;4742:2:19;7928:68:7;;;4724:21:19;4781:2;4761:18;;;4754:30;4820:34;4800:18;;;4793:62;-1:-1:-1;;;4871:18:19;;;4864:35;4916:19;;7928:68:7;4540:401:19;7928:68:7;-1:-1:-1;;;;;8014:16:7;;8006:64;;;;-1:-1:-1;;;8006:64:7;;5148:2:19;8006:64:7;;;5130:21:19;5187:2;5167:18;;;5160:30;5226:34;5206:18;;;5199:62;-1:-1:-1;;;5277:18:19;;;5270:33;5320:19;;8006:64:7;4946:399:19;8006:64:7;-1:-1:-1;;;;;8152:15:7;;8130:19;8152:15;;;:9;:15;;;;;;8185:21;;;;8177:72;;;;-1:-1:-1;;;8177:72:7;;5552:2:19;8177:72:7;;;5534:21:19;5591:2;5571:18;;;5564:30;5630:34;5610:18;;;5603:62;-1:-1:-1;;;5681:18:19;;;5674:36;5727:19;;8177:72:7;5350:402:19;8177:72:7;-1:-1:-1;;;;;8283:15:7;;;;;;;:9;:15;;;;;;8301:20;;;8283:38;;8498:13;;;;;;;;;;:23;;;;;;8547:26;;;;;;8315:6;1342:25:19;;1330:2;1315:18;;1196:177;8547:26:7;;;;;;;;8584:37;12517:121;14:548:19;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;298:3;483:1;478:2;469:6;458:9;454:22;450:31;443:42;553:2;546;542:7;537:2;529:6;525:15;521:29;510:9;506:45;502:54;494:62;;;;14:548;;;;:::o;567:173::-;635:20;;-1:-1:-1;;;;;684:31:19;;674:42;;664:70;;730:1;727;720:12;664:70;567:173;;;:::o;745:254::-;813:6;821;874:2;862:9;853:7;849:23;845:32;842:52;;;890:1;887;880:12;842:52;913:29;932:9;913:29;:::i;:::-;903:39;989:2;974:18;;;;961:32;;-1:-1:-1;;;745:254:19:o;1378:328::-;1455:6;1463;1471;1524:2;1512:9;1503:7;1499:23;1495:32;1492:52;;;1540:1;1537;1530:12;1492:52;1563:29;1582:9;1563:29;:::i;:::-;1553:39;;1611:38;1645:2;1634:9;1630:18;1611:38;:::i;:::-;1601:48;;1696:2;1685:9;1681:18;1668:32;1658:42;;1378:328;;;;;:::o;1900:186::-;1959:6;2012:2;2000:9;1991:7;1987:23;1983:32;1980:52;;;2028:1;2025;2018:12;1980:52;2051:29;2070:9;2051:29;:::i;:::-;2041:39;1900:186;-1:-1:-1;;;1900:186:19:o;2091:260::-;2159:6;2167;2220:2;2208:9;2199:7;2195:23;2191:32;2188:52;;;2236:1;2233;2226:12;2188:52;2259:29;2278:9;2259:29;:::i;:::-;2249:39;;2307:38;2341:2;2330:9;2326:18;2307:38;:::i;:::-;2297:48;;2091:260;;;;;:::o;2356:380::-;2435:1;2431:12;;;;2478;;;2499:61;;2553:4;2545:6;2541:17;2531:27;;2499:61;2606:2;2598:6;2595:14;2575:18;2572:38;2569:161;;2652:10;2647:3;2643:20;2640:1;2633:31;2687:4;2684:1;2677:15;2715:4;2712:1;2705:15;2569:161;;2356:380;;;:::o;2741:222::-;2806:9;;;2827:10;;;2824:133;;;2879:10;2874:3;2870:20;2867:1;2860:31;2914:4;2911:1;2904:15;2942:4;2939:1;2932:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "427400",
								"executionCost": "461",
								"totalCost": "427861"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24628",
								"balanceOf(address)": "2559",
								"decimals()": "266",
								"decreaseAllowance(address,uint256)": "27016",
								"increaseAllowance(address,uint256)": "infinite",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2326",
								"transfer(address,uint256)": "51147",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"__ERC20_init(string memory,string memory)": "infinite",
								"__ERC20_init_unchained(string memory,string memory)": "infinite",
								"_afterTokenTransfer(address,address,uint256)": "infinite",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "infinite",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1480,
									"end": 13639,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 1480,
									"end": 13639,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 1480,
									"end": 13639,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1480,
									"end": 13639,
									"name": "CALLVALUE",
									"source": 7
								},
								{
									"begin": 1480,
									"end": 13639,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1480,
									"end": 13639,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 1480,
									"end": 13639,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 1480,
									"end": 13639,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 1480,
									"end": 13639,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1480,
									"end": 13639,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1480,
									"end": 13639,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 1480,
									"end": 13639,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 1480,
									"end": 13639,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1480,
									"end": 13639,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1480,
									"end": 13639,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1480,
									"end": 13639,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1480,
									"end": 13639,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1480,
									"end": 13639,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1480,
									"end": 13639,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 1480,
									"end": 13639,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1480,
									"end": 13639,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212204de8484411654014a98a1c91aa3de4caf4465e0a5185a83875572259e8be63c564736f6c63430008110033",
									".code": [
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "tag",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "SHR",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH",
											"source": 7,
											"value": "39509351"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH",
											"source": 7,
											"value": "39509351"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH",
											"source": 7,
											"value": "70A08231"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH",
											"source": 7,
											"value": "95D89B41"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH",
											"source": 7,
											"value": "A457C2D7"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH",
											"source": 7,
											"value": "A9059CBB"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH",
											"source": 7,
											"value": "DD62ED3E"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "tag",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH",
											"source": 7,
											"value": "6FDDE03"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH",
											"source": 7,
											"value": "95EA7B3"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH",
											"source": 7,
											"value": "18160DDD"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH",
											"source": 7,
											"value": "23B872DD"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH",
											"source": 7,
											"value": "313CE567"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "tag",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1480,
											"end": 13639,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "tag",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 2491,
											"end": 2589,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "tag",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 2491,
											"end": 2589,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "tag",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "tag",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 4768,
											"end": 4965,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "tag",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 4768,
											"end": 4965,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "tag",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1169,
											"end": 1183,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 1169,
											"end": 1183,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1162,
											"end": 1184,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1144,
											"end": 1185,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1144,
											"end": 1185,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 1132,
											"end": 1134,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1117,
											"end": 1135,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 1004,
											"end": 1191,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "tag",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3666,
											"end": 3678,
											"name": "PUSH",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 3666,
											"end": 3678,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "tag",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 1330,
											"end": 1332,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1333,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 1196,
											"end": 1373,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "tag",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 5527,
											"end": 5813,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "tag",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 5527,
											"end": 5813,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3428,
											"end": 3519,
											"name": "tag",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 3428,
											"end": 3519,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3428,
											"end": 3519,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3428,
											"end": 3519,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3510,
											"end": 3512,
											"name": "PUSH",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 1853,
											"end": 1889,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1853,
											"end": 1889,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 1841,
											"end": 1843,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1826,
											"end": 1844,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3428,
											"end": 3519,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 1711,
											"end": 1895,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "tag",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 6208,
											"end": 6442,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "tag",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6208,
											"end": 6442,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "tag",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "43"
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3743,
											"end": 3868,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "tag",
											"source": 7,
											"value": "43"
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3817,
											"end": 3824,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3852,
											"name": "PUSH",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2702,
											"end": 2804,
											"name": "tag",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 2702,
											"end": 2804,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2702,
											"end": 2804,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 2702,
											"end": 2804,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 2702,
											"end": 2804,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "tag",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "51"
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 6929,
											"end": 7356,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "tag",
											"source": 7,
											"value": "51"
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "52"
										},
										{
											"begin": 6929,
											"end": 7356,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "tag",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "55"
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 4064,
											"end": 4253,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "tag",
											"source": 7,
											"value": "55"
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "56"
										},
										{
											"begin": 4064,
											"end": 4253,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "tag",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 4311,
											"end": 4460,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "tag",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "61"
										},
										{
											"begin": 4311,
											"end": 4460,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "tag",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2545,
											"end": 2558,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 2577,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 2570,
											"end": 2582,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "tag",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 2570,
											"end": 2582,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "tag",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "tag",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "tag",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "tag",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "tag",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4851,
											"end": 4855,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 4905,
											"end": 4937,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "73"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4921,
											"end": 4928,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4930,
											"end": 4936,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4905,
											"end": 4913,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "74"
										},
										{
											"begin": 4905,
											"end": 4937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4905,
											"end": 4937,
											"name": "tag",
											"source": 7,
											"value": "73"
										},
										{
											"begin": 4905,
											"end": 4937,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4954,
											"end": 4958,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 4947,
											"end": 4958,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4947,
											"end": 4958,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4947,
											"end": 4958,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "tag",
											"source": 7,
											"value": "70"
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "tag",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5654,
											"end": 5658,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 5710,
											"end": 5748,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "78"
										},
										{
											"begin": 5726,
											"end": 5730,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5741,
											"end": 5747,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5710,
											"end": 5725,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "79"
										},
										{
											"begin": 5710,
											"end": 5748,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5710,
											"end": 5748,
											"name": "tag",
											"source": 7,
											"value": "78"
										},
										{
											"begin": 5710,
											"end": 5748,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5758,
											"end": 5785,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 5768,
											"end": 5772,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5774,
											"end": 5776,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5778,
											"end": 5784,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5758,
											"end": 5767,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "81"
										},
										{
											"begin": 5758,
											"end": 5785,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5758,
											"end": 5785,
											"name": "tag",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 5758,
											"end": 5785,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5802,
											"end": 5806,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 5802,
											"end": 5806,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5527,
											"end": 5813,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "tag",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6296,
											"end": 6300,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 6350,
											"end": 6414,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "73"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6366,
											"end": 6373,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 6403,
											"end": 6413,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 6375,
											"end": 6400,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "86"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6366,
											"end": 6373,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6375,
											"end": 6384,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "61"
										},
										{
											"begin": 6375,
											"end": 6400,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6375,
											"end": 6400,
											"name": "tag",
											"source": 7,
											"value": "86"
										},
										{
											"begin": 6375,
											"end": 6400,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6375,
											"end": 6413,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "87"
										},
										{
											"begin": 6375,
											"end": 6413,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6375,
											"end": 6413,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6375,
											"end": 6413,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 6375,
											"end": 6413,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6375,
											"end": 6413,
											"name": "tag",
											"source": 7,
											"value": "87"
										},
										{
											"begin": 6375,
											"end": 6413,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6350,
											"end": 6358,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "74"
										},
										{
											"begin": 6350,
											"end": 6414,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2702,
											"end": 2804,
											"name": "tag",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 2702,
											"end": 2804,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2758,
											"end": 2771,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 2790,
											"end": 2797,
											"name": "PUSH",
											"source": 7,
											"value": "37"
										},
										{
											"begin": 2783,
											"end": 2797,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2783,
											"end": 2797,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2783,
											"end": 2797,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 2783,
											"end": 2797,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2783,
											"end": 2797,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 2783,
											"end": 2797,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "tag",
											"source": 7,
											"value": "52"
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7022,
											"end": 7026,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 7022,
											"end": 7026,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7103,
											"end": 7128,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7120,
											"end": 7127,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 7103,
											"end": 7112,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "61"
										},
										{
											"begin": 7103,
											"end": 7128,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 7103,
											"end": 7128,
											"name": "tag",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 7103,
											"end": 7128,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7076,
											"end": 7128,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7076,
											"end": 7128,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7166,
											"end": 7181,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7146,
											"end": 7162,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7146,
											"end": 7181,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 7146,
											"end": 7181,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "99"
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3170,
											"end": 3172,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3152,
											"end": 3173,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3209,
											"end": 3211,
											"name": "PUSH",
											"source": 19,
											"value": "25"
										},
										{
											"begin": 3189,
											"end": 3207,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 3189,
											"end": 3207,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3189,
											"end": 3207,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3182,
											"end": 3212,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3248,
											"end": 3282,
											"name": "PUSH",
											"source": 19,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 3228,
											"end": 3246,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 3228,
											"end": 3246,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3228,
											"end": 3246,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3221,
											"end": 3283,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3299,
											"end": 3317,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 3299,
											"end": 3317,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3299,
											"end": 3317,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3292,
											"end": 3327,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3344,
											"end": 3363,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 3344,
											"end": 3363,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "tag",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "tag",
											"source": 7,
											"value": "99"
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7257,
											"end": 7317,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 7266,
											"end": 7271,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7273,
											"end": 7280,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 7301,
											"end": 7316,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 7282,
											"end": 7298,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7282,
											"end": 7316,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 7257,
											"end": 7265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "74"
										},
										{
											"begin": 7257,
											"end": 7317,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "tag",
											"source": 7,
											"value": "56"
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4143,
											"end": 4147,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 4197,
											"end": 4225,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "73"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4214,
											"end": 4216,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4218,
											"end": 4224,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4197,
											"end": 4206,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "81"
										},
										{
											"begin": 4197,
											"end": 4225,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "tag",
											"source": 7,
											"value": "61"
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4400,
											"end": 4407,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4437,
											"name": "PUSH",
											"source": 7,
											"value": "34"
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4311,
											"end": 4460,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 10841,
											"end": 11211,
											"name": "tag",
											"source": 7,
											"value": "74"
										},
										{
											"begin": 10841,
											"end": 11211,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10972,
											"end": 10991,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 10972,
											"end": 10991,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 10964,
											"end": 11032,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "109"
										},
										{
											"begin": 10964,
											"end": 11032,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 10964,
											"end": 11032,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 10964,
											"end": 11032,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10964,
											"end": 11032,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10964,
											"end": 11032,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3576,
											"end": 3578,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 10964,
											"end": 11032,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 10964,
											"end": 11032,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10964,
											"end": 11032,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3558,
											"end": 3579,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3615,
											"end": 3617,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 3595,
											"end": 3613,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 3595,
											"end": 3613,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3595,
											"end": 3613,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3588,
											"end": 3618,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3654,
											"end": 3688,
											"name": "PUSH",
											"source": 19,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 3634,
											"end": 3652,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 3634,
											"end": 3652,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3634,
											"end": 3652,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3627,
											"end": 3689,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3705,
											"end": 3723,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 3705,
											"end": 3723,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3705,
											"end": 3723,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3698,
											"end": 3732,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3749,
											"end": 3768,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 3749,
											"end": 3768,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 10964,
											"end": 11032,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 3374,
											"end": 3774,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 10964,
											"end": 11032,
											"name": "tag",
											"source": 7,
											"value": "109"
										},
										{
											"begin": 10964,
											"end": 11032,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11050,
											"end": 11071,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11050,
											"end": 11071,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 11042,
											"end": 11110,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "112"
										},
										{
											"begin": 11042,
											"end": 11110,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 11042,
											"end": 11110,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 11042,
											"end": 11110,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11042,
											"end": 11110,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11042,
											"end": 11110,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3981,
											"end": 3983,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 11042,
											"end": 11110,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 11042,
											"end": 11110,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11042,
											"end": 11110,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3963,
											"end": 3984,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 4020,
											"end": 4022,
											"name": "PUSH",
											"source": 19,
											"value": "22"
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3993,
											"end": 4023,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 4059,
											"end": 4093,
											"name": "PUSH",
											"source": 19,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 4039,
											"end": 4057,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 4039,
											"end": 4057,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 4039,
											"end": 4057,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4032,
											"end": 4094,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4110,
											"end": 4128,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 4110,
											"end": 4128,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 4110,
											"end": 4128,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4103,
											"end": 4135,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 4152,
											"end": 4171,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 4152,
											"end": 4171,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11042,
											"end": 11110,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 3779,
											"end": 4177,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 11042,
											"end": 11110,
											"name": "tag",
											"source": 7,
											"value": "112"
										},
										{
											"begin": 11042,
											"end": 11110,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11132,
											"name": "PUSH",
											"source": 7,
											"value": "34"
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11157,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11157,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11157,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 11172,
											"end": 11204,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11172,
											"end": 11204,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 11172,
											"end": 11204,
											"name": "PUSH",
											"source": 7,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 11172,
											"end": 11204,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1315,
											"end": 1333,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11172,
											"end": 11204,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 11172,
											"end": 11204,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 11172,
											"end": 11204,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 11172,
											"end": 11204,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 11172,
											"end": 11204,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 11172,
											"end": 11204,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11172,
											"end": 11204,
											"name": "LOG3",
											"source": 7
										},
										{
											"begin": 10841,
											"end": 11211,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10841,
											"end": 11211,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10841,
											"end": 11211,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10841,
											"end": 11211,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 11492,
											"end": 11933,
											"name": "tag",
											"source": 7,
											"value": "79"
										},
										{
											"begin": 11492,
											"end": 11933,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11622,
											"end": 11646,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11649,
											"end": 11674,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "117"
										},
										{
											"begin": 11659,
											"end": 11664,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 11666,
											"end": 11673,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 11649,
											"end": 11658,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "61"
										},
										{
											"begin": 11649,
											"end": 11674,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 11649,
											"end": 11674,
											"name": "tag",
											"source": 7,
											"value": "117"
										},
										{
											"begin": 11649,
											"end": 11674,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11622,
											"end": 11674,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11622,
											"end": 11674,
											"name": "POP",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11688,
											"end": 11704,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11688,
											"end": 11725,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 11684,
											"end": 11927,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "122"
										},
										{
											"begin": 11684,
											"end": 11927,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 11769,
											"end": 11775,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11749,
											"end": 11765,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11749,
											"end": 11775,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 11749,
											"end": 11775,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 11741,
											"end": 11809,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "119"
										},
										{
											"begin": 11741,
											"end": 11809,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 11741,
											"end": 11809,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 11741,
											"end": 11809,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11741,
											"end": 11809,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11741,
											"end": 11809,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4384,
											"end": 4386,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 11741,
											"end": 11809,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 11741,
											"end": 11809,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11741,
											"end": 11809,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4366,
											"end": 4387,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 4423,
											"end": 4425,
											"name": "PUSH",
											"source": 19,
											"value": "1D"
										},
										{
											"begin": 4403,
											"end": 4421,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 4403,
											"end": 4421,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 4403,
											"end": 4421,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4396,
											"end": 4426,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 4462,
											"end": 4493,
											"name": "PUSH",
											"source": 19,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 4442,
											"end": 4460,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 4442,
											"end": 4460,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 4442,
											"end": 4460,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4435,
											"end": 4494,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 4511,
											"end": 4529,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 4511,
											"end": 4529,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11741,
											"end": 11809,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 4182,
											"end": 4535,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 11741,
											"end": 11809,
											"name": "tag",
											"source": 7,
											"value": "119"
										},
										{
											"begin": 11741,
											"end": 11809,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11851,
											"end": 11902,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "122"
										},
										{
											"begin": 11860,
											"end": 11865,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 11867,
											"end": 11874,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 11895,
											"end": 11901,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 11876,
											"end": 11892,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 11876,
											"end": 11901,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 11851,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "74"
										},
										{
											"begin": 11851,
											"end": 11902,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 11851,
											"end": 11902,
											"name": "tag",
											"source": 7,
											"value": "122"
										},
										{
											"begin": 11851,
											"end": 11902,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11612,
											"end": 11933,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11492,
											"end": 11933,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11492,
											"end": 11933,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11492,
											"end": 11933,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11492,
											"end": 11933,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 7810,
											"end": 8628,
											"name": "tag",
											"source": 7,
											"value": "81"
										},
										{
											"begin": 7810,
											"end": 8628,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7936,
											"end": 7954,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7936,
											"end": 7954,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 7928,
											"end": 7996,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "124"
										},
										{
											"begin": 7928,
											"end": 7996,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7928,
											"end": 7996,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7928,
											"end": 7996,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7928,
											"end": 7996,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7928,
											"end": 7996,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4742,
											"end": 4744,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 7928,
											"end": 7996,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 7928,
											"end": 7996,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7928,
											"end": 7996,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4724,
											"end": 4745,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 4781,
											"end": 4783,
											"name": "PUSH",
											"source": 19,
											"value": "25"
										},
										{
											"begin": 4761,
											"end": 4779,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 4761,
											"end": 4779,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 4761,
											"end": 4779,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4754,
											"end": 4784,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 4820,
											"end": 4854,
											"name": "PUSH",
											"source": 19,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 4800,
											"end": 4818,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 4800,
											"end": 4818,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 4800,
											"end": 4818,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4793,
											"end": 4855,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4871,
											"end": 4889,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 4871,
											"end": 4889,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 4871,
											"end": 4889,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4864,
											"end": 4899,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 4916,
											"end": 4935,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 4916,
											"end": 4935,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7928,
											"end": 7996,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 4540,
											"end": 4941,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 7928,
											"end": 7996,
											"name": "tag",
											"source": 7,
											"value": "124"
										},
										{
											"begin": 7928,
											"end": 7996,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8014,
											"end": 8030,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8014,
											"end": 8030,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 8006,
											"end": 8070,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "127"
										},
										{
											"begin": 8006,
											"end": 8070,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 8006,
											"end": 8070,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 8006,
											"end": 8070,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8006,
											"end": 8070,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8006,
											"end": 8070,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5148,
											"end": 5150,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 8006,
											"end": 8070,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 8006,
											"end": 8070,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8006,
											"end": 8070,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5130,
											"end": 5151,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 5187,
											"end": 5189,
											"name": "PUSH",
											"source": 19,
											"value": "23"
										},
										{
											"begin": 5167,
											"end": 5185,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 5167,
											"end": 5185,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5167,
											"end": 5185,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5160,
											"end": 5190,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 5226,
											"end": 5260,
											"name": "PUSH",
											"source": 19,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 5206,
											"end": 5224,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 5206,
											"end": 5224,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5206,
											"end": 5224,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5199,
											"end": 5261,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5277,
											"end": 5295,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 5277,
											"end": 5295,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5277,
											"end": 5295,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5270,
											"end": 5303,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 5320,
											"end": 5339,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 5320,
											"end": 5339,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 8006,
											"end": 8070,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 4946,
											"end": 5345,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 8006,
											"end": 8070,
											"name": "tag",
											"source": 7,
											"value": "127"
										},
										{
											"begin": 8006,
											"end": 8070,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8152,
											"end": 8167,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8152,
											"end": 8167,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 8130,
											"end": 8149,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8152,
											"end": 8167,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8152,
											"end": 8167,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8152,
											"end": 8167,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8152,
											"end": 8161,
											"name": "PUSH",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 8152,
											"end": 8167,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8152,
											"end": 8167,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8152,
											"end": 8167,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 8152,
											"end": 8167,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8152,
											"end": 8167,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 8152,
											"end": 8167,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 8185,
											"end": 8206,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8185,
											"end": 8206,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8185,
											"end": 8206,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 8185,
											"end": 8206,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 8177,
											"end": 8249,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "132"
										},
										{
											"begin": 8177,
											"end": 8249,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 8177,
											"end": 8249,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 8177,
											"end": 8249,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8177,
											"end": 8249,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8177,
											"end": 8249,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5552,
											"end": 5554,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 8177,
											"end": 8249,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 8177,
											"end": 8249,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8177,
											"end": 8249,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5534,
											"end": 5555,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 5591,
											"end": 5593,
											"name": "PUSH",
											"source": 19,
											"value": "26"
										},
										{
											"begin": 5571,
											"end": 5589,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 5571,
											"end": 5589,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5571,
											"end": 5589,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5564,
											"end": 5594,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 5630,
											"end": 5664,
											"name": "PUSH",
											"source": 19,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 5610,
											"end": 5628,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 5610,
											"end": 5628,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5610,
											"end": 5628,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5603,
											"end": 5665,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5681,
											"end": 5699,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 5681,
											"end": 5699,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5681,
											"end": 5699,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5674,
											"end": 5710,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 5727,
											"end": 5746,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 5727,
											"end": 5746,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 8177,
											"end": 8249,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 5350,
											"end": 5752,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 8177,
											"end": 8249,
											"name": "tag",
											"source": 7,
											"value": "132"
										},
										{
											"begin": 8177,
											"end": 8249,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8283,
											"end": 8292,
											"name": "PUSH",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 8301,
											"end": 8321,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 8301,
											"end": 8321,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 8301,
											"end": 8321,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 8283,
											"end": 8321,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8283,
											"end": 8321,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8511,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8511,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8511,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8511,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8511,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8511,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8511,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8511,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8511,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8511,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8521,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8521,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8521,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8521,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8521,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8521,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "PUSH",
											"source": 7,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "135"
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8315,
											"end": 8321,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 1330,
											"end": 1332,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1333,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1315,
											"end": 1333,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 1196,
											"end": 1373,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "tag",
											"source": 7,
											"value": "135"
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "LOG3",
											"source": 7
										},
										{
											"begin": 8584,
											"end": 8621,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "122"
										},
										{
											"begin": 12517,
											"end": 12638,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 14,
											"end": 562,
											"name": "tag",
											"source": 19,
											"value": "18"
										},
										{
											"begin": 14,
											"end": 562,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 155,
											"end": 157,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 184,
											"end": 186,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 173,
											"end": 182,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 166,
											"end": 187,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 216,
											"end": 222,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 210,
											"end": 223,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 259,
											"end": 265,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 254,
											"end": 256,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 243,
											"end": 252,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 239,
											"end": 257,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 232,
											"end": 266,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 284,
											"end": 285,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 19,
											"value": "143"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 308,
											"end": 314,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 305,
											"end": 306,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 302,
											"end": 315,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 294,
											"end": 434,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "145"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 403,
											"end": 417,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 399,
											"end": 422,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 399,
											"end": 422,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 393,
											"end": 423,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 369,
											"end": 386,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 388,
											"end": 390,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 365,
											"end": 391,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 358,
											"end": 424,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 323,
											"end": 333,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 323,
											"end": 333,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "143"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 19,
											"value": "145"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 298,
											"end": 301,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 483,
											"end": 484,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 478,
											"end": 480,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 469,
											"end": 475,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 458,
											"end": 467,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 454,
											"end": 476,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 450,
											"end": 481,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 443,
											"end": 485,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 553,
											"end": 555,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 546,
											"end": 548,
											"name": "PUSH",
											"source": 19,
											"value": "1F"
										},
										{
											"begin": 542,
											"end": 549,
											"name": "NOT",
											"source": 19
										},
										{
											"begin": 537,
											"end": 539,
											"name": "PUSH",
											"source": 19,
											"value": "1F"
										},
										{
											"begin": 529,
											"end": 535,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 525,
											"end": 540,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 521,
											"end": 550,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 510,
											"end": 519,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 506,
											"end": 551,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 502,
											"end": 556,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 494,
											"end": 556,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 494,
											"end": 556,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 494,
											"end": 556,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 494,
											"end": 556,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 14,
											"end": 562,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 14,
											"end": 562,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 14,
											"end": 562,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 14,
											"end": 562,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 14,
											"end": 562,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 567,
											"end": 740,
											"name": "tag",
											"source": 19,
											"value": "140"
										},
										{
											"begin": 567,
											"end": 740,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 635,
											"end": 655,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 635,
											"end": 655,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 684,
											"end": 715,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 684,
											"end": 715,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 674,
											"end": 716,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 674,
											"end": 716,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 664,
											"end": 734,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "147"
										},
										{
											"begin": 664,
											"end": 734,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 730,
											"end": 731,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 727,
											"end": 728,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 720,
											"end": 732,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 664,
											"end": 734,
											"name": "tag",
											"source": 19,
											"value": "147"
										},
										{
											"begin": 664,
											"end": 734,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 567,
											"end": 740,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 567,
											"end": 740,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 567,
											"end": 740,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 567,
											"end": 740,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 745,
											"end": 999,
											"name": "tag",
											"source": 19,
											"value": "21"
										},
										{
											"begin": 745,
											"end": 999,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 813,
											"end": 819,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 821,
											"end": 827,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 874,
											"end": 876,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 862,
											"end": 871,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 853,
											"end": 860,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 849,
											"end": 872,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 845,
											"end": 877,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 842,
											"end": 894,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 842,
											"end": 894,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "149"
										},
										{
											"begin": 842,
											"end": 894,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 890,
											"end": 891,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 887,
											"end": 888,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 880,
											"end": 892,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 842,
											"end": 894,
											"name": "tag",
											"source": 19,
											"value": "149"
										},
										{
											"begin": 842,
											"end": 894,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 913,
											"end": 942,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "150"
										},
										{
											"begin": 932,
											"end": 941,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 913,
											"end": 942,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "140"
										},
										{
											"begin": 913,
											"end": 942,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 913,
											"end": 942,
											"name": "tag",
											"source": 19,
											"value": "150"
										},
										{
											"begin": 913,
											"end": 942,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 903,
											"end": 942,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": 989,
											"end": 991,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 974,
											"end": 992,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 974,
											"end": 992,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 974,
											"end": 992,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 974,
											"end": 992,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 961,
											"end": 993,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 961,
											"end": 993,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 745,
											"end": 999,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "tag",
											"source": 19,
											"value": "31"
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1455,
											"end": 1461,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1463,
											"end": 1469,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1471,
											"end": 1477,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1524,
											"end": 1526,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 1512,
											"end": 1521,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 1503,
											"end": 1510,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 1499,
											"end": 1522,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 1495,
											"end": 1527,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 1492,
											"end": 1544,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1492,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "154"
										},
										{
											"begin": 1492,
											"end": 1544,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 1540,
											"end": 1541,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1537,
											"end": 1538,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1530,
											"end": 1542,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 1492,
											"end": 1544,
											"name": "tag",
											"source": 19,
											"value": "154"
										},
										{
											"begin": 1492,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1563,
											"end": 1592,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "155"
										},
										{
											"begin": 1582,
											"end": 1591,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 1563,
											"end": 1592,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "140"
										},
										{
											"begin": 1563,
											"end": 1592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1563,
											"end": 1592,
											"name": "tag",
											"source": 19,
											"value": "155"
										},
										{
											"begin": 1563,
											"end": 1592,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1553,
											"end": 1592,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 1553,
											"end": 1592,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1611,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "156"
										},
										{
											"begin": 1645,
											"end": 1647,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1634,
											"end": 1643,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 1630,
											"end": 1648,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1611,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "140"
										},
										{
											"begin": 1611,
											"end": 1649,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1611,
											"end": 1649,
											"name": "tag",
											"source": 19,
											"value": "156"
										},
										{
											"begin": 1611,
											"end": 1649,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1601,
											"end": 1649,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 1601,
											"end": 1649,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1696,
											"end": 1698,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 1685,
											"end": 1694,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 1681,
											"end": 1699,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1668,
											"end": 1700,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 1658,
											"end": 1700,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 1658,
											"end": 1700,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 1378,
											"end": 1706,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1900,
											"end": 2086,
											"name": "tag",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 1900,
											"end": 2086,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1959,
											"end": 1965,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2012,
											"end": 2014,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 2000,
											"end": 2009,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 1991,
											"end": 1998,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 1987,
											"end": 2010,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 1983,
											"end": 2015,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 1980,
											"end": 2032,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1980,
											"end": 2032,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "159"
										},
										{
											"begin": 1980,
											"end": 2032,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 2028,
											"end": 2029,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2025,
											"end": 2026,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2018,
											"end": 2030,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 1980,
											"end": 2032,
											"name": "tag",
											"source": 19,
											"value": "159"
										},
										{
											"begin": 1980,
											"end": 2032,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2051,
											"end": 2080,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "160"
										},
										{
											"begin": 2070,
											"end": 2079,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 2051,
											"end": 2080,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "140"
										},
										{
											"begin": 2051,
											"end": 2080,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2051,
											"end": 2080,
											"name": "tag",
											"source": 19,
											"value": "160"
										},
										{
											"begin": 2051,
											"end": 2080,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2041,
											"end": 2080,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 1900,
											"end": 2086,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1900,
											"end": 2086,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2091,
											"end": 2351,
											"name": "tag",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 2091,
											"end": 2351,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2159,
											"end": 2165,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2167,
											"end": 2173,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2220,
											"end": 2222,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 2208,
											"end": 2217,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 2199,
											"end": 2206,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 2195,
											"end": 2218,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 2191,
											"end": 2223,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 2188,
											"end": 2240,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 2188,
											"end": 2240,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "162"
										},
										{
											"begin": 2188,
											"end": 2240,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 2236,
											"end": 2237,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2233,
											"end": 2234,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2226,
											"end": 2238,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 2188,
											"end": 2240,
											"name": "tag",
											"source": 19,
											"value": "162"
										},
										{
											"begin": 2188,
											"end": 2240,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2259,
											"end": 2288,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "163"
										},
										{
											"begin": 2278,
											"end": 2287,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 2259,
											"end": 2288,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "140"
										},
										{
											"begin": 2259,
											"end": 2288,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2259,
											"end": 2288,
											"name": "tag",
											"source": 19,
											"value": "163"
										},
										{
											"begin": 2259,
											"end": 2288,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2249,
											"end": 2288,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 2249,
											"end": 2288,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2307,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "164"
										},
										{
											"begin": 2341,
											"end": 2343,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 2330,
											"end": 2339,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 2326,
											"end": 2344,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 2307,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "140"
										},
										{
											"begin": 2307,
											"end": 2345,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2307,
											"end": 2345,
											"name": "tag",
											"source": 19,
											"value": "164"
										},
										{
											"begin": 2307,
											"end": 2345,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2297,
											"end": 2345,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 2297,
											"end": 2345,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2091,
											"end": 2351,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 2091,
											"end": 2351,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2091,
											"end": 2351,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 2091,
											"end": 2351,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 2091,
											"end": 2351,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2091,
											"end": 2351,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2356,
											"end": 2736,
											"name": "tag",
											"source": 19,
											"value": "65"
										},
										{
											"begin": 2356,
											"end": 2736,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2435,
											"end": 2436,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 2431,
											"end": 2443,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 2431,
											"end": 2443,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 2431,
											"end": 2443,
											"name": "SHR",
											"source": 19
										},
										{
											"begin": 2431,
											"end": 2443,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 2478,
											"end": 2490,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 2478,
											"end": 2490,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 2478,
											"end": 2490,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2499,
											"end": 2560,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "166"
										},
										{
											"begin": 2499,
											"end": 2560,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 2553,
											"end": 2557,
											"name": "PUSH",
											"source": 19,
											"value": "7F"
										},
										{
											"begin": 2545,
											"end": 2551,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 2531,
											"end": 2558,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 2531,
											"end": 2558,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2499,
											"end": 2560,
											"name": "tag",
											"source": 19,
											"value": "166"
										},
										{
											"begin": 2499,
											"end": 2560,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2606,
											"end": 2608,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 2598,
											"end": 2604,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 2575,
											"end": 2593,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 2572,
											"end": 2610,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 2569,
											"end": 2730,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "167"
										},
										{
											"begin": 2569,
											"end": 2730,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 2652,
											"end": 2662,
											"name": "PUSH",
											"source": 19,
											"value": "4E487B71"
										},
										{
											"begin": 2647,
											"end": 2650,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 2643,
											"end": 2663,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 2640,
											"end": 2641,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2633,
											"end": 2664,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 2687,
											"end": 2691,
											"name": "PUSH",
											"source": 19,
											"value": "22"
										},
										{
											"begin": 2684,
											"end": 2685,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 2677,
											"end": 2692,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 2715,
											"end": 2719,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 2712,
											"end": 2713,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2705,
											"end": 2720,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 2569,
											"end": 2730,
											"name": "tag",
											"source": 19,
											"value": "167"
										},
										{
											"begin": 2569,
											"end": 2730,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2569,
											"end": 2730,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2356,
											"end": 2736,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 2356,
											"end": 2736,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 2356,
											"end": 2736,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2356,
											"end": 2736,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2741,
											"end": 2963,
											"name": "tag",
											"source": 19,
											"value": "88"
										},
										{
											"begin": 2741,
											"end": 2963,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2806,
											"end": 2815,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2806,
											"end": 2815,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 2806,
											"end": 2815,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 2827,
											"end": 2837,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2827,
											"end": 2837,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 2827,
											"end": 2837,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 2824,
											"end": 2957,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 2824,
											"end": 2957,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "70"
										},
										{
											"begin": 2824,
											"end": 2957,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 2879,
											"end": 2889,
											"name": "PUSH",
											"source": 19,
											"value": "4E487B71"
										},
										{
											"begin": 2874,
											"end": 2877,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 2870,
											"end": 2890,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 2867,
											"end": 2868,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2860,
											"end": 2891,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 2914,
											"end": 2918,
											"name": "PUSH",
											"source": 19,
											"value": "11"
										},
										{
											"begin": 2911,
											"end": 2912,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 2904,
											"end": 2919,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 2942,
											"end": 2946,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 2939,
											"end": 2940,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2932,
											"end": 2947,
											"name": "REVERT",
											"source": 19
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/interfaces/draft-IERC1822Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/beacon/IBeaconUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/IERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/CountersUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/StorageSlotUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol",
								"contracts/BRNKC.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":\"ERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://899f850f7df5a270bccfb765d70069959ca1c20d3a7381c1c3bda8a3ffee1935\",\"dweb:/ipfs/QmVdnAqwyX2L3nX2HDA5WKGtVBFyH1nKE9A1k7fZnPBkhP\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7c39b800e55781c0f7a644ec9cc615664dbe2f009198e537e6acaad3086ba093\",\"dweb:/ipfs/Qmaugq2wsB1ASX8Kv29NwXqYhZY8HRNqcdvmBe9UUNEq2V\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 527,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 530,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 2560,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 971,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_balances",
								"offset": 0,
								"slot": "51",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 977,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_allowances",
								"offset": 0,
								"slot": "52",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 979,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "53",
								"type": "t_uint256"
							},
							{
								"astId": 981,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_name",
								"offset": 0,
								"slot": "54",
								"type": "t_string_storage"
							},
							{
								"astId": 983,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_symbol",
								"offset": 0,
								"slot": "55",
								"type": "t_string_storage"
							},
							{
								"astId": 1563,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "56",
								"type": "t_array(t_uint256)45_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)45_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[45]",
								"numberOfBytes": "1440"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/IERC20Upgradeable.sol": {
				"IERC20Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
				"ERC20BurnableUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
							},
							"burnFrom(address,uint256)": {
								"details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":\"ERC20BurnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://899f850f7df5a270bccfb765d70069959ca1c20d3a7381c1c3bda8a3ffee1935\",\"dweb:/ipfs/QmVdnAqwyX2L3nX2HDA5WKGtVBFyH1nKE9A1k7fZnPBkhP\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7c39b800e55781c0f7a644ec9cc615664dbe2f009198e537e6acaad3086ba093\",\"dweb:/ipfs/Qmaugq2wsB1ASX8Kv29NwXqYhZY8HRNqcdvmBe9UUNEq2V\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3483370aa549810a946ace621a225616bb6d0b9ed22c3a99bbcf80dc4866ec39\",\"dweb:/ipfs/QmdgFnm6X2oQ574eJFLghVXVckwyC3SbiAUxXs934N1qvf\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 527,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 530,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 2560,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 971,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "_balances",
								"offset": 0,
								"slot": "51",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 977,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "_allowances",
								"offset": 0,
								"slot": "52",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 979,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "53",
								"type": "t_uint256"
							},
							{
								"astId": 981,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "_name",
								"offset": 0,
								"slot": "54",
								"type": "t_string_storage"
							},
							{
								"astId": 983,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "_symbol",
								"offset": 0,
								"slot": "55",
								"type": "t_string_storage"
							},
							{
								"astId": 1563,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "56",
								"type": "t_array(t_uint256)45_storage"
							},
							{
								"astId": 1705,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:ERC20BurnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "101",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)45_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[45]",
								"numberOfBytes": "1440"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol": {
				"ERC20SnapshotUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								}
							],
							"name": "Snapshot",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "snapshotId",
									"type": "uint256"
								}
							],
							"name": "balanceOfAt",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "snapshotId",
									"type": "uint256"
								}
							],
							"name": "totalSupplyAt",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and total supply at the time are recorded for later access. This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting. In naive implementations it's possible to perform a \"double spend\" attack by reusing the same balance from different accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be used to create an efficient ERC20 forking mechanism. Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id and the account address. NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it return `block.number` will trigger the creation of snapshot at the beginning of each new block. When overriding this function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract. Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient alternative consider {ERC20Votes}. ==== Gas Costs Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much smaller since identical balances in subsequent snapshots are stored as a single entry. There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent transfers will have normal cost until the next snapshot, and so on.",
						"events": {
							"Snapshot(uint256)": {
								"details": "Emitted by {_snapshot} when a snapshot identified by `id` is created."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"balanceOfAt(address,uint256)": {
								"details": "Retrieves the balance of `account` at the time `snapshotId` was created."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"totalSupplyAt(uint256)": {
								"details": "Retrieves the total supply at the time `snapshotId` was created."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"balanceOfAt(address,uint256)": "4ee2cd7e",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"totalSupplyAt(uint256)": "981b24d0",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Snapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and total supply at the time are recorded for later access. This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting. In naive implementations it's possible to perform a \\\"double spend\\\" attack by reusing the same balance from different accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be used to create an efficient ERC20 forking mechanism. Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id and the account address. NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it return `block.number` will trigger the creation of snapshot at the beginning of each new block. When overriding this function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract. Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient alternative consider {ERC20Votes}. ==== Gas Costs Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much smaller since identical balances in subsequent snapshots are stored as a single entry. There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent transfers will have normal cost until the next snapshot, and so on.\",\"events\":{\"Snapshot(uint256)\":{\"details\":\"Emitted by {_snapshot} when a snapshot identified by `id` is created.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"balanceOfAt(address,uint256)\":{\"details\":\"Retrieves the balance of `account` at the time `snapshotId` was created.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"totalSupplyAt(uint256)\":{\"details\":\"Retrieves the total supply at the time `snapshotId` was created.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":\"ERC20SnapshotUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://899f850f7df5a270bccfb765d70069959ca1c20d3a7381c1c3bda8a3ffee1935\",\"dweb:/ipfs/QmVdnAqwyX2L3nX2HDA5WKGtVBFyH1nKE9A1k7fZnPBkhP\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7c39b800e55781c0f7a644ec9cc615664dbe2f009198e537e6acaad3086ba093\",\"dweb:/ipfs/Qmaugq2wsB1ASX8Kv29NwXqYhZY8HRNqcdvmBe9UUNEq2V\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":{\"keccak256\":\"0x42da8099f59958af496f6c8f0d9c1ce0a929151e02f877e4be23aca4cc440cbe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://781b129c8102160319aeaf01b4760e50291bbe1e4ae12b97fbdb79bda38c0d3f\",\"dweb:/ipfs/QmNPDyvAPLaVBE5mS6fZJbqW4zZ93osaYdZEz2CPYRYtPU\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":{\"keccak256\":\"0xc3821e9d41b2b19b612238b308dcc8f4ab46afcd0f6b3bd174e89789bbf59e26\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e31dc401f4ddf373f106ddbab972d14eee74305c8fe358a4a6eedac7b934569a\",\"dweb:/ipfs/QmQ8zCXY1UkGLkRnA346kjSqAnfj1iWWH2Q4pE4qivqW3p\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/CountersUpgradeable.sol\":{\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c41e8a7a906b8f362c8b760a44edadc61782008ea2ecf377ac5b5325bf6c3912\",\"dweb:/ipfs/QmcXr19zuH3YLzD6RZNE6UTzvsKSckdxZQnagPoDGkCHu2\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/StorageSlotUpgradeable.sol\":{\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://aedb48081190fa828d243529ce25c708202c7d4ccfe99f0e4ecd6bc0cfcd03f3\",\"dweb:/ipfs/QmWyiDQHPZA56iqsAwTmiJoxvNeRQLUVr4gTfzpdpXivpo\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol\":{\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://056027a78e6f4b78a39be530983551651ee5a052e786ca2c1c6a3bb1222b03b4\",\"dweb:/ipfs/QmXRUpywAqNwAfXS89vrtiE2THRM9dX9pQ4QxAkV1Wx9kt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 527,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 530,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 2560,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 971,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable",
								"label": "_balances",
								"offset": 0,
								"slot": "51",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 977,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable",
								"label": "_allowances",
								"offset": 0,
								"slot": "52",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 979,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "53",
								"type": "t_uint256"
							},
							{
								"astId": 981,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable",
								"label": "_name",
								"offset": 0,
								"slot": "54",
								"type": "t_string_storage"
							},
							{
								"astId": 983,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable",
								"label": "_symbol",
								"offset": 0,
								"slot": "55",
								"type": "t_string_storage"
							},
							{
								"astId": 1563,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "56",
								"type": "t_array(t_uint256)45_storage"
							},
							{
								"astId": 1749,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable",
								"label": "_accountBalanceSnapshots",
								"offset": 0,
								"slot": "101",
								"type": "t_mapping(t_address,t_struct(Snapshots)1744_storage)"
							},
							{
								"astId": 1752,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable",
								"label": "_totalSupplySnapshots",
								"offset": 0,
								"slot": "102",
								"type": "t_struct(Snapshots)1744_storage"
							},
							{
								"astId": 1755,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable",
								"label": "_currentSnapshotId",
								"offset": 0,
								"slot": "104",
								"type": "t_struct(Counter)2567_storage"
							},
							{
								"astId": 2053,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "105",
								"type": "t_array(t_uint256)46_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)45_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[45]",
								"numberOfBytes": "1440"
							},
							"t_array(t_uint256)46_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[46]",
								"numberOfBytes": "1472"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_array(t_uint256)dyn_storage": {
								"base": "t_uint256",
								"encoding": "dynamic_array",
								"label": "uint256[]",
								"numberOfBytes": "32"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_struct(Snapshots)1744_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct ERC20SnapshotUpgradeable.Snapshots)",
								"numberOfBytes": "32",
								"value": "t_struct(Snapshots)1744_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(Counter)2567_storage": {
								"encoding": "inplace",
								"label": "struct CountersUpgradeable.Counter",
								"members": [
									{
										"astId": 2566,
										"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable",
										"label": "_value",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "32"
							},
							"t_struct(Snapshots)1744_storage": {
								"encoding": "inplace",
								"label": "struct ERC20SnapshotUpgradeable.Snapshots",
								"members": [
									{
										"astId": 1740,
										"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable",
										"label": "ids",
										"offset": 0,
										"slot": "0",
										"type": "t_array(t_uint256)dyn_storage"
									},
									{
										"astId": 1743,
										"contract": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable",
										"label": "values",
										"offset": 0,
										"slot": "1",
										"type": "t_array(t_uint256)dyn_storage"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"IERC20MetadataUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":\"IERC20MetadataUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol": {
				"AddressUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":194:8281  library AddressUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":194:8281  library AddressUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212207b51e537395912c259f6498884969ee2d72d439bca268b6eac78a74dc9a1277764736f6c63430008110033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207b51e537395912c259f6498884969ee2d72d439bca268b6eac78a74dc9a1277764736f6c63430008110033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH28 0x51E537395912C259F6498884969EE2D72D439BCA268B6EAC78A74DC9 LOG1 0x27 PUSH24 0x64736F6C6343000811003300000000000000000000000000 ",
							"sourceMap": "194:8087:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8087:12;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207b51e537395912c259f6498884969ee2d72d439bca268b6eac78a74dc9a1277764736f6c63430008110033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH28 0x51E537395912C259F6498884969EE2D72D439BCA268B6EAC78A74DC9 LOG1 0x27 PUSH24 0x64736F6C6343000811003300000000000000000000000000 ",
							"sourceMap": "194:8087:12:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 12,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "BYTE",
									"source": 12
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "EQ",
									"source": 12
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "ADDRESS",
									"source": 12
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "MSTORE8",
									"source": 12
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 194,
									"end": 8281,
									"name": "RETURN",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212207b51e537395912c259f6498884969ee2d72d439bca268b6eac78a74dc9a1277764736f6c63430008110033",
									".code": [
										{
											"begin": 194,
											"end": 8281,
											"name": "PUSHDEPLOYADDRESS",
											"source": 12
										},
										{
											"begin": 194,
											"end": 8281,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 194,
											"end": 8281,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 194,
											"end": 8281,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 8281,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 8281,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 194,
											"end": 8281,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 8281,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 194,
											"end": 8281,
											"name": "REVERT",
											"source": 12
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/interfaces/draft-IERC1822Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/beacon/IBeaconUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/IERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/CountersUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/StorageSlotUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol",
								"contracts/BRNKC.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol": {
				"ArraysUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to array types.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":266:3343  library ArraysUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":266:3343  library ArraysUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122009f6ab028481ce9714c3ac3e29e9b3b944b083e12b43abc278152098291c4c4464736f6c63430008110033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122009f6ab028481ce9714c3ac3e29e9b3b944b083e12b43abc278152098291c4c4464736f6c63430008110033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MULMOD 0xF6 0xAB MUL DUP5 DUP2 0xCE SWAP8 EQ 0xC3 0xAC RETURNDATACOPY 0x29 0xE9 0xB3 0xB9 DIFFICULTY 0xB0 DUP4 0xE1 0x2B NUMBER 0xAB 0xC2 PUSH25 0x152098291C4C4464736F6C6343000811003300000000000000 ",
							"sourceMap": "266:3077:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;266:3077:13;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122009f6ab028481ce9714c3ac3e29e9b3b944b083e12b43abc278152098291c4c4464736f6c63430008110033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MULMOD 0xF6 0xAB MUL DUP5 DUP2 0xCE SWAP8 EQ 0xC3 0xAC RETURNDATACOPY 0x29 0xE9 0xB3 0xB9 DIFFICULTY 0xB0 DUP4 0xE1 0x2B NUMBER 0xAB 0xC2 PUSH25 0x152098291C4C4464736F6C6343000811003300000000000000 ",
							"sourceMap": "266:3077:13:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"findUpperBound(uint256[] storage pointer,uint256)": "infinite",
								"unsafeAccess(address[] storage pointer,uint256)": "infinite",
								"unsafeAccess(bytes32[] storage pointer,uint256)": "infinite",
								"unsafeAccess(uint256[] storage pointer,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 266,
									"end": 3343,
									"name": "PUSH #[$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "PUSH [$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "PUSH",
									"source": 13,
									"value": "B"
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "CODECOPY",
									"source": 13
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "BYTE",
									"source": 13
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "PUSH",
									"source": 13,
									"value": "73"
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "EQ",
									"source": 13
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "PUSH",
									"source": 13,
									"value": "4"
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "PUSH",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "tag",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "ADDRESS",
									"source": 13
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "PUSH",
									"source": 13,
									"value": "73"
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "MSTORE8",
									"source": 13
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 266,
									"end": 3343,
									"name": "RETURN",
									"source": 13
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122009f6ab028481ce9714c3ac3e29e9b3b944b083e12b43abc278152098291c4c4464736f6c63430008110033",
									".code": [
										{
											"begin": 266,
											"end": 3343,
											"name": "PUSHDEPLOYADDRESS",
											"source": 13
										},
										{
											"begin": 266,
											"end": 3343,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": 266,
											"end": 3343,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 266,
											"end": 3343,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 266,
											"end": 3343,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 266,
											"end": 3343,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 266,
											"end": 3343,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 266,
											"end": 3343,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 266,
											"end": 3343,
											"name": "REVERT",
											"source": 13
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/interfaces/draft-IERC1822Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/beacon/IBeaconUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/IERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/CountersUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/StorageSlotUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol",
								"contracts/BRNKC.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to array types.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":\"ArraysUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":{\"keccak256\":\"0xc3821e9d41b2b19b612238b308dcc8f4ab46afcd0f6b3bd174e89789bbf59e26\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e31dc401f4ddf373f106ddbab972d14eee74305c8fe358a4a6eedac7b934569a\",\"dweb:/ipfs/QmQ8zCXY1UkGLkRnA346kjSqAnfj1iWWH2Q4pE4qivqW3p\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/StorageSlotUpgradeable.sol\":{\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://aedb48081190fa828d243529ce25c708202c7d4ccfe99f0e4ecd6bc0cfcd03f3\",\"dweb:/ipfs/QmWyiDQHPZA56iqsAwTmiJoxvNeRQLUVr4gTfzpdpXivpo\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol\":{\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://056027a78e6f4b78a39be530983551651ee5a052e786ca2c1c6a3bb1222b03b4\",\"dweb:/ipfs/QmXRUpywAqNwAfXS89vrtiE2THRM9dX9pQ4QxAkV1Wx9kt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://899f850f7df5a270bccfb765d70069959ca1c20d3a7381c1c3bda8a3ffee1935\",\"dweb:/ipfs/QmVdnAqwyX2L3nX2HDA5WKGtVBFyH1nKE9A1k7fZnPBkhP\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 527,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 530,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 2560,
								"contract": "@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/utils/CountersUpgradeable.sol": {
				"CountersUpgradeable": {
					"abi": [],
					"devdoc": {
						"author": "Matt Condon (@shrugs)",
						"details": "Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`",
						"kind": "dev",
						"methods": {},
						"title": "Counters",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/CountersUpgradeable.sol\":424:1406  library CountersUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/CountersUpgradeable.sol\":424:1406  library CountersUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212208aa2c6697ea68341f2f54b6b4a191b8ccf6deb76fbdbda5381e92a4f69aa3d2d64736f6c63430008110033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208aa2c6697ea68341f2f54b6b4a191b8ccf6deb76fbdbda5381e92a4f69aa3d2d64736f6c63430008110033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 LOG2 0xC6 PUSH10 0x7EA68341F2F54B6B4A19 SHL DUP13 0xCF PUSH14 0xEB76FBDBDA5381E92A4F69AA3D2D PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
							"sourceMap": "424:982:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;424:982:15;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208aa2c6697ea68341f2f54b6b4a191b8ccf6deb76fbdbda5381e92a4f69aa3d2d64736f6c63430008110033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 LOG2 0xC6 PUSH10 0x7EA68341F2F54B6B4A19 SHL DUP13 0xCF PUSH14 0xEB76FBDBDA5381E92A4F69AA3D2D PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
							"sourceMap": "424:982:15:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"current(struct CountersUpgradeable.Counter storage pointer)": "infinite",
								"decrement(struct CountersUpgradeable.Counter storage pointer)": "infinite",
								"increment(struct CountersUpgradeable.Counter storage pointer)": "infinite",
								"reset(struct CountersUpgradeable.Counter storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 424,
									"end": 1406,
									"name": "PUSH #[$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "PUSH [$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "PUSH",
									"source": 15,
									"value": "B"
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "CODECOPY",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "BYTE",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "EQ",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "JUMPI",
									"source": 15
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "PUSH",
									"source": 15,
									"value": "4"
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "PUSH",
									"source": 15,
									"value": "24"
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "REVERT",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "tag",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "ADDRESS",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "MSTORE8",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 424,
									"end": 1406,
									"name": "RETURN",
									"source": 15
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212208aa2c6697ea68341f2f54b6b4a191b8ccf6deb76fbdbda5381e92a4f69aa3d2d64736f6c63430008110033",
									".code": [
										{
											"begin": 424,
											"end": 1406,
											"name": "PUSHDEPLOYADDRESS",
											"source": 15
										},
										{
											"begin": 424,
											"end": 1406,
											"name": "ADDRESS",
											"source": 15
										},
										{
											"begin": 424,
											"end": 1406,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 424,
											"end": 1406,
											"name": "PUSH",
											"source": 15,
											"value": "80"
										},
										{
											"begin": 424,
											"end": 1406,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 424,
											"end": 1406,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 424,
											"end": 1406,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 424,
											"end": 1406,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 424,
											"end": 1406,
											"name": "REVERT",
											"source": 15
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/interfaces/draft-IERC1822Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/beacon/IBeaconUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/IERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/CountersUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/StorageSlotUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol",
								"contracts/BRNKC.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.8.0/utils/CountersUpgradeable.sol\":\"CountersUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.8.0/utils/CountersUpgradeable.sol\":{\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c41e8a7a906b8f362c8b760a44edadc61782008ea2ecf377ac5b5325bf6c3912\",\"dweb:/ipfs/QmcXr19zuH3YLzD6RZNE6UTzvsKSckdxZQnagPoDGkCHu2\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/utils/StorageSlotUpgradeable.sol": {
				"StorageSlotUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/StorageSlotUpgradeable.sol\":1279:2681  library StorageSlotUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/StorageSlotUpgradeable.sol\":1279:2681  library StorageSlotUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212208c81581d9aa13728350ffed3c79861313d06f9e3f82721f6ed541c3f20dc2cad64736f6c63430008110033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208c81581d9aa13728350ffed3c79861313d06f9e3f82721f6ed541c3f20dc2cad64736f6c63430008110033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP13 DUP2 PC SAR SWAP11 LOG1 CALLDATACOPY 0x28 CALLDATALOAD 0xF INVALID 0xD3 0xC7 SWAP9 PUSH2 0x313D MOD 0xF9 0xE3 0xF8 0x27 0x21 0xF6 0xED SLOAD SHR EXTCODEHASH KECCAK256 0xDC 0x2C 0xAD PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
							"sourceMap": "1279:1402:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1279:1402:16;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208c81581d9aa13728350ffed3c79861313d06f9e3f82721f6ed541c3f20dc2cad64736f6c63430008110033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP13 DUP2 PC SAR SWAP11 LOG1 CALLDATACOPY 0x28 CALLDATALOAD 0xF INVALID 0xD3 0xC7 SWAP9 PUSH2 0x313D MOD 0xF9 0xE3 0xF8 0x27 0x21 0xF6 0xED SLOAD SHR EXTCODEHASH KECCAK256 0xDC 0x2C 0xAD PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
							"sourceMap": "1279:1402:16:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"getAddressSlot(bytes32)": "infinite",
								"getBooleanSlot(bytes32)": "infinite",
								"getBytes32Slot(bytes32)": "infinite",
								"getUint256Slot(bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1279,
									"end": 2681,
									"name": "PUSH #[$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "PUSH [$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "PUSH",
									"source": 16,
									"value": "B"
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "BYTE",
									"source": 16
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "PUSH",
									"source": 16,
									"value": "4"
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "PUSH",
									"source": 16,
									"value": "24"
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "tag",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "ADDRESS",
									"source": 16
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "MSTORE8",
									"source": 16
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 1279,
									"end": 2681,
									"name": "RETURN",
									"source": 16
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212208c81581d9aa13728350ffed3c79861313d06f9e3f82721f6ed541c3f20dc2cad64736f6c63430008110033",
									".code": [
										{
											"begin": 1279,
											"end": 2681,
											"name": "PUSHDEPLOYADDRESS",
											"source": 16
										},
										{
											"begin": 1279,
											"end": 2681,
											"name": "ADDRESS",
											"source": 16
										},
										{
											"begin": 1279,
											"end": 2681,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 1279,
											"end": 2681,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 1279,
											"end": 2681,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 1279,
											"end": 2681,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 1279,
											"end": 2681,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 1279,
											"end": 2681,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 1279,
											"end": 2681,
											"name": "REVERT",
											"source": 16
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/interfaces/draft-IERC1822Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/beacon/IBeaconUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/IERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/CountersUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/StorageSlotUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol",
								"contracts/BRNKC.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.8.0/utils/StorageSlotUpgradeable.sol\":\"StorageSlotUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.8.0/utils/StorageSlotUpgradeable.sol\":{\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://aedb48081190fa828d243529ce25c708202c7d4ccfe99f0e4ecd6bc0cfcd03f3\",\"dweb:/ipfs/QmWyiDQHPZA56iqsAwTmiJoxvNeRQLUVr4gTfzpdpXivpo\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol": {
				"MathUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol\":202:12515  library MathUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol\":202:12515  library MathUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212200cfa451976246a5ad2b1d7951f0214b16812a2e52821bcf13697dcc8226a37cc64736f6c63430008110033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200cfa451976246a5ad2b1d7951f0214b16812a2e52821bcf13697dcc8226a37cc64736f6c63430008110033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC STATICCALL GASLIMIT NOT PUSH23 0x246A5AD2B1D7951F0214B16812A2E52821BCF13697DCC8 0x22 PUSH11 0x37CC64736F6C6343000811 STOP CALLER ",
							"sourceMap": "202:12313:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12313:17;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200cfa451976246a5ad2b1d7951f0214b16812a2e52821bcf13697dcc8226a37cc64736f6c63430008110033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC STATICCALL GASLIMIT NOT PUSH23 0x246A5AD2B1D7951F0214B16812A2E52821BCF13697DCC8 0x22 PUSH11 0x37CC64736F6C6343000811 STOP CALLER ",
							"sourceMap": "202:12313:17:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum MathUpgradeable.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum MathUpgradeable.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum MathUpgradeable.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum MathUpgradeable.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH #[$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH [$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH",
									"source": 17,
									"value": "B"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "CODECOPY",
									"source": 17
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "BYTE",
									"source": 17
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "EQ",
									"source": 17
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH",
									"source": 17,
									"value": "4"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH",
									"source": 17,
									"value": "24"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "REVERT",
									"source": 17
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "tag",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "ADDRESS",
									"source": 17
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "MSTORE8",
									"source": 17
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 202,
									"end": 12515,
									"name": "RETURN",
									"source": 17
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212200cfa451976246a5ad2b1d7951f0214b16812a2e52821bcf13697dcc8226a37cc64736f6c63430008110033",
									".code": [
										{
											"begin": 202,
											"end": 12515,
											"name": "PUSHDEPLOYADDRESS",
											"source": 17
										},
										{
											"begin": 202,
											"end": 12515,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 202,
											"end": 12515,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 202,
											"end": 12515,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 202,
											"end": 12515,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 202,
											"end": 12515,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 202,
											"end": 12515,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 202,
											"end": 12515,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 202,
											"end": 12515,
											"name": "REVERT",
											"source": 17
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/interfaces/draft-IERC1822Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/beacon/IBeaconUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/IERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/CountersUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/StorageSlotUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol",
								"contracts/BRNKC.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol\":{\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://056027a78e6f4b78a39be530983551651ee5a052e786ca2c1c6a3bb1222b03b4\",\"dweb:/ipfs/QmXRUpywAqNwAfXS89vrtiE2THRM9dX9pQ4QxAkV1Wx9kt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/BRNKC.sol": {
				"BearNetwork": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "previousAdmin",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "newAdmin",
									"type": "address"
								}
							],
							"name": "AdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "beacon",
									"type": "address"
								}
							],
							"name": "BeaconUpgraded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								}
							],
							"name": "Snapshot",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "implementation",
									"type": "address"
								}
							],
							"name": "Upgraded",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "snapshotId",
									"type": "uint256"
								}
							],
							"name": "balanceOfAt",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "pause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "proxiableUUID",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "snapshot",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "snapshotId",
									"type": "uint256"
								}
							],
							"name": "totalSupplyAt",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unpause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newImplementation",
									"type": "address"
								}
							],
							"name": "upgradeTo",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newImplementation",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "upgradeToAndCall",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"custom:security-contact": "bnkt@bearnetwork.net",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"balanceOfAt(address,uint256)": {
								"details": "Retrieves the balance of `account` at the time `snapshotId` was created."
							},
							"burn(uint256)": {
								"details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
							},
							"burnFrom(address,uint256)": {
								"details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
							},
							"constructor": {
								"custom:oz-upgrades-unsafe-allow": "constructor"
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							},
							"proxiableUUID()": {
								"details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"totalSupplyAt(uint256)": {
								"details": "Retrieves the total supply at the time `snapshotId` was created."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							},
							"upgradeTo(address)": {
								"details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
							},
							"upgradeToAndCall(address,bytes)": {
								"details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/BRNKC.sol\":1018:2319  contract BearNetwork is Initializable, ERC20Upgradeable, ERC20BurnableUpgradeable, ERC20SnapshotUpgradeable, OwnableUpgradeable, PausableUpgradeable, UUPSUpgradeable {... */\n  mstore(0x40, 0xa0)\n    /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":1332:1336  this */\n  address\n    /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":1289:1337  address private immutable __self = address(this) */\n  0x80\n  mstore\n    /* \"contracts/BRNKC.sol\":1245:1300  constructor() {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"contracts/BRNKC.sol\":1270:1292  _disableInitializers() */\n  tag_4\n    /* \"contracts/BRNKC.sol\":1270:1290  _disableInitializers */\n  tag_5\n    /* \"contracts/BRNKC.sol\":1270:1292  _disableInitializers() */\n  jump\t// in\ntag_4:\n    /* \"contracts/BRNKC.sol\":1018:2319  contract BearNetwork is Initializable, ERC20Upgradeable, ERC20BurnableUpgradeable, ERC20SnapshotUpgradeable, OwnableUpgradeable, PausableUpgradeable, UUPSUpgradeable {... */\n  jump(tag_14)\n    /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":5928:6207  function _disableInitializers() internal virtual {... */\ntag_5:\n    /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":5996:6009  _initializing */\n  sload(0x00)\n  0x0100\n  swap1\n  div\n  0xff\n  and\n    /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":5995:6009  !_initializing */\n  iszero\n    /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":5987:6053  require(!_initializing, \"Initializable: contract is initializing\") */\n  tag_8\n  jumpi\n  mload(0x40)\n  shl(0xe5, 0x461bcd)\n  dup2\n  mstore\n    /* \"#utility.yul\":216:218   */\n  0x20\n    /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":5987:6053  require(!_initializing, \"Initializable: contract is initializing\") */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":198:219   */\n  mstore\n    /* \"#utility.yul\":255:257   */\n  0x27\n    /* \"#utility.yul\":235:253   */\n  0x24\n  dup3\n  add\n    /* \"#utility.yul\":228:258   */\n  mstore\n    /* \"#utility.yul\":294:328   */\n  0x496e697469616c697a61626c653a20636f6e747261637420697320696e697469\n    /* \"#utility.yul\":274:292   */\n  0x44\n  dup3\n  add\n    /* \"#utility.yul\":267:329   */\n  mstore\n  shl(0xc8, 0x616c697a696e67)\n    /* \"#utility.yul\":345:363   */\n  0x64\n  dup3\n  add\n    /* \"#utility.yul\":338:375   */\n  mstore\n    /* \"#utility.yul\":392:411   */\n  0x84\n  add\n    /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":5987:6053  require(!_initializing, \"Initializable: contract is initializing\") */\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\ntag_8:\n    /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":6067:6079  _initialized */\n  sload(0x00)\n    /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":6082:6097  type(uint8).max */\n  0xff\n    /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":6067:6079  _initialized */\n  swap1\n  dup2\n  and\n    /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":6067:6097  _initialized < type(uint8).max */\n  lt\n    /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":6063:6201  if (_initialized < type(uint8).max) {... */\n  iszero\n  tag_11\n  jumpi\n    /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":6113:6125  _initialized */\n  0x00\n    /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":6113:6143  _initialized = type(uint8).max */\n  dup1\n  sload\n  not(0xff)\n  and\n    /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":6128:6143  type(uint8).max */\n  0xff\n    /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":6113:6143  _initialized = type(uint8).max */\n  swap1\n  dup2\n  or\n  swap1\n  swap2\n  sstore\n    /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":6162:6190  Initialized(type(uint8).max) */\n  mload(0x40)\n    /* \"#utility.yul\":564:600   */\n  swap1\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":6162:6190  Initialized(type(uint8).max) */\n  0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498\n  swap1\n    /* \"#utility.yul\":552:554   */\n  0x20\n    /* \"#utility.yul\":537:555   */\n  add\n    /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":6162:6190  Initialized(type(uint8).max) */\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log1\n    /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":6063:6201  if (_initialized < type(uint8).max) {... */\ntag_11:\n    /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":5928:6207  function _disableInitializers() internal virtual {... */\n  jump\t// out\n    /* \"#utility.yul\":422:606   */\ntag_14:\n    /* \"contracts/BRNKC.sol\":1018:2319  contract BearNetwork is Initializable, ERC20Upgradeable, ERC20BurnableUpgradeable, ERC20SnapshotUpgradeable, OwnableUpgradeable, PausableUpgradeable, UUPSUpgradeable {... */\n  mload(0x80)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0x4c643d5d9b0441803235e222732b65e2dc488f209ae20302cca6cafc813933a8\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"contracts/BRNKC.sol\":1018:2319  contract BearNetwork is Initializable, ERC20Upgradeable, ERC20BurnableUpgradeable, ERC20SnapshotUpgradeable, OwnableUpgradeable, PausableUpgradeable, UUPSUpgradeable {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x5c975abb\n      gt\n      tag_29\n      jumpi\n      dup1\n      0x95d89b41\n      gt\n      tag_30\n      jumpi\n      dup1\n      0xa457c2d7\n      gt\n      tag_31\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_25\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_26\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_27\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_28\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_31:\n      dup1\n      0x95d89b41\n      eq\n      tag_22\n      jumpi\n      dup1\n      0x9711715a\n      eq\n      tag_23\n      jumpi\n      dup1\n      0x981b24d0\n      eq\n      tag_24\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_30:\n      dup1\n      0x79cc6790\n      gt\n      tag_32\n      jumpi\n      dup1\n      0x79cc6790\n      eq\n      tag_18\n      jumpi\n      dup1\n      0x8129fc1c\n      eq\n      tag_19\n      jumpi\n      dup1\n      0x8456cb59\n      eq\n      tag_20\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_21\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_32:\n      dup1\n      0x5c975abb\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_17\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_29:\n      dup1\n      0x39509351\n      gt\n      tag_33\n      jumpi\n      dup1\n      0x42966c68\n      gt\n      tag_34\n      jumpi\n      dup1\n      0x42966c68\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x4ee2cd7e\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x4f1ef286\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x52d1902d\n      eq\n      tag_14\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_34:\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x3f4ba83a\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x40c10f19\n      eq\n      tag_10\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_33:\n      dup1\n      0x06fdde03\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x3659cfe6\n      eq\n      tag_7\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2491:2589  function name() public view virtual override returns (string memory) {... */\n    tag_2:\n      callvalue\n      dup1\n      iszero\n      tag_35\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_35:\n      pop\n      tag_36\n      tag_37\n      jump\t// in\n    tag_36:\n      mload(0x40)\n      tag_38\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_38:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4768:4965  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_40\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_40:\n      pop\n      tag_41\n      tag_42\n      calldatasize\n      0x04\n      tag_43\n      jump\t// in\n    tag_42:\n      tag_44\n      jump\t// in\n    tag_41:\n      mload(0x40)\n        /* \"#utility.yul\":1272:1286   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1265:1287   */\n      iszero\n        /* \"#utility.yul\":1247:1288   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1235:1237   */\n      0x20\n        /* \"#utility.yul\":1220:1238   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4768:4965  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      tag_38\n        /* \"#utility.yul\":1107:1294   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3579:3685  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_47\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_47:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3666:3678  _totalSupply */\n      sload(0x35)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3579:3685  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_48:\n      mload(0x40)\n        /* \"#utility.yul\":1445:1470   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1433:1435   */\n      0x20\n        /* \"#utility.yul\":1418:1436   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3579:3685  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_38\n        /* \"#utility.yul\":1299:1476   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5527:5813  function transferFrom(... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_52\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_52:\n      pop\n      tag_41\n      tag_54\n      calldatasize\n      0x04\n      tag_55\n      jump\t// in\n    tag_54:\n      tag_56\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3428:3519  function decimals() public view virtual override returns (uint8) {... */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_58\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_58:\n      pop\n      mload(0x40)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3510:3512  18 */\n      0x12\n        /* \"#utility.yul\":1956:1992   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1944:1946   */\n      0x20\n        /* \"#utility.yul\":1929:1947   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3428:3519  function decimals() public view virtual override returns (uint8) {... */\n      tag_38\n        /* \"#utility.yul\":1814:1998   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3317:3514  function upgradeTo(address newImplementation) external virtual onlyProxy {... */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_63\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_63:\n      pop\n      tag_64\n      tag_65\n      calldatasize\n      0x04\n      tag_66\n      jump\t// in\n    tag_65:\n      tag_67\n      jump\t// in\n    tag_64:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6208:6442  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_68\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_68:\n      pop\n      tag_41\n      tag_70\n      calldatasize\n      0x04\n      tag_43\n      jump\t// in\n    tag_70:\n      tag_71\n      jump\t// in\n        /* \"contracts/BRNKC.sol\":1773:1838  function unpause() public onlyOwner {... */\n    tag_9:\n      callvalue\n      dup1\n      iszero\n      tag_73\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_73:\n      pop\n      tag_64\n      tag_75\n      jump\t// in\n        /* \"contracts/BRNKC.sol\":1846:1941  function mint(address to, uint256 amount) public onlyOwner {... */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_76\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_76:\n      pop\n      tag_64\n      tag_78\n      calldatasize\n      0x04\n      tag_43\n      jump\t// in\n    tag_78:\n      tag_79\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":848:937  function burn(uint256 amount) public virtual {... */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_80\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_80:\n      pop\n      tag_64\n      tag_82\n      calldatasize\n      0x04\n      tag_83\n      jump\t// in\n    tag_82:\n      tag_84\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5312:5574  function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {... */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_85\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_85:\n      pop\n      tag_48\n      tag_87\n      calldatasize\n      0x04\n      tag_43\n      jump\t// in\n    tag_87:\n      tag_88\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3763:3985  function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {... */\n    tag_13:\n      tag_64\n      tag_91\n      calldatasize\n      0x04\n      tag_92\n      jump\t// in\n    tag_91:\n      tag_93\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3006:3137  function proxiableUUID() external view virtual override notDelegated returns (bytes32) {... */\n    tag_14:\n      callvalue\n      dup1\n      iszero\n      tag_94\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_94:\n      pop\n      tag_48\n      tag_96\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":1858:1942  function paused() public view virtual returns (bool) {... */\n    tag_15:\n      callvalue\n      dup1\n      iszero\n      tag_99\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_99:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":1928:1935  _paused */\n      and(0xff, sload(0xfb))\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":1858:1942  function paused() public view virtual returns (bool) {... */\n      jump(tag_41)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3743:3868  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_16:\n      callvalue\n      dup1\n      iszero\n      tag_103\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_103:\n      pop\n      tag_48\n      tag_105\n      calldatasize\n      0x04\n      tag_66\n      jump\t// in\n    tag_105:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3843:3861  _balances[account] */\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3817:3824  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3843:3861  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3843:3852  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3843:3861  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3743:3868  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2071:2172  function renounceOwnership() public virtual onlyOwner {... */\n    tag_17:\n      callvalue\n      dup1\n      iszero\n      tag_108\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_108:\n      pop\n      tag_64\n      tag_110\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1243:1404  function burnFrom(address account, uint256 amount) public virtual {... */\n    tag_18:\n      callvalue\n      dup1\n      iszero\n      tag_111\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_111:\n      pop\n      tag_64\n      tag_113\n      calldatasize\n      0x04\n      tag_43\n      jump\t// in\n    tag_113:\n      tag_114\n      jump\t// in\n        /* \"contracts/BRNKC.sol\":1308:1621  function initialize() initializer public {... */\n    tag_19:\n      callvalue\n      dup1\n      iszero\n      tag_115\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_115:\n      pop\n      tag_64\n      tag_117\n      jump\t// in\n        /* \"contracts/BRNKC.sol\":1704:1765  function pause() public onlyOwner {... */\n    tag_20:\n      callvalue\n      dup1\n      iszero\n      tag_118\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_118:\n      pop\n      tag_64\n      tag_120\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1441:1526  function owner() public view virtual returns (address) {... */\n    tag_21:\n      callvalue\n      dup1\n      iszero\n      tag_121\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_121:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1513:1519  _owner */\n      sload(0xc9)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1441:1526  function owner() public view virtual returns (address) {... */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1513:1519  _owner */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":3839:3890   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3827:3829   */\n      0x20\n        /* \"#utility.yul\":3812:3830   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1441:1526  function owner() public view virtual returns (address) {... */\n      tag_38\n        /* \"#utility.yul\":3693:3896   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2702:2804  function symbol() public view virtual override returns (string memory) {... */\n    tag_22:\n      callvalue\n      dup1\n      iszero\n      tag_126\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_126:\n      pop\n      tag_36\n      tag_128\n      jump\t// in\n        /* \"contracts/BRNKC.sol\":1629:1696  function snapshot() public onlyOwner {... */\n    tag_23:\n      callvalue\n      dup1\n      iszero\n      tag_130\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_130:\n      pop\n      tag_64\n      tag_132\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5673:5903  function totalSupplyAt(uint256 snapshotId) public view virtual returns (uint256) {... */\n    tag_24:\n      callvalue\n      dup1\n      iszero\n      tag_133\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_133:\n      pop\n      tag_48\n      tag_135\n      calldatasize\n      0x04\n      tag_83\n      jump\t// in\n    tag_135:\n      tag_136\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6929:7356  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_25:\n      callvalue\n      dup1\n      iszero\n      tag_138\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_138:\n      pop\n      tag_41\n      tag_140\n      calldatasize\n      0x04\n      tag_43\n      jump\t// in\n    tag_140:\n      tag_141\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4064:4253  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_26:\n      callvalue\n      dup1\n      iszero\n      tag_143\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_143:\n      pop\n      tag_41\n      tag_145\n      calldatasize\n      0x04\n      tag_43\n      jump\t// in\n    tag_145:\n      tag_146\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4311:4460  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_27:\n      callvalue\n      dup1\n      iszero\n      tag_148\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_148:\n      pop\n      tag_48\n      tag_150\n      calldatasize\n      0x04\n      tag_151\n      jump\t// in\n    tag_150:\n      tag_152\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2321:2519  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_28:\n      callvalue\n      dup1\n      iszero\n      tag_154\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_154:\n      pop\n      tag_64\n      tag_156\n      calldatasize\n      0x04\n      tag_66\n      jump\t// in\n    tag_156:\n      tag_157\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2491:2589  function name() public view virtual override returns (string memory) {... */\n    tag_37:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2545:2558  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2577:2582  _name */\n      0x36\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2570:2582  return _name */\n      dup1\n      sload\n      tag_159\n      swap1\n      tag_160\n      jump\t// in\n    tag_159:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_161\n      swap1\n      tag_160\n      jump\t// in\n    tag_161:\n      dup1\n      iszero\n      tag_162\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_163\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_162)\n    tag_163:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_164:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_164\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_162:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2491:2589  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4768:4965  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_44:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4851:4855  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4905:4937  _approve(owner, spender, amount) */\n      tag_168\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4921:4928  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4930:4936  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4905:4913  _approve */\n      tag_169\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4905:4937  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_168:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4954:4958  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4947:4958  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4768:4965  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_165:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5527:5813  function transferFrom(... */\n    tag_56:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5654:5658  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5710:5748  _spendAllowance(from, spender, amount) */\n      tag_173\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5726:5730  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5741:5747  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5710:5725  _spendAllowance */\n      tag_174\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5710:5748  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_173:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5758:5785  _transfer(from, to, amount) */\n      tag_175\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5768:5772  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5774:5776  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5778:5784  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5758:5767  _transfer */\n      tag_176\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5758:5785  _transfer(from, to, amount) */\n      jump\t// in\n    tag_175:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5802:5806  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5795:5806  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":5527:5813  function transferFrom(... */\n    tag_171:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3317:3514  function upgradeTo(address newImplementation) external virtual onlyProxy {... */\n    tag_67:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":1898:1904  __self */\n      immutable(\"0x4c643d5d9b0441803235e222732b65e2dc488f209ae20302cca6cafc813933a8\")\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":1881:1904  address(this) != __self */\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":1889:1893  this */\n      address\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":1881:1904  address(this) != __self */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":1873:1953  require(address(this) != __self, \"Function must be called through delegatecall\") */\n      tag_179\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_180\n      swap1\n      tag_181\n      jump\t// in\n    tag_180:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_179:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":1995:2001  __self */\n      immutable(\"0x4c643d5d9b0441803235e222732b65e2dc488f209ae20302cca6cafc813933a8\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":1971:2001  _getImplementation() == __self */\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":1971:1991  _getImplementation() */\n      tag_182\n      0x00\n      dup1\n      mload\n      0x20\n      data_75b20eef8615de99c108b05f0dbda081c91897128caa336d75dffb97c4132b4d\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":1642:1707  StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":1563:1714  function _getImplementation() internal view returns (address) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":1971:1991  _getImplementation() */\n    tag_182:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":1971:2001  _getImplementation() == __self */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":1963:2050  require(_getImplementation() == __self, \"Function must be called through active proxy\") */\n      tag_184\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_180\n      swap1\n      tag_186\n      jump\t// in\n    tag_184:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3400:3436  _authorizeUpgrade(newImplementation) */\n      tag_188\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3418:3435  newImplementation */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3400:3417  _authorizeUpgrade */\n      tag_189\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3400:3436  _authorizeUpgrade(newImplementation) */\n      jump\t// in\n    tag_188:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3487:3499  new bytes(0) */\n      0x40\n      dup1\n      mload\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3497:3498  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3487:3499  new bytes(0) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      swap1\n      swap3\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3446:3507  _upgradeToAndCallUUPS(newImplementation, new bytes(0), false) */\n      tag_190\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3468:3485  newImplementation */\n      dup4\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3487:3499  new bytes(0) */\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3446:3467  _upgradeToAndCallUUPS */\n      tag_195\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3446:3507  _upgradeToAndCallUUPS(newImplementation, new bytes(0), false) */\n      jump\t// in\n    tag_190:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3317:3514  function upgradeTo(address newImplementation) external virtual onlyProxy {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6208:6442  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_71:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6296:6300  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6350:6414  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_168\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6366:6373  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6403:6413  addedValue */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6375:6400  allowance(owner, spender) */\n      tag_199\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6366:6373  spender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6375:6384  allowance */\n      tag_152\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6375:6400  allowance(owner, spender) */\n      jump\t// in\n    tag_199:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6375:6413  allowance(owner, spender) + addedValue */\n      tag_200\n      swap2\n      swap1\n      tag_201\n      jump\t// in\n    tag_200:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6350:6358  _approve */\n      tag_169\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6350:6414  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"contracts/BRNKC.sol\":1773:1838  function unpause() public onlyOwner {... */\n    tag_75:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      tag_203\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1334:1345  _checkOwner */\n      tag_204\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      jump\t// in\n    tag_203:\n        /* \"contracts/BRNKC.sol\":1820:1830  _unpause() */\n      tag_206\n        /* \"contracts/BRNKC.sol\":1820:1828  _unpause */\n      tag_207\n        /* \"contracts/BRNKC.sol\":1820:1830  _unpause() */\n      jump\t// in\n    tag_206:\n        /* \"contracts/BRNKC.sol\":1773:1838  function unpause() public onlyOwner {... */\n      jump\t// out\n        /* \"contracts/BRNKC.sol\":1846:1941  function mint(address to, uint256 amount) public onlyOwner {... */\n    tag_79:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      tag_209\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1334:1345  _checkOwner */\n      tag_204\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      jump\t// in\n    tag_209:\n        /* \"contracts/BRNKC.sol\":1916:1933  _mint(to, amount) */\n      tag_211\n        /* \"contracts/BRNKC.sol\":1922:1924  to */\n      dup3\n        /* \"contracts/BRNKC.sol\":1926:1932  amount */\n      dup3\n        /* \"contracts/BRNKC.sol\":1916:1921  _mint */\n      tag_212\n        /* \"contracts/BRNKC.sol\":1916:1933  _mint(to, amount) */\n      jump\t// in\n    tag_211:\n        /* \"contracts/BRNKC.sol\":1846:1941  function mint(address to, uint256 amount) public onlyOwner {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":848:937  function burn(uint256 amount) public virtual {... */\n    tag_84:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":903:930  _burn(_msgSender(), amount) */\n      tag_190\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":923:929  amount */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":903:908  _burn */\n      tag_216\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":903:930  _burn(_msgSender(), amount) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5312:5574  function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {... */\n    tag_88:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5475:5508  _accountBalanceSnapshots[account] */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5399:5406  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5475:5508  _accountBalanceSnapshots[account] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5475:5499  _accountBalanceSnapshots */\n      0x97\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5475:5508  _accountBalanceSnapshots[account] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5399:5406  uint256 */\n      dup2\n      swap1\n      dup2\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5454:5509  _valueAt(snapshotId, _accountBalanceSnapshots[account]) */\n      tag_218\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5463:5473  snapshotId */\n      dup6\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5454:5462  _valueAt */\n      tag_219\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5454:5509  _valueAt(snapshotId, _accountBalanceSnapshots[account]) */\n      jump\t// in\n    tag_218:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5418:5509  (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5527:5538  snapshotted */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5527:5567  snapshotted ? value : balanceOf(account) */\n      tag_220\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3843:3861  _balances[account] */\n      dup6\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3817:3824  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3843:3861  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3843:3852  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3843:3861  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5527:5567  snapshotted ? value : balanceOf(account) */\n      jump(tag_222)\n    tag_220:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5541:5546  value */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5527:5567  snapshotted ? value : balanceOf(account) */\n    tag_222:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5520:5567  return snapshotted ? value : balanceOf(account) */\n      swap6\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5312:5574  function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {... */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3763:3985  function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {... */\n    tag_93:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":1898:1904  __self */\n      immutable(\"0x4c643d5d9b0441803235e222732b65e2dc488f209ae20302cca6cafc813933a8\")\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":1881:1904  address(this) != __self */\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":1889:1893  this */\n      address\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":1881:1904  address(this) != __self */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":1873:1953  require(address(this) != __self, \"Function must be called through delegatecall\") */\n      tag_224\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_180\n      swap1\n      tag_181\n      jump\t// in\n    tag_224:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":1995:2001  __self */\n      immutable(\"0x4c643d5d9b0441803235e222732b65e2dc488f209ae20302cca6cafc813933a8\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":1971:2001  _getImplementation() == __self */\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":1971:1991  _getImplementation() */\n      tag_226\n      0x00\n      dup1\n      mload\n      0x20\n      data_75b20eef8615de99c108b05f0dbda081c91897128caa336d75dffb97c4132b4d\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":1642:1707  StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":1563:1714  function _getImplementation() internal view returns (address) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":1971:1991  _getImplementation() */\n    tag_226:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":1971:2001  _getImplementation() == __self */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":1963:2050  require(_getImplementation() == __self, \"Function must be called through active proxy\") */\n      tag_227\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_180\n      swap1\n      tag_186\n      jump\t// in\n    tag_227:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3880:3916  _authorizeUpgrade(newImplementation) */\n      tag_230\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3898:3915  newImplementation */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3880:3897  _authorizeUpgrade */\n      tag_189\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3880:3916  _authorizeUpgrade(newImplementation) */\n      jump\t// in\n    tag_230:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3926:3978  _upgradeToAndCallUUPS(newImplementation, data, true) */\n      tag_211\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3948:3965  newImplementation */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3967:3971  data */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3973:3977  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3926:3947  _upgradeToAndCallUUPS */\n      tag_195\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3926:3978  _upgradeToAndCallUUPS(newImplementation, data, true) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3006:3137  function proxiableUUID() external view virtual override notDelegated returns (bytes32) {... */\n    tag_96:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3084:3091  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":2324:2328  this */\n      address\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":2333:2339  __self */\n      immutable(\"0x4c643d5d9b0441803235e222732b65e2dc488f209ae20302cca6cafc813933a8\")\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":2316:2339  address(this) == __self */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":2308:2400  require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\") */\n      tag_233\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5841:5843   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":2308:2400  require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5823:5844   */\n      mstore\n        /* \"#utility.yul\":5880:5882   */\n      0x38\n        /* \"#utility.yul\":5860:5878   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5853:5883   */\n      mstore\n        /* \"#utility.yul\":5919:5953   */\n      0x555550535570677261646561626c653a206d757374206e6f742062652063616c\n        /* \"#utility.yul\":5899:5917   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5892:5954   */\n      mstore\n        /* \"#utility.yul\":5990:6016   */\n      0x6c6564207468726f7567682064656c656761746563616c6c0000000000000000\n        /* \"#utility.yul\":5970:5988   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5963:6017   */\n      mstore\n        /* \"#utility.yul\":6034:6053   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":2308:2400  require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\") */\n      tag_180\n        /* \"#utility.yul\":5639:6059   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":2308:2400  require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\") */\n    tag_233:\n      pop\n      0x00\n      dup1\n      mload\n      0x20\n      data_75b20eef8615de99c108b05f0dbda081c91897128caa336d75dffb97c4132b4d\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":3006:3137  function proxiableUUID() external view virtual override notDelegated returns (bytes32) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2071:2172  function renounceOwnership() public virtual onlyOwner {... */\n    tag_110:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      tag_240\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1334:1345  _checkOwner */\n      tag_204\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      jump\t// in\n    tag_240:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2135:2165  _transferOwnership(address(0)) */\n      tag_206\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2162:2163  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2135:2153  _transferOwnership */\n      tag_243\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2135:2165  _transferOwnership(address(0)) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1243:1404  function burnFrom(address account, uint256 amount) public virtual {... */\n    tag_114:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1319:1365  _spendAllowance(account, _msgSender(), amount) */\n      tag_245\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1335:1342  account */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1358:1364  amount */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1319:1334  _spendAllowance */\n      tag_174\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1319:1365  _spendAllowance(account, _msgSender(), amount) */\n      jump\t// in\n    tag_245:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1375:1397  _burn(account, amount) */\n      tag_211\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1381:1388  account */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1390:1396  amount */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1375:1380  _burn */\n      tag_216\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":1375:1397  _burn(account, amount) */\n      jump\t// in\n        /* \"contracts/BRNKC.sol\":1308:1621  function initialize() initializer public {... */\n    tag_117:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3268:3287  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3291:3304  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3290:3304  !_initializing */\n      iszero\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3336:3370  isTopLevelCall && _initialized < 1 */\n      dup1\n      iszero\n      tag_249\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3354:3366  _initialized */\n      sload(0x00)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3369:3370  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3354:3366  _initialized */\n      0xff\n      swap1\n      swap2\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3354:3370  _initialized < 1 */\n      lt\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3336:3370  isTopLevelCall && _initialized < 1 */\n    tag_249:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3335:3443  (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1) */\n      dup1\n      tag_253\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3415:3419  this */\n      address\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":1476:1495  account.code.length */\n      extcodesize\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":1476:1499  account.code.length > 0 */\n      iszero\n      dup1\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3376:3442  !AddressUpgradeable.isContract(address(this)) && _initialized == 1 */\n      tag_253\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3425:3437  _initialized */\n      and(0xff, sload(0x00))\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3425:3442  _initialized == 1 */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3376:3442  !AddressUpgradeable.isContract(address(this)) && _initialized == 1 */\n    tag_253:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3314:3515  require(... */\n      tag_254\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6266:6268   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3314:3515  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6248:6269   */\n      mstore\n        /* \"#utility.yul\":6305:6307   */\n      0x2e\n        /* \"#utility.yul\":6285:6303   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6278:6308   */\n      mstore\n        /* \"#utility.yul\":6344:6378   */\n      0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561\n        /* \"#utility.yul\":6324:6342   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6317:6379   */\n      mstore\n      shl(0x92, 0x191e481a5b9a5d1a585b1a5e9959)\n        /* \"#utility.yul\":6395:6413   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":6388:6432   */\n      mstore\n        /* \"#utility.yul\":6449:6468   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3314:3515  require(... */\n      tag_180\n        /* \"#utility.yul\":6064:6474   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3314:3515  require(... */\n    tag_254:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3525:3537  _initialized */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3525:3541  _initialized = 1 */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3540:3541  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3525:3541  _initialized = 1 */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3551:3616  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_257\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3585:3598  _initializing */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3585:3605  _initializing = true */\n      dup1\n      sload\n      not(0xff00)\n      and\n      0x0100\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3551:3616  if (isTopLevelCall) {... */\n    tag_257:\n        /* \"contracts/BRNKC.sol\":1360:1397  __ERC20_init(\"Bear Network\", \"BRNKC\") */\n      tag_259\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x0c\n      dup2\n      mstore\n      0x20\n      add\n      shl(0xa0, 0x42656172204e6574776f726b)\n      dup2\n      mstore\n      pop\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x05\n      dup2\n      mstore\n      0x20\n      add\n      shl(0xd8, 0x42524e4b43)\n      dup2\n      mstore\n      pop\n        /* \"contracts/BRNKC.sol\":1360:1372  __ERC20_init */\n      tag_260\n        /* \"contracts/BRNKC.sol\":1360:1397  __ERC20_init(\"Bear Network\", \"BRNKC\") */\n      jump\t// in\n    tag_259:\n        /* \"contracts/BRNKC.sol\":1408:1430  __ERC20Burnable_init() */\n      tag_261\n        /* \"contracts/BRNKC.sol\":1408:1428  __ERC20Burnable_init */\n      tag_262\n        /* \"contracts/BRNKC.sol\":1408:1430  __ERC20Burnable_init() */\n      jump\t// in\n    tag_261:\n        /* \"contracts/BRNKC.sol\":1441:1463  __ERC20Snapshot_init() */\n      tag_263\n        /* \"contracts/BRNKC.sol\":1441:1461  __ERC20Snapshot_init */\n      tag_262\n        /* \"contracts/BRNKC.sol\":1441:1463  __ERC20Snapshot_init() */\n      jump\t// in\n    tag_263:\n        /* \"contracts/BRNKC.sol\":1474:1490  __Ownable_init() */\n      tag_265\n        /* \"contracts/BRNKC.sol\":1474:1488  __Ownable_init */\n      tag_266\n        /* \"contracts/BRNKC.sol\":1474:1490  __Ownable_init() */\n      jump\t// in\n    tag_265:\n        /* \"contracts/BRNKC.sol\":1501:1518  __Pausable_init() */\n      tag_267\n        /* \"contracts/BRNKC.sol\":1501:1516  __Pausable_init */\n      tag_268\n        /* \"contracts/BRNKC.sol\":1501:1518  __Pausable_init() */\n      jump\t// in\n    tag_267:\n        /* \"contracts/BRNKC.sol\":1529:1553  __UUPSUpgradeable_init() */\n      tag_269\n        /* \"contracts/BRNKC.sol\":1529:1551  __UUPSUpgradeable_init */\n      tag_262\n        /* \"contracts/BRNKC.sol\":1529:1553  __UUPSUpgradeable_init() */\n      jump\t// in\n    tag_269:\n        /* \"contracts/BRNKC.sol\":1566:1613  _mint(msg.sender, 100000000 * 10 ** decimals()) */\n      tag_271\n        /* \"contracts/BRNKC.sol\":1572:1582  msg.sender */\n      caller\n        /* \"contracts/BRNKC.sol\":1596:1612  10 ** decimals() */\n      tag_273\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3510:3512  18 */\n      0x12\n        /* \"contracts/BRNKC.sol\":1596:1598  10 */\n      0x0a\n        /* \"contracts/BRNKC.sol\":1596:1612  10 ** decimals() */\n      tag_274\n      jump\t// in\n    tag_273:\n        /* \"contracts/BRNKC.sol\":1584:1612  100000000 * 10 ** decimals() */\n      tag_275\n      swap1\n        /* \"contracts/BRNKC.sol\":1584:1593  100000000 */\n      0x05f5e100\n        /* \"contracts/BRNKC.sol\":1584:1612  100000000 * 10 ** decimals() */\n      tag_276\n      jump\t// in\n    tag_275:\n        /* \"contracts/BRNKC.sol\":1566:1571  _mint */\n      tag_212\n        /* \"contracts/BRNKC.sol\":1566:1613  _mint(msg.sender, 100000000 * 10 ** decimals()) */\n      jump\t// in\n    tag_271:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3640:3654  isTopLevelCall */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3636:3735  if (isTopLevelCall) {... */\n      iszero\n      tag_190\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3686:3691  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3670:3691  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3710:3724  Initialized(1) */\n      mload(0x40)\n      0x01\n        /* \"#utility.yul\":1956:1992   */\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3710:3724  Initialized(1) */\n      0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498\n      swap1\n        /* \"#utility.yul\":1944:1946   */\n      0x20\n        /* \"#utility.yul\":1929:1947   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3710:3724  Initialized(1) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":3258:3741  {... */\n      pop\n        /* \"contracts/BRNKC.sol\":1308:1621  function initialize() initializer public {... */\n      jump\t// out\n        /* \"contracts/BRNKC.sol\":1704:1765  function pause() public onlyOwner {... */\n    tag_120:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      tag_281\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1334:1345  _checkOwner */\n      tag_204\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      jump\t// in\n    tag_281:\n        /* \"contracts/BRNKC.sol\":1749:1757  _pause() */\n      tag_206\n        /* \"contracts/BRNKC.sol\":1749:1755  _pause */\n      tag_284\n        /* \"contracts/BRNKC.sol\":1749:1757  _pause() */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2702:2804  function symbol() public view virtual override returns (string memory) {... */\n    tag_128:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2758:2771  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2790:2797  _symbol */\n      0x37\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2783:2797  return _symbol */\n      dup1\n      sload\n      tag_159\n      swap1\n      tag_160\n      jump\t// in\n        /* \"contracts/BRNKC.sol\":1629:1696  function snapshot() public onlyOwner {... */\n    tag_132:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      tag_293\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1334:1345  _checkOwner */\n      tag_204\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      jump\t// in\n    tag_293:\n        /* \"contracts/BRNKC.sol\":1677:1688  _snapshot() */\n      tag_190\n        /* \"contracts/BRNKC.sol\":1677:1686  _snapshot */\n      tag_296\n        /* \"contracts/BRNKC.sol\":1677:1688  _snapshot() */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5673:5903  function totalSupplyAt(uint256 snapshotId) public view virtual returns (uint256) {... */\n    tag_136:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5745:5752  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5765:5781  bool snapshotted */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5783:5796  uint256 value */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5800:5843  _valueAt(snapshotId, _totalSupplySnapshots) */\n      tag_298\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5809:5819  snapshotId */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5821:5842  _totalSupplySnapshots */\n      0x98\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5800:5808  _valueAt */\n      tag_219\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5800:5843  _valueAt(snapshotId, _totalSupplySnapshots) */\n      jump\t// in\n    tag_298:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5764:5843  (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5861:5872  snapshotted */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5861:5896  snapshotted ? value : totalSupply() */\n      tag_299\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3666:3678  _totalSupply */\n      sload(0x35)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5861:5896  snapshotted ? value : totalSupply() */\n      jump(tag_301)\n    tag_299:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5875:5880  value */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5861:5896  snapshotted ? value : totalSupply() */\n    tag_301:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5854:5896  return snapshotted ? value : totalSupply() */\n      swap5\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5673:5903  function totalSupplyAt(uint256 snapshotId) public view virtual returns (uint256) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6929:7356  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_141:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7022:7026  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7022:7026  bool */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7103:7128  allowance(owner, spender) */\n      tag_304\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7120:7127  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7103:7112  allowance */\n      tag_152\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7103:7128  allowance(owner, spender) */\n      jump\t// in\n    tag_304:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7076:7128  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7166:7181  subtractedValue */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7146:7162  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7146:7181  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7138:7223  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_305\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8436:8438   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7138:7223  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8418:8439   */\n      mstore\n        /* \"#utility.yul\":8475:8477   */\n      0x25\n        /* \"#utility.yul\":8455:8473   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8448:8478   */\n      mstore\n        /* \"#utility.yul\":8514:8548   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":8494:8512   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8487:8549   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":8565:8583   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8558:8593   */\n      mstore\n        /* \"#utility.yul\":8610:8629   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7138:7223  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_180\n        /* \"#utility.yul\":8234:8635   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7138:7223  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_305:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7257:7317  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_308\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7266:7271  owner */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7273:7280  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7301:7316  subtractedValue */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7282:7298  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7282:7316  currentAllowance - subtractedValue */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7257:7265  _approve */\n      tag_169\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7257:7317  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n    tag_308:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7345:7349  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":6929:7356  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4064:4253  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_146:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4143:4147  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4197:4225  _transfer(owner, to, amount) */\n      tag_168\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4214:4216  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4218:4224  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4197:4206  _transfer */\n      tag_176\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4197:4225  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4311:4460  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_152:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4426:4444  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4400:4407  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4426:4444  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4426:4437  _allowances */\n      0x34\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4426:4444  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4426:4453  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":4311:4460  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2321:2519  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_157:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      tag_314\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1334:1345  _checkOwner */\n      tag_204\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      jump\t// in\n    tag_314:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2409:2431  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2401:2474  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_316\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8842:8844   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2401:2474  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8824:8845   */\n      mstore\n        /* \"#utility.yul\":8881:8883   */\n      0x26\n        /* \"#utility.yul\":8861:8879   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8854:8884   */\n      mstore\n        /* \"#utility.yul\":8920:8954   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":8900:8918   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8893:8955   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":8971:8989   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8964:9000   */\n      mstore\n        /* \"#utility.yul\":9017:9036   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2401:2474  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_180\n        /* \"#utility.yul\":8640:9042   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2401:2474  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_316:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2484:2512  _transferOwnership(newOwner) */\n      tag_190\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2503:2511  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2484:2502  _transferOwnership */\n      tag_243\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2484:2512  _transferOwnership(newOwner) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10841:11211  function _approve(... */\n    tag_169:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10972:10991  owner != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10964:11032  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_322\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9249:9251   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10964:11032  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9231:9252   */\n      mstore\n        /* \"#utility.yul\":9288:9290   */\n      0x24\n        /* \"#utility.yul\":9268:9286   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":9261:9291   */\n      mstore\n        /* \"#utility.yul\":9327:9361   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":9307:9325   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9300:9362   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":9378:9396   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":9371:9405   */\n      mstore\n        /* \"#utility.yul\":9422:9441   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10964:11032  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_180\n        /* \"#utility.yul\":9047:9447   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10964:11032  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_322:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11050:11071  spender != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11042:11110  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_325\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9654:9656   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11042:11110  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9636:9657   */\n      mstore\n        /* \"#utility.yul\":9693:9695   */\n      0x22\n        /* \"#utility.yul\":9673:9691   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9666:9696   */\n      mstore\n        /* \"#utility.yul\":9732:9766   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":9712:9730   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9705:9767   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":9783:9801   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":9776:9808   */\n      mstore\n        /* \"#utility.yul\":9825:9844   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11042:11110  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_180\n        /* \"#utility.yul\":9452:9850   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11042:11110  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_325:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11121:11139  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11121:11132  _allowances */\n      0x34\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11121:11139  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11121:11148  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11121:11157  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11172:11204  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":1445:1470   */\n      dup5\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11172:11204  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":1418:1436   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11172:11204  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10841:11211  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11492:11933  function _spendAllowance(... */\n    tag_174:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11622:11646  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11649:11674  allowance(owner, spender) */\n      tag_330\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11659:11664  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11666:11673  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11649:11658  allowance */\n      tag_152\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11649:11674  allowance(owner, spender) */\n      jump\t// in\n    tag_330:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11622:11674  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11688:11704  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11688:11725  currentAllowance != type(uint256).max */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11684:11927  if (currentAllowance != type(uint256).max) {... */\n      tag_335\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11769:11775  amount */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11749:11765  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11749:11775  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11741:11809  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_332\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10057:10059   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11741:11809  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10039:10060   */\n      mstore\n        /* \"#utility.yul\":10096:10098   */\n      0x1d\n        /* \"#utility.yul\":10076:10094   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10069:10099   */\n      mstore\n        /* \"#utility.yul\":10135:10166   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":10115:10133   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10108:10167   */\n      mstore\n        /* \"#utility.yul\":10184:10202   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11741:11809  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_180\n        /* \"#utility.yul\":9855:10208   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11741:11809  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_332:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11851:11902  _approve(owner, spender, currentAllowance - amount) */\n      tag_335\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11860:11865  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11867:11874  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11895:11901  amount */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11876:11892  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11876:11901  currentAllowance - amount */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11851:11859  _approve */\n      tag_169\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11851:11902  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_335:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11612:11933  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":11492:11933  function _spendAllowance(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7810:8628  function _transfer(... */\n    tag_176:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7936:7954  from != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7928:7996  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_337\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10415:10417   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7928:7996  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10397:10418   */\n      mstore\n        /* \"#utility.yul\":10454:10456   */\n      0x25\n        /* \"#utility.yul\":10434:10452   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10427:10457   */\n      mstore\n        /* \"#utility.yul\":10493:10527   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":10473:10491   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10466:10528   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":10544:10562   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":10537:10572   */\n      mstore\n        /* \"#utility.yul\":10589:10608   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7928:7996  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_180\n        /* \"#utility.yul\":10213:10614   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":7928:7996  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_337:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8014:8030  to != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8006:8070  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_340\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10821:10823   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8006:8070  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10803:10824   */\n      mstore\n        /* \"#utility.yul\":10860:10862   */\n      0x23\n        /* \"#utility.yul\":10840:10858   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10833:10863   */\n      mstore\n        /* \"#utility.yul\":10899:10933   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":10879:10897   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10872:10934   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":10950:10968   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":10943:10976   */\n      mstore\n        /* \"#utility.yul\":10993:11012   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8006:8070  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_180\n        /* \"#utility.yul\":10619:11018   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8006:8070  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_340:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8081:8119  _beforeTokenTransfer(from, to, amount) */\n      tag_343\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8102:8106  from */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8108:8110  to */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8112:8118  amount */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8081:8101  _beforeTokenTransfer */\n      tag_344\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8081:8119  _beforeTokenTransfer(from, to, amount) */\n      jump\t// in\n    tag_343:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8152:8167  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8130:8149  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8152:8167  _balances[from] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8152:8161  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8152:8167  _balances[from] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8185:8206  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8177:8249  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_345\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11225:11227   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8177:8249  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11207:11228   */\n      mstore\n        /* \"#utility.yul\":11264:11266   */\n      0x26\n        /* \"#utility.yul\":11244:11262   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11237:11267   */\n      mstore\n        /* \"#utility.yul\":11303:11337   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":11283:11301   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11276:11338   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":11354:11372   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":11347:11383   */\n      mstore\n        /* \"#utility.yul\":11400:11419   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8177:8249  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_180\n        /* \"#utility.yul\":11023:11425   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8177:8249  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_345:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8283:8298  _balances[from] */\n      dup1\n      dup6\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8283:8292  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8283:8298  _balances[from] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8301:8321  fromBalance - amount */\n      dup7\n      dup7\n      sub\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8283:8321  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8498:8511  _balances[to] */\n      swap3\n      dup7\n      and\n      dup1\n      dup3\n      mstore\n      swap1\n      dup4\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8498:8521  _balances[to] += amount */\n      dup1\n      sload\n      dup7\n      add\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8547:8573  Transfer(from, to, amount) */\n      swap2\n      mload\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n      tag_348\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8315:8321  amount */\n      dup7\n        /* \"#utility.yul\":1445:1470   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1433:1435   */\n      0x20\n        /* \"#utility.yul\":1418:1436   */\n      add\n      swap1\n        /* \"#utility.yul\":1299:1476   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8547:8573  Transfer(from, to, amount) */\n    tag_348:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8584:8621  _afterTokenTransfer(from, to, amount) */\n      tag_335\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2938:3912  function _upgradeToAndCallUUPS(... */\n      jump\n        /* \"contracts/BRNKC.sol\":2200:2316  function _authorizeUpgrade(address newImplementation)... */\n    tag_189:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      tag_190\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1334:1345  _checkOwner */\n      tag_204\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1334:1347  _checkOwner() */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2938:3912  function _upgradeToAndCallUUPS(... */\n    tag_195:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":951:1017  0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143 */\n      0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3384:3443  StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value */\n      sload\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3380:3906  if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {... */\n      iszero\n      tag_360\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3459:3496  _setImplementation(newImplementation) */\n      tag_361\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3478:3495  newImplementation */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3459:3477  _setImplementation */\n      tag_362\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3459:3496  _setImplementation(newImplementation) */\n      jump\t// in\n    tag_361:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2938:3912  function _upgradeToAndCallUUPS(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3380:3906  if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {... */\n    tag_360:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3560:3577  newImplementation */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3531:3592  IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID */\n      and\n      0x52d1902d\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3531:3594  IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      swap3\n      pop\n      pop\n      pop\n      dup1\n      iszero\n      tag_364\n      jumpi\n      pop\n      0x40\n      dup1\n      mload\n      0x1f\n      returndatasize\n      swap1\n      dup2\n      add\n      not(0x1f)\n      and\n      dup3\n      add\n      swap1\n      swap3\n      mstore\n      tag_365\n      swap2\n      dup2\n      add\n      swap1\n      tag_366\n      jump\t// in\n    tag_365:\n      0x01\n    tag_364:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3527:3829  try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {... */\n      tag_367\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3758:3814  revert(\"ERC1967Upgrade: new implementation is not UUPS\") */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11821:11823   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3758:3814  revert(\"ERC1967Upgrade: new implementation is not UUPS\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11803:11824   */\n      mstore\n        /* \"#utility.yul\":11860:11862   */\n      0x2e\n        /* \"#utility.yul\":11840:11858   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11833:11863   */\n      mstore\n        /* \"#utility.yul\":11899:11933   */\n      0x45524331393637557067726164653a206e657720696d706c656d656e74617469\n        /* \"#utility.yul\":11879:11897   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11872:11934   */\n      mstore\n      shl(0x90, 0x6f6e206973206e6f742055555053)\n        /* \"#utility.yul\":11950:11968   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":11943:11987   */\n      mstore\n        /* \"#utility.yul\":12004:12023   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3758:3814  revert(\"ERC1967Upgrade: new implementation is not UUPS\") */\n      tag_180\n        /* \"#utility.yul\":11619:12029   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3527:3829  try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {... */\n    tag_367:\n      0x00\n      dup1\n      mload\n      0x20\n      data_75b20eef8615de99c108b05f0dbda081c91897128caa336d75dffb97c4132b4d\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3644:3672  slot == _IMPLEMENTATION_SLOT */\n      dup2\n      eq\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3636:3718  require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\") */\n      tag_374\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":12236:12238   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3636:3718  require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":12218:12239   */\n      mstore\n        /* \"#utility.yul\":12275:12277   */\n      0x29\n        /* \"#utility.yul\":12255:12273   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":12248:12278   */\n      mstore\n        /* \"#utility.yul\":12314:12348   */\n      0x45524331393637557067726164653a20756e737570706f727465642070726f78\n        /* \"#utility.yul\":12294:12312   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":12287:12349   */\n      mstore\n      shl(0xba, 0x1a58589b1955555251)\n        /* \"#utility.yul\":12365:12383   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":12358:12397   */\n      mstore\n        /* \"#utility.yul\":12414:12433   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3636:3718  require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\") */\n      tag_180\n        /* \"#utility.yul\":12034:12439   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3636:3718  require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\") */\n    tag_374:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3595:3733  returns (bytes32 slot) {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3842:3895  _upgradeToAndCall(newImplementation, data, forceCall) */\n      tag_361\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3860:3877  newImplementation */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3879:3883  data */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3885:3894  forceCall */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3842:3859  _upgradeToAndCall */\n      tag_378\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":3842:3895  _upgradeToAndCall(newImplementation, data, forceCall) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1599:1729  function _checkOwner() internal view virtual {... */\n    tag_204:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1513:1519  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0xc9))\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1662:1685  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1654:1722  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_206\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":12646:12648   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1654:1722  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":12628:12649   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":12665:12683   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":12658:12688   */\n      mstore\n        /* \"#utility.yul\":12724:12758   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":12704:12722   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":12697:12759   */\n      mstore\n        /* \"#utility.yul\":12776:12794   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1654:1722  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_180\n        /* \"#utility.yul\":12444:12800   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":2676:2793  function _unpause() internal virtual whenPaused {... */\n    tag_207:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":1729:1745  _requirePaused() */\n      tag_386\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":1729:1743  _requirePaused */\n      tag_387\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":1729:1745  _requirePaused() */\n      jump\t// in\n    tag_386:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":2734:2741  _paused */\n      0xfb\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":2734:2749  _paused = false */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":2764:2786  Unpaused(_msgSender()) */\n      0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":2773:2785  _msgSender() */\n    tag_389:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":2764:2786  Unpaused(_msgSender()) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3857:3889   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":3839:3890   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3827:3829   */\n      0x20\n        /* \"#utility.yul\":3812:3830   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":2764:2786  Unpaused(_msgSender()) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":2676:2793  function _unpause() internal virtual whenPaused {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8904:9439  function _mint(address account, uint256 amount) internal virtual {... */\n    tag_212:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8987:9008  account != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8979:9044  require(account != address(0), \"ERC20: mint to the zero address\") */\n      tag_392\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":13007:13009   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8979:9044  require(account != address(0), \"ERC20: mint to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":12989:13010   */\n      mstore\n        /* \"#utility.yul\":13046:13048   */\n      0x1f\n        /* \"#utility.yul\":13026:13044   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":13019:13049   */\n      mstore\n        /* \"#utility.yul\":13085:13118   */\n      0x45524332303a206d696e7420746f20746865207a65726f206164647265737300\n        /* \"#utility.yul\":13065:13083   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":13058:13119   */\n      mstore\n        /* \"#utility.yul\":13136:13154   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8979:9044  require(account != address(0), \"ERC20: mint to the zero address\") */\n      tag_180\n        /* \"#utility.yul\":12805:13160   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":8979:9044  require(account != address(0), \"ERC20: mint to the zero address\") */\n    tag_392:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9055:9104  _beforeTokenTransfer(address(0), account, amount) */\n      tag_395\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9084:9085  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9088:9095  account */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9097:9103  amount */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9055:9075  _beforeTokenTransfer */\n      tag_344\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9055:9104  _beforeTokenTransfer(address(0), account, amount) */\n      jump\t// in\n    tag_395:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9131:9137  amount */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9115:9127  _totalSupply */\n      0x35\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9115:9137  _totalSupply += amount */\n      dup3\n      dup3\n      sload\n      tag_396\n      swap2\n      swap1\n      tag_201\n      jump\t// in\n    tag_396:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9283:9301  _balances[account] */\n      dup3\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9283:9292  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9283:9301  _balances[account] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9283:9311  _balances[account] += amount */\n      dup1\n      sload\n      dup7\n      add\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9336:9373  Transfer(address(0), account, amount) */\n      mload\n        /* \"#utility.yul\":1445:1470   */\n      dup5\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9336:9373  Transfer(address(0), account, amount) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap2\n        /* \"#utility.yul\":1418:1436   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9336:9373  Transfer(address(0), account, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"contracts/BRNKC.sol\":1846:1941  function mint(address to, uint256 amount) public onlyOwner {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9759:10418  function _burn(address account, uint256 amount) internal virtual {... */\n    tag_216:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9842:9863  account != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9834:9901  require(account != address(0), \"ERC20: burn from the zero address\") */\n      tag_400\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":13367:13369   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9834:9901  require(account != address(0), \"ERC20: burn from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":13349:13370   */\n      mstore\n        /* \"#utility.yul\":13406:13408   */\n      0x21\n        /* \"#utility.yul\":13386:13404   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":13379:13409   */\n      mstore\n        /* \"#utility.yul\":13445:13479   */\n      0x45524332303a206275726e2066726f6d20746865207a65726f20616464726573\n        /* \"#utility.yul\":13425:13443   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":13418:13480   */\n      mstore\n      shl(0xf8, 0x73)\n        /* \"#utility.yul\":13496:13514   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":13489:13520   */\n      mstore\n        /* \"#utility.yul\":13537:13556   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9834:9901  require(account != address(0), \"ERC20: burn from the zero address\") */\n      tag_180\n        /* \"#utility.yul\":13165:13562   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9834:9901  require(account != address(0), \"ERC20: burn from the zero address\") */\n    tag_400:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9912:9961  _beforeTokenTransfer(account, address(0), amount) */\n      tag_403\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9933:9940  account */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9950:9951  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9954:9960  amount */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9912:9932  _beforeTokenTransfer */\n      tag_344\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9912:9961  _beforeTokenTransfer(account, address(0), amount) */\n      jump\t// in\n    tag_403:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9997:10015  _balances[account] */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9972:9994  uint256 accountBalance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9997:10015  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9997:10006  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":9997:10015  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10033:10057  accountBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10025:10096  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n      tag_404\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":13769:13771   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10025:10096  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":13751:13772   */\n      mstore\n        /* \"#utility.yul\":13808:13810   */\n      0x22\n        /* \"#utility.yul\":13788:13806   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":13781:13811   */\n      mstore\n        /* \"#utility.yul\":13847:13881   */\n      0x45524332303a206275726e20616d6f756e7420657863656564732062616c616e\n        /* \"#utility.yul\":13827:13845   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":13820:13882   */\n      mstore\n      shl(0xf0, 0x6365)\n        /* \"#utility.yul\":13898:13916   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":13891:13923   */\n      mstore\n        /* \"#utility.yul\":13940:13959   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10025:10096  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n      tag_180\n        /* \"#utility.yul\":13567:13965   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10025:10096  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n    tag_404:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10130:10148  _balances[account] */\n      dup4\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10130:10139  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10130:10148  _balances[account] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10151:10174  accountBalance - amount */\n      dup7\n      dup7\n      sub\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10130:10174  _balances[account] = accountBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10267:10279  _totalSupply */\n      0x35\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10267:10289  _totalSupply -= amount */\n      dup1\n      sload\n      dup8\n      swap1\n      sub\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10315:10352  Transfer(account, address(0), amount) */\n      mload\n        /* \"#utility.yul\":1445:1470   */\n      dup6\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10130:10148  _balances[account] */\n      swap2\n      swap3\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10315:10352  Transfer(account, address(0), amount) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap2\n        /* \"#utility.yul\":1418:1436   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":10315:10352  Transfer(account, address(0), amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2938:3912  function _upgradeToAndCallUUPS(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6724:8318  function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) {... */\n    tag_219:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6813:6817  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6819:6826  uint256 */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6859:6860  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6846:6856  snapshotId */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6846:6860  snapshotId > 0 */\n      gt\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6838:6887  require(snapshotId > 0, \"ERC20Snapshot: id is 0\") */\n      tag_410\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":14172:14174   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6838:6887  require(snapshotId > 0, \"ERC20Snapshot: id is 0\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":14154:14175   */\n      mstore\n        /* \"#utility.yul\":14211:14213   */\n      0x16\n        /* \"#utility.yul\":14191:14209   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":14184:14214   */\n      mstore\n      shl(0x54, 0x04552433230536e617073686f743a206964206973203)\n        /* \"#utility.yul\":14230:14248   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":14223:14275   */\n      mstore\n        /* \"#utility.yul\":14292:14310   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6838:6887  require(snapshotId > 0, \"ERC20Snapshot: id is 0\") */\n      tag_180\n        /* \"#utility.yul\":13970:14316   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6838:6887  require(snapshotId > 0, \"ERC20Snapshot: id is 0\") */\n    tag_410:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6919:6942  _getCurrentSnapshotId() */\n      tag_413\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6919:6940  _getCurrentSnapshotId */\n      tag_414\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6919:6942  _getCurrentSnapshotId() */\n      jump\t// in\n    tag_413:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6905:6915  snapshotId */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6905:6942  snapshotId <= _getCurrentSnapshotId() */\n      gt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6897:6976  require(snapshotId <= _getCurrentSnapshotId(), \"ERC20Snapshot: nonexistent id\") */\n      tag_415\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":14523:14525   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6897:6976  require(snapshotId <= _getCurrentSnapshotId(), \"ERC20Snapshot: nonexistent id\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":14505:14526   */\n      mstore\n        /* \"#utility.yul\":14562:14564   */\n      0x1d\n        /* \"#utility.yul\":14542:14560   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":14535:14565   */\n      mstore\n        /* \"#utility.yul\":14601:14632   */\n      0x4552433230536e617073686f743a206e6f6e6578697374656e74206964000000\n        /* \"#utility.yul\":14581:14599   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":14574:14633   */\n      mstore\n        /* \"#utility.yul\":14650:14668   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6897:6976  require(snapshotId <= _getCurrentSnapshotId(), \"ERC20Snapshot: nonexistent id\") */\n      tag_180\n        /* \"#utility.yul\":14321:14674   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6897:6976  require(snapshotId <= _getCurrentSnapshotId(), \"ERC20Snapshot: nonexistent id\") */\n    tag_415:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8099:8112  uint256 index */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8115:8155  snapshots.ids.findUpperBound(snapshotId) */\n      tag_418\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8115:8124  snapshots */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8144:8154  snapshotId */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8115:8143  snapshots.ids.findUpperBound */\n      tag_419\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8115:8155  snapshots.ids.findUpperBound(snapshotId) */\n      jump\t// in\n    tag_418:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8179:8199  snapshots.ids.length */\n      dup5\n      sload\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8099:8155  uint256 index = snapshots.ids.findUpperBound(snapshotId) */\n      swap1\n      swap2\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8170:8199  index == snapshots.ids.length */\n      dup2\n      sub\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8166:8312  if (index == snapshots.ids.length) {... */\n      tag_420\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8223:8228  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8230:8231  0 */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8215:8232  return (false, 0) */\n      swap3\n      pop\n      swap3\n      pop\n      pop\n      jump(tag_409)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8166:8312  if (index == snapshots.ids.length) {... */\n    tag_420:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8271:8275  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8277:8286  snapshots */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8277:8293  snapshots.values */\n      0x01\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8294:8299  index */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8277:8300  snapshots.values[index] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_423\n      jumpi\n      tag_423\n      tag_424\n      jump\t// in\n    tag_423:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      sload\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8263:8301  return (true, snapshots.values[index]) */\n      swap3\n      pop\n      swap3\n      pop\n      pop\n      jump(tag_409)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8166:8312  if (index == snapshots.ids.length) {... */\n    tag_421:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6828:8318  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6724:8318  function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) {... */\n    tag_409:\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2673:2860  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_243:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2765:2771  _owner */\n      0xc9\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2781:2798  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2813:2853  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2765:2771  _owner */\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2781:2798  _owner = newOwner */\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2765:2771  _owner */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2813:2853  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2746:2762  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2813:2853  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2736:2860  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":2673:2860  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2114:2261  function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {... */\n    tag_260:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":5363:5376  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":5355:5424  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_429\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_180\n      swap1\n      tag_431\n      jump\t// in\n    tag_429:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2216:2254  __ERC20_init_unchained(name_, symbol_) */\n      tag_211\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2239:2244  name_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2246:2253  symbol_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2216:2238  __ERC20_init_unchained */\n      tag_434\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2216:2254  __ERC20_init_unchained(name_, symbol_) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":594:659  function __ERC20Burnable_init() internal onlyInitializing {... */\n    tag_262:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":5363:5376  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":5355:5424  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_206\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_180\n      swap1\n      tag_431\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1003:1098  function __Ownable_init() internal onlyInitializing {... */\n    tag_266:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":5363:5376  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":5355:5424  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_444\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_180\n      swap1\n      tag_431\n      jump\t// in\n    tag_444:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1065:1091  __Ownable_init_unchained() */\n      tag_206\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1065:1089  __Ownable_init_unchained */\n      tag_448\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1065:1091  __Ownable_init_unchained() */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":1063:1160  function __Pausable_init() internal onlyInitializing {... */\n    tag_268:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":5363:5376  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":5355:5424  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_450\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_180\n      swap1\n      tag_431\n      jump\t// in\n    tag_450:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":1126:1153  __Pausable_init_unchained() */\n      tag_206\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":1126:1151  __Pausable_init_unchained */\n      tag_454\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":1126:1153  __Pausable_init_unchained() */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":2429:2544  function _pause() internal virtual whenNotPaused {... */\n    tag_284:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":1482:1501  _requireNotPaused() */\n      tag_460\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":1482:1499  _requireNotPaused */\n      tag_461\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":1482:1501  _requireNotPaused() */\n      jump\t// in\n    tag_460:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":2488:2495  _paused */\n      0xfb\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":2488:2502  _paused = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":2498:2502  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":2488:2502  _paused = true */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":2517:2537  Paused(_msgSender()) */\n      0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":2524:2536  _msgSender() */\n      tag_389\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":850:946  function _msgSender() internal view virtual returns (address) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":4802:5019  function _snapshot() internal virtual returns (uint256) {... */\n    tag_296:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":4849:4856  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":4868:4898  _currentSnapshotId.increment() */\n      tag_466\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":4868:4886  _currentSnapshotId */\n      0x9a\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/CountersUpgradeable.sol\":1043:1062  counter._value += 1 */\n      dup1\n      sload\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/CountersUpgradeable.sol\":1061:1062  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/CountersUpgradeable.sol\":1043:1062  counter._value += 1 */\n      add\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/CountersUpgradeable.sol\":956:1079  function increment(Counter storage counter) internal {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":4868:4898  _currentSnapshotId.increment() */\n    tag_466:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":4909:4926  uint256 currentId */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":4929:4952  _getCurrentSnapshotId() */\n      tag_468\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":4929:4950  _getCurrentSnapshotId */\n      tag_414\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":4929:4952  _getCurrentSnapshotId() */\n      jump\t// in\n    tag_468:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":4909:4952  uint256 currentId = _getCurrentSnapshotId() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":4967:4986  Snapshot(currentId) */\n      0x8030e83b04d87bef53480e26263266d6ca66863aa8506aca6f2559d18aa1cb67\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":4976:4985  currentId */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":4967:4986  Snapshot(currentId) */\n      mload(0x40)\n      tag_469\n      swap2\n        /* \"#utility.yul\":1445:1470   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1433:1435   */\n      0x20\n        /* \"#utility.yul\":1418:1436   */\n      add\n      swap1\n        /* \"#utility.yul\":1299:1476   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":4967:4986  Snapshot(currentId) */\n    tag_469:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5003:5012  currentId */\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":4802:5019  function _snapshot() internal virtual returns (uint256) {... */\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/BRNKC.sol\":1949:2192  function _beforeTokenTransfer(address from, address to, uint256 amount)... */\n    tag_344:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":1482:1501  _requireNotPaused() */\n      tag_471\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":1482:1499  _requireNotPaused */\n      tag_461\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":1482:1501  _requireNotPaused() */\n      jump\t// in\n    tag_471:\n        /* \"contracts/BRNKC.sol\":2140:2184  super._beforeTokenTransfer(from, to, amount) */\n      tag_361\n        /* \"contracts/BRNKC.sol\":2167:2171  from */\n      dup4\n        /* \"contracts/BRNKC.sol\":2173:2175  to */\n      dup4\n        /* \"contracts/BRNKC.sol\":2177:2183  amount */\n      dup4\n        /* \"contracts/BRNKC.sol\":2140:2166  super._beforeTokenTransfer */\n      tag_474\n        /* \"contracts/BRNKC.sol\":2140:2184  super._beforeTokenTransfer(from, to, amount) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":1805:2086  function _setImplementation(address newImplementation) private {... */\n    tag_362:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":1476:1495  account.code.length */\n      dup2\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":1878:1984  require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\") */\n      tag_480\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":15425:15427   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":1878:1984  require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":15407:15428   */\n      mstore\n        /* \"#utility.yul\":15464:15466   */\n      0x2d\n        /* \"#utility.yul\":15444:15462   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":15437:15467   */\n      mstore\n        /* \"#utility.yul\":15503:15537   */\n      0x455243313936373a206e657720696d706c656d656e746174696f6e206973206e\n        /* \"#utility.yul\":15483:15501   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":15476:15538   */\n      mstore\n      shl(0x9a, 0x1bdd08184818dbdb9d1c9858dd)\n        /* \"#utility.yul\":15554:15572   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":15547:15590   */\n      mstore\n        /* \"#utility.yul\":15607:15626   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":1878:1984  require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\") */\n      tag_180\n        /* \"#utility.yul\":15223:15632   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":1878:1984  require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\") */\n    tag_480:\n      0x00\n      dup1\n      mload\n      0x20\n      data_75b20eef8615de99c108b05f0dbda081c91897128caa336d75dffb97c4132b4d\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":1994:2079  StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":1805:2086  function _setImplementation(address newImplementation) private {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2478:2766  function _upgradeToAndCall(... */\n    tag_378:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2616:2645  _upgradeTo(newImplementation) */\n      tag_485\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2627:2644  newImplementation */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2616:2626  _upgradeTo */\n      tag_486\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2616:2645  _upgradeTo(newImplementation) */\n      jump\t// in\n    tag_485:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2673:2674  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2659:2663  data */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2659:2670  data.length */\n      mload\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2659:2674  data.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2659:2687  data.length > 0 || forceCall */\n      dup1\n      tag_487\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2678:2687  forceCall */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2659:2687  data.length > 0 || forceCall */\n    tag_487:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2655:2760  if (data.length > 0 || forceCall) {... */\n      iszero\n      tag_361\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2703:2749  _functionDelegateCall(newImplementation, data) */\n      tag_335\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2725:2742  newImplementation */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2744:2748  data */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2703:2724  _functionDelegateCall */\n      tag_490\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2703:2749  _functionDelegateCall(newImplementation, data) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":2188:2294  function _requirePaused() internal view virtual {... */\n    tag_387:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":1928:1935  _paused */\n      and(0xff, sload(0xfb))\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":2246:2287  require(paused(), \"Pausable: not paused\") */\n      tag_206\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":15839:15841   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":2246:2287  require(paused(), \"Pausable: not paused\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":15821:15842   */\n      mstore\n        /* \"#utility.yul\":15878:15880   */\n      0x14\n        /* \"#utility.yul\":15858:15876   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":15851:15881   */\n      mstore\n      shl(0x62, 0x14185d5cd8589b194e881b9bdd081c185d5cd959)\n        /* \"#utility.yul\":15897:15915   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":15890:15940   */\n      mstore\n        /* \"#utility.yul\":15957:15975   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":2246:2287  require(paused(), \"Pausable: not paused\") */\n      tag_180\n        /* \"#utility.yul\":15637:15981   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5080:5205  function _getCurrentSnapshotId() internal view virtual returns (uint256) {... */\n    tag_414:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5144:5151  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5170:5198  _currentSnapshotId.current() */\n      tag_497\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5170:5188  _currentSnapshotId */\n      0x9a\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/CountersUpgradeable.sol\":929:943  counter._value */\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/CountersUpgradeable.sol\":838:950  function current(Counter storage counter) internal view returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5170:5198  _currentSnapshotId.current() */\n    tag_497:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5163:5198  return _currentSnapshotId.current() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":5080:5205  function _getCurrentSnapshotId() internal view virtual returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":757:1700  function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {... */\n    tag_419:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":869:881  array.length */\n      dup2\n      sload\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":846:853  uint256 */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":869:886  array.length == 0 */\n      dup2\n      sub\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":865:921  if (array.length == 0) {... */\n      tag_500\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":909:910  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":902:910  return 0 */\n      jump(tag_165)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":865:921  if (array.length == 0) {... */\n    tag_500:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":971:983  array.length */\n      dup3\n      sload\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":931:942  uint256 low */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":994:1439  while (low < high) {... */\n    tag_501:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1007:1011  high */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1001:1004  low */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1001:1011  low < high */\n      lt\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":994:1439  while (low < high) {... */\n      iszero\n      tag_502\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1027:1038  uint256 mid */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1041:1075  MathUpgradeable.average(low, high) */\n      tag_503\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1065:1068  low */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1070:1074  high */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1041:1064  MathUpgradeable.average */\n      tag_504\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1041:1075  MathUpgradeable.average(low, high) */\n      jump\t// in\n    tag_503:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":3077:3119  StorageSlotUpgradeable.Uint256Slot storage */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":3219:3238  mstore(0, arr.slot) */\n      dup8\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":3276:3280  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":3263:3281  keccak256(0, 0x20) */\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1027:1075  uint256 mid = MathUpgradeable.average(low, high) */\n      swap1\n      swap2\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1325:1332  element */\n      dup6\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":3259:3287  add(keccak256(0, 0x20), pos) */\n      dup3\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1292:1322  unsafeAccess(array, mid).value */\n      sload\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1292:1332  unsafeAccess(array, mid).value > element */\n      gt\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1288:1429  if (unsafeAccess(array, mid).value > element) {... */\n      iszero\n      tag_507\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1359:1362  mid */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1352:1362  high = mid */\n      swap2\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1288:1429  if (unsafeAccess(array, mid).value > element) {... */\n      jump(tag_508)\n    tag_507:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1407:1414  mid + 1 */\n      tag_509\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1407:1410  mid */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1413:1414  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1407:1414  mid + 1 */\n      tag_201\n      jump\t// in\n    tag_509:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1401:1414  low = mid + 1 */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1288:1429  if (unsafeAccess(array, mid).value > element) {... */\n    tag_508:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1013:1439  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":994:1439  while (low < high) {... */\n      jump(tag_501)\n    tag_502:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1562:1563  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1556:1559  low */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1556:1563  low > 0 */\n      gt\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1556:1612  low > 0 && unsafeAccess(array, low - 1).value == element */\n      dup1\n      iszero\n      tag_510\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1605:1612  element */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1567:1595  unsafeAccess(array, low - 1) */\n      tag_511\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1580:1585  array */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1587:1594  low - 1 */\n      tag_512\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1593:1594  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1587:1590  low */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1587:1594  low - 1 */\n      tag_513\n      jump\t// in\n    tag_512:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":3077:3119  StorageSlotUpgradeable.Uint256Slot storage */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":3219:3238  mstore(0, arr.slot) */\n      swap2\n      dup3\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":3276:3280  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":3263:3281  keccak256(0, 0x20) */\n      swap1\n      swap2\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":3259:3287  add(keccak256(0, 0x20), pos) */\n      add\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":2996:3341  function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlotUpgradeable.Uint256Slot storage) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1567:1595  unsafeAccess(array, low - 1) */\n    tag_511:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1567:1601  unsafeAccess(array, low - 1).value */\n      sload\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1567:1612  unsafeAccess(array, low - 1).value == element */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1556:1612  low > 0 && unsafeAccess(array, low - 1).value == element */\n    tag_510:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1552:1694  if (low > 0 && unsafeAccess(array, low - 1).value == element) {... */\n      iszero\n      tag_514\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1635:1642  low - 1 */\n      tag_515\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1641:1642  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1635:1638  low */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1635:1642  low - 1 */\n      tag_513\n      jump\t// in\n    tag_515:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1628:1642  return low - 1 */\n      swap3\n      pop\n      pop\n      pop\n      jump(tag_165)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1552:1694  if (low > 0 && unsafeAccess(array, low - 1).value == element) {... */\n    tag_514:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1680:1683  low */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":1673:1683  return low */\n      jump(tag_165)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2267:2426  function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {... */\n    tag_434:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":5363:5376  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":5355:5424  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_518\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_180\n      swap1\n      tag_431\n      jump\t// in\n    tag_518:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2379:2384  _name */\n      0x36\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2379:2392  _name = name_ */\n      tag_521\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2387:2392  name_ */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2379:2384  _name */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2379:2392  _name = name_ */\n      tag_522\n      jump\t// in\n    tag_521:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2402:2409  _symbol */\n      0x37\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2402:2419  _symbol = symbol_ */\n      tag_361\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2412:2419  symbol_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2402:2409  _symbol */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":2402:2419  _symbol = symbol_ */\n      tag_522\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1104:1215  function __Ownable_init_unchained() internal onlyInitializing {... */\n    tag_448:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":5363:5376  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":5355:5424  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_525\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_180\n      swap1\n      tag_431\n      jump\t// in\n    tag_525:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1176:1208  _transferOwnership(_msgSender()) */\n      tag_206\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1176:1194  _transferOwnership */\n      tag_243\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":1176:1208  _transferOwnership(_msgSender()) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":1166:1261  function __Pausable_init_unchained() internal onlyInitializing {... */\n    tag_454:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":5363:5376  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":5355:5424  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_531\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_180\n      swap1\n      tag_431\n      jump\t// in\n    tag_531:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":1239:1246  _paused */\n      0xfb\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":1239:1254  _paused = false */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":1166:1261  function __Pausable_init_unchained() internal onlyInitializing {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":2010:2116  function _requireNotPaused() internal view virtual {... */\n    tag_461:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":1928:1935  _paused */\n      and(0xff, sload(0xfb))\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":2079:2088  !paused() */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":2071:2109  require(!paused(), \"Pausable: paused\") */\n      tag_206\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":18525:18527   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":2071:2109  require(!paused(), \"Pausable: paused\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":18507:18528   */\n      mstore\n        /* \"#utility.yul\":18564:18566   */\n      0x10\n        /* \"#utility.yul\":18544:18562   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":18537:18567   */\n      mstore\n      shl(0x82, 0x14185d5cd8589b194e881c185d5cd959)\n        /* \"#utility.yul\":18583:18601   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":18576:18622   */\n      mstore\n        /* \"#utility.yul\":18639:18657   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":2071:2109  require(!paused(), \"Pausable: paused\") */\n      tag_180\n        /* \"#utility.yul\":18323:18663   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6116:6718  function _beforeTokenTransfer(... */\n    tag_474:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6313:6331  from == address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6309:6712  if (from == address(0)) {... */\n      tag_543\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6367:6393  _updateAccountSnapshot(to) */\n      tag_544\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6390:6392  to */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6367:6389  _updateAccountSnapshot */\n      tag_545\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6367:6393  _updateAccountSnapshot(to) */\n      jump\t// in\n    tag_544:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6407:6435  _updateTotalSupplySnapshot() */\n      tag_361\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6407:6433  _updateTotalSupplySnapshot */\n      tag_547\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6407:6435  _updateTotalSupplySnapshot() */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6309:6712  if (from == address(0)) {... */\n    tag_543:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6456:6472  to == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6452:6712  if (to == address(0)) {... */\n      tag_549\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6508:6536  _updateAccountSnapshot(from) */\n      tag_544\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6531:6535  from */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6508:6530  _updateAccountSnapshot */\n      tag_545\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6508:6536  _updateAccountSnapshot(from) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6452:6712  if (to == address(0)) {... */\n    tag_549:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6633:6661  _updateAccountSnapshot(from) */\n      tag_553\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6656:6660  from */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6633:6655  _updateAccountSnapshot */\n      tag_545\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6633:6661  _updateAccountSnapshot(from) */\n      jump\t// in\n    tag_553:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6675:6701  _updateAccountSnapshot(to) */\n      tag_361\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6698:6700  to */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6675:6697  _updateAccountSnapshot */\n      tag_545\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":6675:6701  _updateAccountSnapshot(to) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2192:2344  function _upgradeTo(address newImplementation) internal {... */\n    tag_486:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2258:2295  _setImplementation(newImplementation) */\n      tag_556\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2277:2294  newImplementation */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2258:2276  _setImplementation */\n      tag_362\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2258:2295  _setImplementation(newImplementation) */\n      jump\t// in\n    tag_556:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2310:2337  Upgraded(newImplementation) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      swap1\n      0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b\n      swap1\n      0x00\n      swap1\n      log2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":2192:2344  function _upgradeTo(address newImplementation) internal {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":7088:7543  function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {... */\n    tag_490:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":7171:7183  bytes memory */\n      0x60\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":1476:1495  account.code.length */\n      dup4\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":7195:7283  require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\") */\n      tag_559\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":18870:18872   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":7195:7283  require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":18852:18873   */\n      mstore\n        /* \"#utility.yul\":18909:18911   */\n      0x26\n        /* \"#utility.yul\":18889:18907   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":18882:18912   */\n      mstore\n        /* \"#utility.yul\":18948:18982   */\n      0x416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f\n        /* \"#utility.yul\":18928:18946   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":18921:18983   */\n      mstore\n      shl(0xd2, 0x1b9d1c9858dd)\n        /* \"#utility.yul\":18999:19017   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":18992:19028   */\n      mstore\n        /* \"#utility.yul\":19045:19064   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":7195:7283  require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\") */\n      tag_180\n        /* \"#utility.yul\":18668:19070   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":7195:7283  require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\") */\n    tag_559:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":7354:7366  bool success */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":7368:7391  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":7395:7401  target */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":7395:7414  target.delegatecall */\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":7415:7419  data */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":7395:7420  target.delegatecall(data) */\n      mload(0x40)\n      tag_562\n      swap2\n      swap1\n      tag_563\n      jump\t// in\n    tag_562:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      gas\n      delegatecall\n      swap2\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_566\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_565)\n    tag_566:\n      0x60\n      swap2\n      pop\n    tag_565:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":7353:7420  (bool success, bytes memory returndata) = target.delegatecall(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":7437:7536  AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\") */\n      tag_222\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":7473:7480  success */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":7482:7492  returndata */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":7437:7536  AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x27\n      dup2\n      mstore\n      0x20\n      add\n      data_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398\n      0x27\n      swap2\n      codecopy\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":7437:7472  AddressUpgradeable.verifyCallResult */\n      tag_568\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":7437:7536  AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\") */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol\":816:969  function average(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_504:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol\":878:885  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol\":951:962  (a ^ b) / 2 */\n      tag_571\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol\":961:962  2 */\n      0x02\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol\":952:957  a ^ b */\n      dup5\n      dup5\n      xor\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol\":951:962  (a ^ b) / 2 */\n      tag_572\n      jump\t// in\n    tag_571:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol\":941:962  (a & b) + (a ^ b) / 2 */\n      tag_171\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol\":942:947  a & b */\n      dup5\n      dup5\n      and\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol\":941:962  (a & b) + (a ^ b) / 2 */\n      tag_201\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8324:8468  function _updateAccountSnapshot(address account) private {... */\n    tag_545:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8407:8440  _accountBalanceSnapshots[account] */\n      dup2\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8407:8431  _accountBalanceSnapshots */\n      0x97\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8407:8440  _accountBalanceSnapshots[account] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3843:3852  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3843:3861  _balances[account] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8391:8461  _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account)) */\n      tag_190\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8407:8440  _accountBalanceSnapshots[account] */\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8391:8406  _updateSnapshot */\n      tag_581\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8391:8461  _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account)) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8442:8460  balanceOf(account) */\n    tag_580:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8391:8406  _updateSnapshot */\n      tag_581\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8391:8461  _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account)) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8474:8590  function _updateTotalSupplySnapshot() private {... */\n    tag_547:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8530:8583  _updateSnapshot(_totalSupplySnapshots, totalSupply()) */\n      tag_206\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8546:8567  _totalSupplySnapshots */\n      0x98\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8569:8582  totalSupply() */\n      tag_580\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3666:3678  _totalSupply */\n      sload(0x35)\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":3579:3685  function totalSupply() public view virtual override returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":7438:7733  function verifyCallResult(... */\n    tag_568:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":7584:7596  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":7612:7619  success */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":7608:7727  if (success) {... */\n      iszero\n      tag_586\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":7642:7652  returndata */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":7635:7652  return returndata */\n      jump(tag_171)\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":7608:7727  if (success) {... */\n    tag_586:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":7683:7716  _revert(returndata, errorMessage) */\n      tag_171\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":7691:7701  returndata */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":7703:7715  errorMessage */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":7683:7690  _revert */\n      tag_589\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":7683:7716  _revert(returndata, errorMessage) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8596:8900  function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {... */\n    tag_581:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8690:8707  uint256 currentId */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8710:8733  _getCurrentSnapshotId() */\n      tag_592\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8710:8731  _getCurrentSnapshotId */\n      tag_414\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8710:8733  _getCurrentSnapshotId() */\n      jump\t// in\n    tag_592:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8690:8733  uint256 currentId = _getCurrentSnapshotId() */\n      swap1\n      pop\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8747:8777  _lastSnapshotId(snapshots.ids) */\n      tag_593\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8763:8772  snapshots */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8747:8762  _lastSnapshotId */\n      tag_594\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8747:8777  _lastSnapshotId(snapshots.ids) */\n      jump\t// in\n    tag_593:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8747:8789  _lastSnapshotId(snapshots.ids) < currentId */\n      lt\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8743:8894  if (_lastSnapshotId(snapshots.ids) < currentId) {... */\n      iszero\n      tag_361\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8805:8834  snapshots.ids.push(currentId) */\n      dup3\n      sload\n      0x01\n      dup1\n      dup3\n      add\n      dup6\n      sstore\n      0x00\n      dup6\n      dup2\n      mstore\n      0x20\n      dup1\n      dup3\n      keccak256\n      swap1\n      swap4\n      add\n      swap4\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8848:8864  snapshots.values */\n      swap4\n      dup5\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8848:8883  snapshots.values.push(currentValue) */\n      dup1\n      sload\n      swap5\n      dup6\n      add\n      dup2\n      sstore\n      dup3\n      mstore\n      swap1\n      keccak256\n      swap1\n      swap2\n      add\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8596:8900  function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":7739:8279  function _revert(bytes memory returndata, string memory errorMessage) private pure {... */\n    tag_589:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":7898:7915  returndata.length */\n      dup2\n      mload\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":7898:7919  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":7894:8273  if (returndata.length > 0) {... */\n      tag_599\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":8126:8136  returndata */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":8120:8137  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":8182:8197  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":8169:8179  returndata */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":8165:8167  32 */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":8161:8180  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":8154:8198  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":7894:8273  if (returndata.length > 0) {... */\n    tag_599:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":8249:8261  errorMessage */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":8242:8262  revert(errorMessage) */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_180\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8906:9112  function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {... */\n    tag_594:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8999:9009  ids.length */\n      dup1\n      sload\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8976:8983  uint256 */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8999:9014  ids.length == 0 */\n      dup2\n      sub\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8995:9106  if (ids.length == 0) {... */\n      tag_603\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":9037:9038  0 */\n      0x00\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8906:9112  function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {... */\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8995:9106  if (ids.length == 0) {... */\n    tag_603:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":9080:9090  ids.length */\n      dup2\n      sload\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":9076:9079  ids */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":9080:9094  ids.length - 1 */\n      tag_605\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":9093:9094  1 */\n      0x01\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":9080:9094  ids.length - 1 */\n      tag_513\n      jump\t// in\n    tag_605:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":9076:9095  ids[ids.length - 1] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_607\n      jumpi\n      tag_607\n      tag_424\n      jump\t// in\n    tag_607:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      sload\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":9069:9095  return ids[ids.length - 1] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8906:9112  function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8995:9106  if (ids.length == 0) {... */\n    tag_604:\n        /* \"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":8906:9112  function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14:264   */\n    tag_609:\n        /* \"#utility.yul\":99:100   */\n      0x00\n        /* \"#utility.yul\":109:222   */\n    tag_619:\n        /* \"#utility.yul\":123:129   */\n      dup4\n        /* \"#utility.yul\":120:121   */\n      dup2\n        /* \"#utility.yul\":117:130   */\n      lt\n        /* \"#utility.yul\":109:222   */\n      iszero\n      tag_621\n      jumpi\n        /* \"#utility.yul\":199:210   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":193:211   */\n      mload\n        /* \"#utility.yul\":180:191   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":173:212   */\n      mstore\n        /* \"#utility.yul\":145:147   */\n      0x20\n        /* \"#utility.yul\":138:148   */\n      add\n        /* \"#utility.yul\":109:222   */\n      jump(tag_619)\n    tag_621:\n      pop\n      pop\n        /* \"#utility.yul\":256:257   */\n      0x00\n        /* \"#utility.yul\":238:254   */\n      swap2\n      add\n        /* \"#utility.yul\":231:258   */\n      mstore\n        /* \"#utility.yul\":14:264   */\n      jump\t// out\n        /* \"#utility.yul\":269:665   */\n    tag_39:\n        /* \"#utility.yul\":418:420   */\n      0x20\n        /* \"#utility.yul\":407:416   */\n      dup2\n        /* \"#utility.yul\":400:421   */\n      mstore\n        /* \"#utility.yul\":381:385   */\n      0x00\n        /* \"#utility.yul\":450:456   */\n      dup3\n        /* \"#utility.yul\":444:457   */\n      mload\n        /* \"#utility.yul\":493:499   */\n      dup1\n        /* \"#utility.yul\":488:490   */\n      0x20\n        /* \"#utility.yul\":477:486   */\n      dup5\n        /* \"#utility.yul\":473:491   */\n      add\n        /* \"#utility.yul\":466:500   */\n      mstore\n        /* \"#utility.yul\":509:588   */\n      tag_623\n        /* \"#utility.yul\":581:587   */\n      dup2\n        /* \"#utility.yul\":576:578   */\n      0x40\n        /* \"#utility.yul\":565:574   */\n      dup6\n        /* \"#utility.yul\":561:579   */\n      add\n        /* \"#utility.yul\":556:558   */\n      0x20\n        /* \"#utility.yul\":548:554   */\n      dup8\n        /* \"#utility.yul\":544:559   */\n      add\n        /* \"#utility.yul\":509:588   */\n      tag_609\n      jump\t// in\n    tag_623:\n        /* \"#utility.yul\":649:651   */\n      0x1f\n        /* \"#utility.yul\":628:643   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":624:653   */\n      and\n        /* \"#utility.yul\":609:654   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":656:658   */\n      0x40\n        /* \"#utility.yul\":605:659   */\n      add\n      swap3\n        /* \"#utility.yul\":269:665   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":670:843   */\n    tag_610:\n        /* \"#utility.yul\":738:758   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":787:818   */\n      dup2\n      and\n        /* \"#utility.yul\":777:819   */\n      dup2\n      eq\n        /* \"#utility.yul\":767:837   */\n      tag_604\n      jumpi\n        /* \"#utility.yul\":833:834   */\n      0x00\n        /* \"#utility.yul\":830:831   */\n      dup1\n        /* \"#utility.yul\":823:835   */\n      revert\n        /* \"#utility.yul\":848:1102   */\n    tag_43:\n        /* \"#utility.yul\":916:922   */\n      0x00\n        /* \"#utility.yul\":924:930   */\n      dup1\n        /* \"#utility.yul\":977:979   */\n      0x40\n        /* \"#utility.yul\":965:974   */\n      dup4\n        /* \"#utility.yul\":956:963   */\n      dup6\n        /* \"#utility.yul\":952:975   */\n      sub\n        /* \"#utility.yul\":948:980   */\n      slt\n        /* \"#utility.yul\":945:997   */\n      iszero\n      tag_627\n      jumpi\n        /* \"#utility.yul\":993:994   */\n      0x00\n        /* \"#utility.yul\":990:991   */\n      dup1\n        /* \"#utility.yul\":983:995   */\n      revert\n        /* \"#utility.yul\":945:997   */\n    tag_627:\n        /* \"#utility.yul\":1016:1045   */\n      tag_628\n        /* \"#utility.yul\":1035:1044   */\n      dup4\n        /* \"#utility.yul\":1016:1045   */\n      tag_610\n      jump\t// in\n    tag_628:\n        /* \"#utility.yul\":1006:1045   */\n      swap5\n        /* \"#utility.yul\":1092:1094   */\n      0x20\n        /* \"#utility.yul\":1077:1095   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1064:1096   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":848:1102   */\n      jump\t// out\n        /* \"#utility.yul\":1481:1809   */\n    tag_55:\n        /* \"#utility.yul\":1558:1564   */\n      0x00\n        /* \"#utility.yul\":1566:1572   */\n      dup1\n        /* \"#utility.yul\":1574:1580   */\n      0x00\n        /* \"#utility.yul\":1627:1629   */\n      0x60\n        /* \"#utility.yul\":1615:1624   */\n      dup5\n        /* \"#utility.yul\":1606:1613   */\n      dup7\n        /* \"#utility.yul\":1602:1625   */\n      sub\n        /* \"#utility.yul\":1598:1630   */\n      slt\n        /* \"#utility.yul\":1595:1647   */\n      iszero\n      tag_632\n      jumpi\n        /* \"#utility.yul\":1643:1644   */\n      0x00\n        /* \"#utility.yul\":1640:1641   */\n      dup1\n        /* \"#utility.yul\":1633:1645   */\n      revert\n        /* \"#utility.yul\":1595:1647   */\n    tag_632:\n        /* \"#utility.yul\":1666:1695   */\n      tag_633\n        /* \"#utility.yul\":1685:1694   */\n      dup5\n        /* \"#utility.yul\":1666:1695   */\n      tag_610\n      jump\t// in\n    tag_633:\n        /* \"#utility.yul\":1656:1695   */\n      swap3\n      pop\n        /* \"#utility.yul\":1714:1752   */\n      tag_634\n        /* \"#utility.yul\":1748:1750   */\n      0x20\n        /* \"#utility.yul\":1737:1746   */\n      dup6\n        /* \"#utility.yul\":1733:1751   */\n      add\n        /* \"#utility.yul\":1714:1752   */\n      tag_610\n      jump\t// in\n    tag_634:\n        /* \"#utility.yul\":1704:1752   */\n      swap2\n      pop\n        /* \"#utility.yul\":1799:1801   */\n      0x40\n        /* \"#utility.yul\":1788:1797   */\n      dup5\n        /* \"#utility.yul\":1784:1802   */\n      add\n        /* \"#utility.yul\":1771:1803   */\n      calldataload\n        /* \"#utility.yul\":1761:1803   */\n      swap1\n      pop\n        /* \"#utility.yul\":1481:1809   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":2003:2189   */\n    tag_66:\n        /* \"#utility.yul\":2062:2068   */\n      0x00\n        /* \"#utility.yul\":2115:2117   */\n      0x20\n        /* \"#utility.yul\":2103:2112   */\n      dup3\n        /* \"#utility.yul\":2094:2101   */\n      dup5\n        /* \"#utility.yul\":2090:2113   */\n      sub\n        /* \"#utility.yul\":2086:2118   */\n      slt\n        /* \"#utility.yul\":2083:2135   */\n      iszero\n      tag_637\n      jumpi\n        /* \"#utility.yul\":2131:2132   */\n      0x00\n        /* \"#utility.yul\":2128:2129   */\n      dup1\n        /* \"#utility.yul\":2121:2133   */\n      revert\n        /* \"#utility.yul\":2083:2135   */\n    tag_637:\n        /* \"#utility.yul\":2154:2183   */\n      tag_171\n        /* \"#utility.yul\":2173:2182   */\n      dup3\n        /* \"#utility.yul\":2154:2183   */\n      tag_610\n      jump\t// in\n        /* \"#utility.yul\":2194:2374   */\n    tag_83:\n        /* \"#utility.yul\":2253:2259   */\n      0x00\n        /* \"#utility.yul\":2306:2308   */\n      0x20\n        /* \"#utility.yul\":2294:2303   */\n      dup3\n        /* \"#utility.yul\":2285:2292   */\n      dup5\n        /* \"#utility.yul\":2281:2304   */\n      sub\n        /* \"#utility.yul\":2277:2309   */\n      slt\n        /* \"#utility.yul\":2274:2326   */\n      iszero\n      tag_640\n      jumpi\n        /* \"#utility.yul\":2322:2323   */\n      0x00\n        /* \"#utility.yul\":2319:2320   */\n      dup1\n        /* \"#utility.yul\":2312:2324   */\n      revert\n        /* \"#utility.yul\":2274:2326   */\n    tag_640:\n      pop\n        /* \"#utility.yul\":2345:2368   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":2194:2374   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2379:2506   */\n    tag_193:\n        /* \"#utility.yul\":2440:2450   */\n      0x4e487b71\n        /* \"#utility.yul\":2435:2438   */\n      0xe0\n        /* \"#utility.yul\":2431:2451   */\n      shl\n        /* \"#utility.yul\":2428:2429   */\n      0x00\n        /* \"#utility.yul\":2421:2452   */\n      mstore\n        /* \"#utility.yul\":2471:2475   */\n      0x41\n        /* \"#utility.yul\":2468:2469   */\n      0x04\n        /* \"#utility.yul\":2461:2476   */\n      mstore\n        /* \"#utility.yul\":2495:2499   */\n      0x24\n        /* \"#utility.yul\":2492:2493   */\n      0x00\n        /* \"#utility.yul\":2485:2500   */\n      revert\n        /* \"#utility.yul\":2511:3506   */\n    tag_92:\n        /* \"#utility.yul\":2588:2594   */\n      0x00\n        /* \"#utility.yul\":2596:2602   */\n      dup1\n        /* \"#utility.yul\":2649:2651   */\n      0x40\n        /* \"#utility.yul\":2637:2646   */\n      dup4\n        /* \"#utility.yul\":2628:2635   */\n      dup6\n        /* \"#utility.yul\":2624:2647   */\n      sub\n        /* \"#utility.yul\":2620:2652   */\n      slt\n        /* \"#utility.yul\":2617:2669   */\n      iszero\n      tag_643\n      jumpi\n        /* \"#utility.yul\":2665:2666   */\n      0x00\n        /* \"#utility.yul\":2662:2663   */\n      dup1\n        /* \"#utility.yul\":2655:2667   */\n      revert\n        /* \"#utility.yul\":2617:2669   */\n    tag_643:\n        /* \"#utility.yul\":2688:2717   */\n      tag_644\n        /* \"#utility.yul\":2707:2716   */\n      dup4\n        /* \"#utility.yul\":2688:2717   */\n      tag_610\n      jump\t// in\n    tag_644:\n        /* \"#utility.yul\":2678:2717   */\n      swap2\n      pop\n        /* \"#utility.yul\":2768:2770   */\n      0x20\n        /* \"#utility.yul\":2757:2766   */\n      dup4\n        /* \"#utility.yul\":2753:2771   */\n      add\n        /* \"#utility.yul\":2740:2772   */\n      calldataload\n        /* \"#utility.yul\":2791:2809   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2832:2834   */\n      dup1\n        /* \"#utility.yul\":2824:2830   */\n      dup3\n        /* \"#utility.yul\":2821:2835   */\n      gt\n        /* \"#utility.yul\":2818:2852   */\n      iszero\n      tag_645\n      jumpi\n        /* \"#utility.yul\":2848:2849   */\n      0x00\n        /* \"#utility.yul\":2845:2846   */\n      dup1\n        /* \"#utility.yul\":2838:2850   */\n      revert\n        /* \"#utility.yul\":2818:2852   */\n    tag_645:\n        /* \"#utility.yul\":2886:2892   */\n      dup2\n        /* \"#utility.yul\":2875:2884   */\n      dup6\n        /* \"#utility.yul\":2871:2893   */\n      add\n        /* \"#utility.yul\":2861:2893   */\n      swap2\n      pop\n        /* \"#utility.yul\":2931:2938   */\n      dup6\n        /* \"#utility.yul\":2924:2928   */\n      0x1f\n        /* \"#utility.yul\":2920:2922   */\n      dup4\n        /* \"#utility.yul\":2916:2929   */\n      add\n        /* \"#utility.yul\":2912:2939   */\n      slt\n        /* \"#utility.yul\":2902:2957   */\n      tag_646\n      jumpi\n        /* \"#utility.yul\":2953:2954   */\n      0x00\n        /* \"#utility.yul\":2950:2951   */\n      dup1\n        /* \"#utility.yul\":2943:2955   */\n      revert\n        /* \"#utility.yul\":2902:2957   */\n    tag_646:\n        /* \"#utility.yul\":2989:2991   */\n      dup2\n        /* \"#utility.yul\":2976:2992   */\n      calldataload\n        /* \"#utility.yul\":3011:3013   */\n      dup2\n        /* \"#utility.yul\":3007:3009   */\n      dup2\n        /* \"#utility.yul\":3004:3014   */\n      gt\n        /* \"#utility.yul\":3001:3037   */\n      iszero\n      tag_648\n      jumpi\n        /* \"#utility.yul\":3017:3035   */\n      tag_648\n      tag_193\n      jump\t// in\n    tag_648:\n        /* \"#utility.yul\":3092:3094   */\n      0x40\n        /* \"#utility.yul\":3086:3095   */\n      mload\n        /* \"#utility.yul\":3060:3062   */\n      0x1f\n        /* \"#utility.yul\":3146:3159   */\n      dup3\n      add\n      not(0x1f)\n        /* \"#utility.yul\":3142:3164   */\n      swap1\n      dup2\n      and\n        /* \"#utility.yul\":3166:3168   */\n      0x3f\n        /* \"#utility.yul\":3138:3169   */\n      add\n        /* \"#utility.yul\":3134:3174   */\n      and\n        /* \"#utility.yul\":3122:3175   */\n      dup2\n      add\n      swap1\n        /* \"#utility.yul\":3190:3208   */\n      dup4\n      dup3\n      gt\n        /* \"#utility.yul\":3210:3232   */\n      dup2\n      dup4\n      lt\n        /* \"#utility.yul\":3187:3233   */\n      or\n        /* \"#utility.yul\":3184:3256   */\n      iszero\n      tag_650\n      jumpi\n        /* \"#utility.yul\":3236:3254   */\n      tag_650\n      tag_193\n      jump\t// in\n    tag_650:\n        /* \"#utility.yul\":3276:3286   */\n      dup2\n        /* \"#utility.yul\":3272:3274   */\n      0x40\n        /* \"#utility.yul\":3265:3287   */\n      mstore\n        /* \"#utility.yul\":3311:3313   */\n      dup3\n        /* \"#utility.yul\":3303:3309   */\n      dup2\n        /* \"#utility.yul\":3296:3314   */\n      mstore\n        /* \"#utility.yul\":3351:3358   */\n      dup9\n        /* \"#utility.yul\":3346:3348   */\n      0x20\n        /* \"#utility.yul\":3341:3343   */\n      dup5\n        /* \"#utility.yul\":3337:3339   */\n      dup8\n        /* \"#utility.yul\":3333:3344   */\n      add\n        /* \"#utility.yul\":3329:3349   */\n      add\n        /* \"#utility.yul\":3326:3359   */\n      gt\n        /* \"#utility.yul\":3323:3376   */\n      iszero\n      tag_651\n      jumpi\n        /* \"#utility.yul\":3372:3373   */\n      0x00\n        /* \"#utility.yul\":3369:3370   */\n      dup1\n        /* \"#utility.yul\":3362:3374   */\n      revert\n        /* \"#utility.yul\":3323:3376   */\n    tag_651:\n        /* \"#utility.yul\":3428:3430   */\n      dup3\n        /* \"#utility.yul\":3423:3425   */\n      0x20\n        /* \"#utility.yul\":3419:3421   */\n      dup7\n        /* \"#utility.yul\":3415:3426   */\n      add\n        /* \"#utility.yul\":3410:3412   */\n      0x20\n        /* \"#utility.yul\":3402:3408   */\n      dup4\n        /* \"#utility.yul\":3398:3413   */\n      add\n        /* \"#utility.yul\":3385:3431   */\n      calldatacopy\n        /* \"#utility.yul\":3473:3474   */\n      0x00\n        /* \"#utility.yul\":3468:3470   */\n      0x20\n        /* \"#utility.yul\":3463:3465   */\n      dup5\n        /* \"#utility.yul\":3455:3461   */\n      dup4\n        /* \"#utility.yul\":3451:3466   */\n      add\n        /* \"#utility.yul\":3447:3471   */\n      add\n        /* \"#utility.yul\":3440:3475   */\n      mstore\n        /* \"#utility.yul\":3494:3500   */\n      dup1\n        /* \"#utility.yul\":3484:3500   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":2511:3506   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3901:4161   */\n    tag_151:\n        /* \"#utility.yul\":3969:3975   */\n      0x00\n        /* \"#utility.yul\":3977:3983   */\n      dup1\n        /* \"#utility.yul\":4030:4032   */\n      0x40\n        /* \"#utility.yul\":4018:4027   */\n      dup4\n        /* \"#utility.yul\":4009:4016   */\n      dup6\n        /* \"#utility.yul\":4005:4028   */\n      sub\n        /* \"#utility.yul\":4001:4033   */\n      slt\n        /* \"#utility.yul\":3998:4050   */\n      iszero\n      tag_655\n      jumpi\n        /* \"#utility.yul\":4046:4047   */\n      0x00\n        /* \"#utility.yul\":4043:4044   */\n      dup1\n        /* \"#utility.yul\":4036:4048   */\n      revert\n        /* \"#utility.yul\":3998:4050   */\n    tag_655:\n        /* \"#utility.yul\":4069:4098   */\n      tag_656\n        /* \"#utility.yul\":4088:4097   */\n      dup4\n        /* \"#utility.yul\":4069:4098   */\n      tag_610\n      jump\t// in\n    tag_656:\n        /* \"#utility.yul\":4059:4098   */\n      swap2\n      pop\n        /* \"#utility.yul\":4117:4155   */\n      tag_657\n        /* \"#utility.yul\":4151:4153   */\n      0x20\n        /* \"#utility.yul\":4140:4149   */\n      dup5\n        /* \"#utility.yul\":4136:4154   */\n      add\n        /* \"#utility.yul\":4117:4155   */\n      tag_610\n      jump\t// in\n    tag_657:\n        /* \"#utility.yul\":4107:4155   */\n      swap1\n      pop\n        /* \"#utility.yul\":3901:4161   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4166:4546   */\n    tag_160:\n        /* \"#utility.yul\":4245:4246   */\n      0x01\n        /* \"#utility.yul\":4241:4253   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":4288:4300   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":4309:4370   */\n      tag_659\n      jumpi\n        /* \"#utility.yul\":4363:4367   */\n      0x7f\n        /* \"#utility.yul\":4355:4361   */\n      dup3\n        /* \"#utility.yul\":4351:4368   */\n      and\n        /* \"#utility.yul\":4341:4368   */\n      swap2\n      pop\n        /* \"#utility.yul\":4309:4370   */\n    tag_659:\n        /* \"#utility.yul\":4416:4418   */\n      0x20\n        /* \"#utility.yul\":4408:4414   */\n      dup3\n        /* \"#utility.yul\":4405:4419   */\n      lt\n        /* \"#utility.yul\":4385:4403   */\n      dup2\n        /* \"#utility.yul\":4382:4420   */\n      sub\n        /* \"#utility.yul\":4379:4540   */\n      tag_660\n      jumpi\n        /* \"#utility.yul\":4462:4472   */\n      0x4e487b71\n        /* \"#utility.yul\":4457:4460   */\n      0xe0\n        /* \"#utility.yul\":4453:4473   */\n      shl\n        /* \"#utility.yul\":4450:4451   */\n      0x00\n        /* \"#utility.yul\":4443:4474   */\n      mstore\n        /* \"#utility.yul\":4497:4501   */\n      0x22\n        /* \"#utility.yul\":4494:4495   */\n      0x04\n        /* \"#utility.yul\":4487:4502   */\n      mstore\n        /* \"#utility.yul\":4525:4529   */\n      0x24\n        /* \"#utility.yul\":4522:4523   */\n      0x00\n        /* \"#utility.yul\":4515:4530   */\n      revert\n        /* \"#utility.yul\":4379:4540   */\n    tag_660:\n      pop\n        /* \"#utility.yul\":4166:4546   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4551:4959   */\n    tag_181:\n        /* \"#utility.yul\":4753:4755   */\n      0x20\n        /* \"#utility.yul\":4735:4756   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":4792:4794   */\n      0x2c\n        /* \"#utility.yul\":4772:4790   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":4765:4795   */\n      mstore\n        /* \"#utility.yul\":4831:4865   */\n      0x46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820\n        /* \"#utility.yul\":4826:4828   */\n      0x40\n        /* \"#utility.yul\":4811:4829   */\n      dup3\n      add\n        /* \"#utility.yul\":4804:4866   */\n      mstore\n      shl(0xa2, 0x19195b1959d85d1958d85b1b)\n        /* \"#utility.yul\":4897:4899   */\n      0x60\n        /* \"#utility.yul\":4882:4900   */\n      dup3\n      add\n        /* \"#utility.yul\":4875:4917   */\n      mstore\n        /* \"#utility.yul\":4949:4952   */\n      0x80\n        /* \"#utility.yul\":4934:4953   */\n      add\n      swap1\n        /* \"#utility.yul\":4551:4959   */\n      jump\t// out\n        /* \"#utility.yul\":4964:5372   */\n    tag_186:\n        /* \"#utility.yul\":5166:5168   */\n      0x20\n        /* \"#utility.yul\":5148:5169   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":5205:5207   */\n      0x2c\n        /* \"#utility.yul\":5185:5203   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":5178:5208   */\n      mstore\n        /* \"#utility.yul\":5244:5278   */\n      0x46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820\n        /* \"#utility.yul\":5239:5241   */\n      0x40\n        /* \"#utility.yul\":5224:5242   */\n      dup3\n      add\n        /* \"#utility.yul\":5217:5279   */\n      mstore\n      shl(0xa0, 0x6163746976652070726f7879)\n        /* \"#utility.yul\":5310:5312   */\n      0x60\n        /* \"#utility.yul\":5295:5313   */\n      dup3\n      add\n        /* \"#utility.yul\":5288:5330   */\n      mstore\n        /* \"#utility.yul\":5362:5365   */\n      0x80\n        /* \"#utility.yul\":5347:5366   */\n      add\n      swap1\n        /* \"#utility.yul\":4964:5372   */\n      jump\t// out\n        /* \"#utility.yul\":5377:5504   */\n    tag_611:\n        /* \"#utility.yul\":5438:5448   */\n      0x4e487b71\n        /* \"#utility.yul\":5433:5436   */\n      0xe0\n        /* \"#utility.yul\":5429:5449   */\n      shl\n        /* \"#utility.yul\":5426:5427   */\n      0x00\n        /* \"#utility.yul\":5419:5450   */\n      mstore\n        /* \"#utility.yul\":5469:5473   */\n      0x11\n        /* \"#utility.yul\":5466:5467   */\n      0x04\n        /* \"#utility.yul\":5459:5474   */\n      mstore\n        /* \"#utility.yul\":5493:5497   */\n      0x24\n        /* \"#utility.yul\":5490:5491   */\n      0x00\n        /* \"#utility.yul\":5483:5498   */\n      revert\n        /* \"#utility.yul\":5509:5634   */\n    tag_201:\n        /* \"#utility.yul\":5574:5583   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":5595:5605   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":5592:5628   */\n      iszero\n      tag_165\n      jumpi\n        /* \"#utility.yul\":5608:5626   */\n      tag_165\n      tag_611\n      jump\t// in\n        /* \"#utility.yul\":6479:6901   */\n    tag_612:\n        /* \"#utility.yul\":6568:6569   */\n      0x01\n        /* \"#utility.yul\":6611:6616   */\n      dup2\n        /* \"#utility.yul\":6568:6569   */\n      dup2\n        /* \"#utility.yul\":6625:6895   */\n    tag_670:\n        /* \"#utility.yul\":6646:6653   */\n      dup1\n        /* \"#utility.yul\":6636:6644   */\n      dup6\n        /* \"#utility.yul\":6633:6654   */\n      gt\n        /* \"#utility.yul\":6625:6895   */\n      iszero\n      tag_421\n      jumpi\n        /* \"#utility.yul\":6705:6709   */\n      dup2\n        /* \"#utility.yul\":6701:6702   */\n      0x00\n        /* \"#utility.yul\":6697:6703   */\n      not\n        /* \"#utility.yul\":6693:6710   */\n      div\n        /* \"#utility.yul\":6687:6691   */\n      dup3\n        /* \"#utility.yul\":6684:6711   */\n      gt\n        /* \"#utility.yul\":6681:6734   */\n      iszero\n      tag_674\n      jumpi\n        /* \"#utility.yul\":6714:6732   */\n      tag_674\n      tag_611\n      jump\t// in\n    tag_674:\n        /* \"#utility.yul\":6764:6771   */\n      dup1\n        /* \"#utility.yul\":6754:6762   */\n      dup6\n        /* \"#utility.yul\":6750:6772   */\n      and\n        /* \"#utility.yul\":6747:6802   */\n      iszero\n      tag_675\n      jumpi\n        /* \"#utility.yul\":6784:6800   */\n      swap2\n      dup2\n      mul\n      swap2\n        /* \"#utility.yul\":6747:6802   */\n    tag_675:\n        /* \"#utility.yul\":6863:6885   */\n      swap4\n      dup5\n      shr\n      swap4\n        /* \"#utility.yul\":6823:6838   */\n      swap1\n      dup1\n      mul\n      swap1\n        /* \"#utility.yul\":6625:6895   */\n      jump(tag_670)\n        /* \"#utility.yul\":6906:7712   */\n    tag_613:\n        /* \"#utility.yul\":6955:6960   */\n      0x00\n        /* \"#utility.yul\":6985:6993   */\n      dup3\n        /* \"#utility.yul\":6975:7055   */\n      tag_677\n      jumpi\n      pop\n        /* \"#utility.yul\":7026:7027   */\n      0x01\n        /* \"#utility.yul\":7040:7045   */\n      jump(tag_165)\n        /* \"#utility.yul\":6975:7055   */\n    tag_677:\n        /* \"#utility.yul\":7074:7078   */\n      dup2\n        /* \"#utility.yul\":7064:7140   */\n      tag_678\n      jumpi\n      pop\n        /* \"#utility.yul\":7111:7112   */\n      0x00\n        /* \"#utility.yul\":7125:7130   */\n      jump(tag_165)\n        /* \"#utility.yul\":7064:7140   */\n    tag_678:\n        /* \"#utility.yul\":7156:7160   */\n      dup2\n        /* \"#utility.yul\":7174:7175   */\n      0x01\n        /* \"#utility.yul\":7169:7228   */\n      dup2\n      eq\n      tag_680\n      jumpi\n        /* \"#utility.yul\":7242:7243   */\n      0x02\n        /* \"#utility.yul\":7237:7367   */\n      dup2\n      eq\n      tag_681\n      jumpi\n        /* \"#utility.yul\":7149:7367   */\n      jump(tag_679)\n        /* \"#utility.yul\":7169:7228   */\n    tag_680:\n        /* \"#utility.yul\":7199:7200   */\n      0x01\n        /* \"#utility.yul\":7190:7200   */\n      swap2\n      pop\n        /* \"#utility.yul\":7213:7218   */\n      pop\n      jump(tag_165)\n        /* \"#utility.yul\":7237:7367   */\n    tag_681:\n        /* \"#utility.yul\":7274:7277   */\n      0xff\n        /* \"#utility.yul\":7264:7272   */\n      dup5\n        /* \"#utility.yul\":7261:7278   */\n      gt\n        /* \"#utility.yul\":7258:7301   */\n      iszero\n      tag_683\n      jumpi\n        /* \"#utility.yul\":7281:7299   */\n      tag_683\n      tag_611\n      jump\t// in\n    tag_683:\n      pop\n      pop\n        /* \"#utility.yul\":7337:7338   */\n      0x01\n        /* \"#utility.yul\":7323:7339   */\n      dup3\n      shl\n        /* \"#utility.yul\":7352:7357   */\n      jump(tag_165)\n        /* \"#utility.yul\":7149:7367   */\n    tag_679:\n      pop\n        /* \"#utility.yul\":7451:7453   */\n      0x20\n        /* \"#utility.yul\":7441:7449   */\n      dup4\n        /* \"#utility.yul\":7438:7454   */\n      lt\n        /* \"#utility.yul\":7432:7435   */\n      0x0133\n        /* \"#utility.yul\":7426:7430   */\n      dup4\n        /* \"#utility.yul\":7423:7436   */\n      lt\n        /* \"#utility.yul\":7419:7455   */\n      and\n        /* \"#utility.yul\":7413:7415   */\n      0x4e\n        /* \"#utility.yul\":7403:7411   */\n      dup5\n        /* \"#utility.yul\":7400:7416   */\n      lt\n        /* \"#utility.yul\":7395:7397   */\n      0x0b\n        /* \"#utility.yul\":7389:7393   */\n      dup5\n        /* \"#utility.yul\":7386:7398   */\n      lt\n        /* \"#utility.yul\":7382:7417   */\n      and\n        /* \"#utility.yul\":7379:7456   */\n      or\n        /* \"#utility.yul\":7376:7535   */\n      iszero\n      tag_684\n      jumpi\n      pop\n        /* \"#utility.yul\":7488:7507   */\n      dup2\n      dup2\n      exp\n        /* \"#utility.yul\":7520:7525   */\n      jump(tag_165)\n        /* \"#utility.yul\":7376:7535   */\n    tag_684:\n        /* \"#utility.yul\":7567:7601   */\n      tag_685\n        /* \"#utility.yul\":7592:7600   */\n      dup4\n        /* \"#utility.yul\":7586:7590   */\n      dup4\n        /* \"#utility.yul\":7567:7601   */\n      tag_612\n      jump\t// in\n    tag_685:\n        /* \"#utility.yul\":7637:7643   */\n      dup1\n        /* \"#utility.yul\":7633:7634   */\n      0x00\n        /* \"#utility.yul\":7629:7635   */\n      not\n        /* \"#utility.yul\":7625:7644   */\n      div\n        /* \"#utility.yul\":7616:7623   */\n      dup3\n        /* \"#utility.yul\":7613:7645   */\n      gt\n        /* \"#utility.yul\":7610:7668   */\n      iszero\n      tag_687\n      jumpi\n        /* \"#utility.yul\":7648:7666   */\n      tag_687\n      tag_611\n      jump\t// in\n    tag_687:\n        /* \"#utility.yul\":7686:7706   */\n      mul\n      swap4\n        /* \"#utility.yul\":6906:7712   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7717:7857   */\n    tag_274:\n        /* \"#utility.yul\":7775:7780   */\n      0x00\n        /* \"#utility.yul\":7804:7851   */\n      tag_171\n        /* \"#utility.yul\":7845:7849   */\n      0xff\n        /* \"#utility.yul\":7835:7843   */\n      dup5\n        /* \"#utility.yul\":7831:7850   */\n      and\n        /* \"#utility.yul\":7825:7829   */\n      dup4\n        /* \"#utility.yul\":7804:7851   */\n      tag_613\n      jump\t// in\n        /* \"#utility.yul\":7862:8030   */\n    tag_276:\n        /* \"#utility.yul\":7935:7944   */\n      dup1\n      dup3\n      mul\n        /* \"#utility.yul\":7966:7975   */\n      dup2\n      iszero\n        /* \"#utility.yul\":7983:7998   */\n      dup3\n      dup3\n      div\n        /* \"#utility.yul\":7977:7999   */\n      dup5\n      eq\n        /* \"#utility.yul\":7963:8000   */\n      or\n        /* \"#utility.yul\":7953:8024   */\n      tag_165\n      jumpi\n        /* \"#utility.yul\":8004:8022   */\n      tag_165\n      tag_611\n      jump\t// in\n        /* \"#utility.yul\":11430:11614   */\n    tag_366:\n        /* \"#utility.yul\":11500:11506   */\n      0x00\n        /* \"#utility.yul\":11553:11555   */\n      0x20\n        /* \"#utility.yul\":11541:11550   */\n      dup3\n        /* \"#utility.yul\":11532:11539   */\n      dup5\n        /* \"#utility.yul\":11528:11551   */\n      sub\n        /* \"#utility.yul\":11524:11556   */\n      slt\n        /* \"#utility.yul\":11521:11573   */\n      iszero\n      tag_703\n      jumpi\n        /* \"#utility.yul\":11569:11570   */\n      0x00\n        /* \"#utility.yul\":11566:11567   */\n      dup1\n        /* \"#utility.yul\":11559:11571   */\n      revert\n        /* \"#utility.yul\":11521:11573   */\n    tag_703:\n      pop\n        /* \"#utility.yul\":11592:11608   */\n      mload\n      swap2\n        /* \"#utility.yul\":11430:11614   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14679:14806   */\n    tag_424:\n        /* \"#utility.yul\":14740:14750   */\n      0x4e487b71\n        /* \"#utility.yul\":14735:14738   */\n      0xe0\n        /* \"#utility.yul\":14731:14751   */\n      shl\n        /* \"#utility.yul\":14728:14729   */\n      0x00\n        /* \"#utility.yul\":14721:14752   */\n      mstore\n        /* \"#utility.yul\":14771:14775   */\n      0x32\n        /* \"#utility.yul\":14768:14769   */\n      0x04\n        /* \"#utility.yul\":14761:14776   */\n      mstore\n        /* \"#utility.yul\":14795:14799   */\n      0x24\n        /* \"#utility.yul\":14792:14793   */\n      0x00\n        /* \"#utility.yul\":14785:14800   */\n      revert\n        /* \"#utility.yul\":14811:15218   */\n    tag_431:\n        /* \"#utility.yul\":15013:15015   */\n      0x20\n        /* \"#utility.yul\":14995:15016   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":15052:15054   */\n      0x2b\n        /* \"#utility.yul\":15032:15050   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":15025:15055   */\n      mstore\n        /* \"#utility.yul\":15091:15125   */\n      0x496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069\n        /* \"#utility.yul\":15086:15088   */\n      0x40\n        /* \"#utility.yul\":15071:15089   */\n      dup3\n      add\n        /* \"#utility.yul\":15064:15126   */\n      mstore\n      shl(0xa8, 0x6e697469616c697a696e67)\n        /* \"#utility.yul\":15157:15159   */\n      0x60\n        /* \"#utility.yul\":15142:15160   */\n      dup3\n      add\n        /* \"#utility.yul\":15135:15176   */\n      mstore\n        /* \"#utility.yul\":15208:15211   */\n      0x80\n        /* \"#utility.yul\":15193:15212   */\n      add\n      swap1\n        /* \"#utility.yul\":14811:15218   */\n      jump\t// out\n        /* \"#utility.yul\":15986:16114   */\n    tag_513:\n        /* \"#utility.yul\":16053:16062   */\n      dup2\n      dup2\n      sub\n        /* \"#utility.yul\":16074:16085   */\n      dup2\n      dup2\n      gt\n        /* \"#utility.yul\":16071:16108   */\n      iszero\n      tag_165\n      jumpi\n        /* \"#utility.yul\":16088:16106   */\n      tag_165\n      tag_611\n      jump\t// in\n        /* \"#utility.yul\":16245:16790   */\n    tag_615:\n        /* \"#utility.yul\":16347:16349   */\n      0x1f\n        /* \"#utility.yul\":16342:16345   */\n      dup3\n        /* \"#utility.yul\":16339:16350   */\n      gt\n        /* \"#utility.yul\":16336:16784   */\n      iszero\n      tag_361\n      jumpi\n        /* \"#utility.yul\":16383:16384   */\n      0x00\n        /* \"#utility.yul\":16408:16413   */\n      dup2\n        /* \"#utility.yul\":16404:16406   */\n      dup2\n        /* \"#utility.yul\":16397:16414   */\n      mstore\n        /* \"#utility.yul\":16453:16457   */\n      0x20\n        /* \"#utility.yul\":16449:16451   */\n      dup2\n        /* \"#utility.yul\":16439:16458   */\n      keccak256\n        /* \"#utility.yul\":16523:16525   */\n      0x1f\n        /* \"#utility.yul\":16511:16521   */\n      dup6\n        /* \"#utility.yul\":16507:16526   */\n      add\n        /* \"#utility.yul\":16504:16505   */\n      0x05\n        /* \"#utility.yul\":16500:16527   */\n      shr\n        /* \"#utility.yul\":16494:16498   */\n      dup2\n        /* \"#utility.yul\":16490:16528   */\n      add\n        /* \"#utility.yul\":16559:16563   */\n      0x20\n        /* \"#utility.yul\":16547:16557   */\n      dup7\n        /* \"#utility.yul\":16544:16564   */\n      lt\n        /* \"#utility.yul\":16541:16588   */\n      iszero\n      tag_722\n      jumpi\n      pop\n        /* \"#utility.yul\":16582:16586   */\n      dup1\n        /* \"#utility.yul\":16541:16588   */\n    tag_722:\n        /* \"#utility.yul\":16637:16639   */\n      0x1f\n        /* \"#utility.yul\":16632:16635   */\n      dup6\n        /* \"#utility.yul\":16628:16640   */\n      add\n        /* \"#utility.yul\":16625:16626   */\n      0x05\n        /* \"#utility.yul\":16621:16641   */\n      shr\n        /* \"#utility.yul\":16615:16619   */\n      dup3\n        /* \"#utility.yul\":16611:16642   */\n      add\n        /* \"#utility.yul\":16601:16642   */\n      swap2\n      pop\n        /* \"#utility.yul\":16692:16774   */\n    tag_723:\n        /* \"#utility.yul\":16710:16712   */\n      dup2\n        /* \"#utility.yul\":16703:16708   */\n      dup2\n        /* \"#utility.yul\":16700:16713   */\n      lt\n        /* \"#utility.yul\":16692:16774   */\n      iszero\n      tag_725\n      jumpi\n        /* \"#utility.yul\":16755:16772   */\n      dup3\n      dup2\n      sstore\n        /* \"#utility.yul\":16736:16737   */\n      0x01\n        /* \"#utility.yul\":16725:16738   */\n      add\n        /* \"#utility.yul\":16692:16774   */\n      jump(tag_723)\n    tag_725:\n        /* \"#utility.yul\":16696:16699   */\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":16245:16790   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16966:18318   */\n    tag_522:\n        /* \"#utility.yul\":17092:17095   */\n      dup2\n        /* \"#utility.yul\":17086:17096   */\n      mload\n        /* \"#utility.yul\":17119:17137   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":17111:17117   */\n      dup2\n        /* \"#utility.yul\":17108:17138   */\n      gt\n        /* \"#utility.yul\":17105:17161   */\n      iszero\n      tag_729\n      jumpi\n        /* \"#utility.yul\":17141:17159   */\n      tag_729\n      tag_193\n      jump\t// in\n    tag_729:\n        /* \"#utility.yul\":17170:17267   */\n      tag_730\n        /* \"#utility.yul\":17260:17266   */\n      dup2\n        /* \"#utility.yul\":17220:17258   */\n      tag_731\n        /* \"#utility.yul\":17252:17256   */\n      dup5\n        /* \"#utility.yul\":17246:17257   */\n      sload\n        /* \"#utility.yul\":17220:17258   */\n      tag_160\n      jump\t// in\n    tag_731:\n        /* \"#utility.yul\":17214:17218   */\n      dup5\n        /* \"#utility.yul\":17170:17267   */\n      tag_615\n      jump\t// in\n    tag_730:\n        /* \"#utility.yul\":17322:17326   */\n      0x20\n      dup1\n        /* \"#utility.yul\":17386:17388   */\n      0x1f\n        /* \"#utility.yul\":17375:17389   */\n      dup4\n      gt\n        /* \"#utility.yul\":17403:17404   */\n      0x01\n        /* \"#utility.yul\":17398:18061   */\n      dup2\n      eq\n      tag_733\n      jumpi\n        /* \"#utility.yul\":18105:18106   */\n      0x00\n        /* \"#utility.yul\":18122:18128   */\n      dup5\n        /* \"#utility.yul\":18119:18208   */\n      iszero\n      tag_734\n      jumpi\n      pop\n        /* \"#utility.yul\":18174:18193   */\n      dup6\n      dup4\n      add\n        /* \"#utility.yul\":18168:18194   */\n      mload\n        /* \"#utility.yul\":18119:18208   */\n    tag_734:\n      not(0x00)\n        /* \"#utility.yul\":16923:16924   */\n      0x03\n        /* \"#utility.yul\":16919:16930   */\n      dup7\n      swap1\n      shl\n        /* \"#utility.yul\":16915:16939   */\n      shr\n        /* \"#utility.yul\":16911:16940   */\n      not\n        /* \"#utility.yul\":16901:16941   */\n      and\n        /* \"#utility.yul\":16947:16948   */\n      0x01\n        /* \"#utility.yul\":16943:16954   */\n      dup6\n      swap1\n      shl\n        /* \"#utility.yul\":16898:16955   */\n      or\n        /* \"#utility.yul\":18221:18302   */\n      dup6\n      sstore\n        /* \"#utility.yul\":17368:18312   */\n      jump(tag_725)\n        /* \"#utility.yul\":17398:18061   */\n    tag_733:\n        /* \"#utility.yul\":16192:16193   */\n      0x00\n        /* \"#utility.yul\":16185:16199   */\n      dup6\n      dup2\n      mstore\n        /* \"#utility.yul\":16229:16233   */\n      0x20\n        /* \"#utility.yul\":16216:16234   */\n      dup2\n      keccak256\n      not(0x1f)\n        /* \"#utility.yul\":17434:17454   */\n      dup7\n      and\n      swap2\n        /* \"#utility.yul\":17552:17788   */\n    tag_737:\n        /* \"#utility.yul\":17566:17573   */\n      dup3\n        /* \"#utility.yul\":17563:17564   */\n      dup2\n        /* \"#utility.yul\":17560:17574   */\n      lt\n        /* \"#utility.yul\":17552:17788   */\n      iszero\n      tag_739\n      jumpi\n        /* \"#utility.yul\":17655:17674   */\n      dup9\n      dup7\n      add\n        /* \"#utility.yul\":17649:17675   */\n      mload\n        /* \"#utility.yul\":17634:17676   */\n      dup3\n      sstore\n        /* \"#utility.yul\":17747:17774   */\n      swap5\n      dup5\n      add\n      swap5\n        /* \"#utility.yul\":17715:17716   */\n      0x01\n        /* \"#utility.yul\":17703:17717   */\n      swap1\n      swap2\n      add\n      swap1\n        /* \"#utility.yul\":17582:17601   */\n      dup5\n      add\n        /* \"#utility.yul\":17552:17788   */\n      jump(tag_737)\n    tag_739:\n        /* \"#utility.yul\":17556:17559   */\n      pop\n        /* \"#utility.yul\":17816:17822   */\n      dup6\n        /* \"#utility.yul\":17807:17814   */\n      dup3\n        /* \"#utility.yul\":17804:17823   */\n      lt\n        /* \"#utility.yul\":17801:18002   */\n      iszero\n      tag_740\n      jumpi\n        /* \"#utility.yul\":17877:17896   */\n      dup8\n      dup6\n      add\n        /* \"#utility.yul\":17871:17897   */\n      mload\n      not(0x00)\n        /* \"#utility.yul\":17960:17961   */\n      0x03\n        /* \"#utility.yul\":17956:17970   */\n      dup9\n      swap1\n      shl\n        /* \"#utility.yul\":17972:17975   */\n      0xf8\n        /* \"#utility.yul\":17952:17976   */\n      and\n        /* \"#utility.yul\":17948:17985   */\n      shr\n        /* \"#utility.yul\":17944:17986   */\n      not\n        /* \"#utility.yul\":17929:17987   */\n      and\n        /* \"#utility.yul\":17914:17988   */\n      dup2\n      sstore\n        /* \"#utility.yul\":17801:18002   */\n    tag_740:\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":18048:18049   */\n      0x01\n        /* \"#utility.yul\":18032:18046   */\n      swap1\n      dup2\n      shl\n        /* \"#utility.yul\":18028:18050   */\n      add\n        /* \"#utility.yul\":18015:18051   */\n      swap1\n      sstore\n      pop\n        /* \"#utility.yul\":16966:18318   */\n      jump\t// out\n        /* \"#utility.yul\":19075:19362   */\n    tag_563:\n        /* \"#utility.yul\":19204:19207   */\n      0x00\n        /* \"#utility.yul\":19242:19248   */\n      dup3\n        /* \"#utility.yul\":19236:19249   */\n      mload\n        /* \"#utility.yul\":19258:19324   */\n      tag_744\n        /* \"#utility.yul\":19317:19323   */\n      dup2\n        /* \"#utility.yul\":19312:19315   */\n      dup5\n        /* \"#utility.yul\":19305:19309   */\n      0x20\n        /* \"#utility.yul\":19297:19303   */\n      dup8\n        /* \"#utility.yul\":19293:19310   */\n      add\n        /* \"#utility.yul\":19258:19324   */\n      tag_609\n      jump\t// in\n    tag_744:\n        /* \"#utility.yul\":19340:19356   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":19075:19362   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":19367:19584   */\n    tag_572:\n        /* \"#utility.yul\":19407:19408   */\n      0x00\n        /* \"#utility.yul\":19433:19434   */\n      dup3\n        /* \"#utility.yul\":19423:19555   */\n      tag_746\n      jumpi\n        /* \"#utility.yul\":19477:19487   */\n      0x4e487b71\n        /* \"#utility.yul\":19472:19475   */\n      0xe0\n        /* \"#utility.yul\":19468:19488   */\n      shl\n        /* \"#utility.yul\":19465:19466   */\n      0x00\n        /* \"#utility.yul\":19458:19489   */\n      mstore\n        /* \"#utility.yul\":19512:19516   */\n      0x12\n        /* \"#utility.yul\":19509:19510   */\n      0x04\n        /* \"#utility.yul\":19502:19517   */\n      mstore\n        /* \"#utility.yul\":19540:19544   */\n      0x24\n        /* \"#utility.yul\":19537:19538   */\n      0x00\n        /* \"#utility.yul\":19530:19545   */\n      revert\n        /* \"#utility.yul\":19423:19555   */\n    tag_746:\n      pop\n        /* \"#utility.yul\":19569:19578   */\n      div\n      swap1\n        /* \"#utility.yul\":19367:19584   */\n      jump\t// out\n    stop\n    data_75b20eef8615de99c108b05f0dbda081c91897128caa336d75dffb97c4132b4d 360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\n    data_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398 416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564\n\n    auxdata: 0xa2646970667358221220e998b0591bc15c686d6dea8bfcf04d2db1fe35cbe25211987ec7f6ac98c3ca2f64736f6c63430008110033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_3592": {
									"entryPoint": null,
									"id": 3592,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_disableInitializers_670": {
									"entryPoint": 34,
									"id": 670,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:608:19",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:19",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "188:229:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "205:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "216:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "198:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "198:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "198:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "239:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "250:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "235:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "235:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "255:2:19",
																		"type": "",
																		"value": "39"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "228:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "228:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "228:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "278:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "289:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "274:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "274:18:19"
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320696e697469",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "294:34:19",
																		"type": "",
																		"value": "Initializable: contract is initi"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "267:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "267:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "267:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "349:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "360:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "345:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "345:18:19"
																	},
																	{
																		"hexValue": "616c697a696e67",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "365:9:19",
																		"type": "",
																		"value": "alizing"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "338:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "338:37:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "338:37:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "384:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "396:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "407:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "392:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "392:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "384:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "165:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "179:4:19",
														"type": ""
													}
												],
												"src": "14:403:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "519:87:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "529:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "541:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "552:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "537:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "537:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "529:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "571:9:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "586:6:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "594:4:19",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "582:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "582:17:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "564:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "564:36:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "564:36:19"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "488:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "499:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "510:4:19",
														"type": ""
													}
												],
												"src": "422:184:19"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"Initializable: contract is initi\")\n        mstore(add(headStart, 96), \"alizing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n}",
									"id": 19,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516121fe6200011a600039600081816105b1015281816105fa0152818161074601528181610786015261081501526121fe6000f3fe60806040526004361061019c5760003560e01c80635c975abb116100ec57806395d89b411161008a578063a457c2d711610064578063a457c2d714610455578063a9059cbb14610475578063dd62ed3e14610495578063f2fde38b146104b557600080fd5b806395d89b411461040b5780639711715a14610420578063981b24d01461043557600080fd5b806379cc6790116100c657806379cc6790146103995780638129fc1c146103b95780638456cb59146103ce5780638da5cb5b146103e357600080fd5b80635c975abb1461033657806370a082311461034e578063715018a61461038457600080fd5b8063395093511161015957806342966c681161013357806342966c68146102ce5780634ee2cd7e146102ee5780634f1ef2861461030e57806352d1902d1461032157600080fd5b806339509351146102795780633f4ba83a1461029957806340c10f19146102ae57600080fd5b806306fdde03146101a1578063095ea7b3146101cc57806318160ddd146101fc57806323b872dd1461021b578063313ce5671461023b5780633659cfe614610257575b600080fd5b3480156101ad57600080fd5b506101b66104d5565b6040516101c39190611bbc565b60405180910390f35b3480156101d857600080fd5b506101ec6101e7366004611c06565b610567565b60405190151581526020016101c3565b34801561020857600080fd5b506035545b6040519081526020016101c3565b34801561022757600080fd5b506101ec610236366004611c30565b610581565b34801561024757600080fd5b50604051601281526020016101c3565b34801561026357600080fd5b50610277610272366004611c6c565b6105a7565b005b34801561028557600080fd5b506101ec610294366004611c06565b61068f565b3480156102a557600080fd5b506102776106b1565b3480156102ba57600080fd5b506102776102c9366004611c06565b6106c3565b3480156102da57600080fd5b506102776102e9366004611c87565b6106d9565b3480156102fa57600080fd5b5061020d610309366004611c06565b6106e3565b61027761031c366004611cb6565b61073c565b34801561032d57600080fd5b5061020d610808565b34801561034257600080fd5b5060fb5460ff166101ec565b34801561035a57600080fd5b5061020d610369366004611c6c565b6001600160a01b031660009081526033602052604090205490565b34801561039057600080fd5b506102776108bb565b3480156103a557600080fd5b506102776103b4366004611c06565b6108cd565b3480156103c557600080fd5b506102776108e2565b3480156103da57600080fd5b50610277610a80565b3480156103ef57600080fd5b5060c9546040516001600160a01b0390911681526020016101c3565b34801561041757600080fd5b506101b6610a90565b34801561042c57600080fd5b50610277610a9f565b34801561044157600080fd5b5061020d610450366004611c87565b610aaf565b34801561046157600080fd5b506101ec610470366004611c06565b610ada565b34801561048157600080fd5b506101ec610490366004611c06565b610b60565b3480156104a157600080fd5b5061020d6104b0366004611d78565b610b6e565b3480156104c157600080fd5b506102776104d0366004611c6c565b610b99565b6060603680546104e490611dab565b80601f016020809104026020016040519081016040528092919081815260200182805461051090611dab565b801561055d5780601f106105325761010080835404028352916020019161055d565b820191906000526020600020905b81548152906001019060200180831161054057829003601f168201915b5050505050905090565b600033610575818585610c0f565b60019150505b92915050565b60003361058f858285610d33565b61059a858585610dad565b60019150505b9392505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105f85760405162461bcd60e51b81526004016105ef90611de5565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610641600080516020612182833981519152546001600160a01b031690565b6001600160a01b0316146106675760405162461bcd60e51b81526004016105ef90611e31565b61067081610f63565b6040805160008082526020820190925261068c91839190610f6b565b50565b6000336105758185856106a28383610b6e565b6106ac9190611e93565b610c0f565b6106b96110db565b6106c1611135565b565b6106cb6110db565b6106d58282611187565b5050565b61068c3382611254565b6001600160a01b03821660009081526097602052604081208190819061070a908590611394565b9150915081610731576001600160a01b038516600090815260336020526040902054610733565b805b95945050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107845760405162461bcd60e51b81526004016105ef90611de5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107cd600080516020612182833981519152546001600160a01b031690565b6001600160a01b0316146107f35760405162461bcd60e51b81526004016105ef90611e31565b6107fc82610f63565b6106d582826001610f6b565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108a85760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016105ef565b5060008051602061218283398151915290565b6108c36110db565b6106c16000611490565b6108d8823383610d33565b6106d58282611254565b600054610100900460ff16158080156109025750600054600160ff909116105b8061091c5750303b15801561091c575060005460ff166001145b61097f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105ef565b6000805460ff1916600117905580156109a2576000805461ff0019166101001790555b6109ed6040518060400160405280600c81526020016b42656172204e6574776f726b60a01b8152506040518060400160405280600581526020016442524e4b4360d81b8152506114e2565b6109f5611513565b6109fd611513565b610a0561153a565b610a0d611569565b610a15611513565b610a3833610a256012600a611f82565b610a33906305f5e100611f91565b611187565b801561068c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b610a886110db565b6106c1611598565b6060603780546104e490611dab565b610aa76110db565b61068c6115d5565b6000806000610abf846098611394565b9150915081610ad057603554610ad2565b805b949350505050565b60003381610ae88286610b6e565b905083811015610b485760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016105ef565b610b558286868403610c0f565b506001949350505050565b600033610575818585610dad565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b610ba16110db565b6001600160a01b038116610c065760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105ef565b61068c81611490565b6001600160a01b038316610c715760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105ef565b6001600160a01b038216610cd25760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105ef565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610d3f8484610b6e565b90506000198114610da75781811015610d9a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016105ef565b610da78484848403610c0f565b50505050565b6001600160a01b038316610e115760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105ef565b6001600160a01b038216610e735760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105ef565b610e7e83838361162f565b6001600160a01b03831660009081526033602052604090205481811015610ef65760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016105ef565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610f569086815260200190565b60405180910390a3610da7565b61068c6110db565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610fa357610f9e83611642565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610ffd575060408051601f3d908101601f19168201909252610ffa91810190611fa8565b60015b6110605760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016105ef565b60008051602061218283398151915281146110cf5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016105ef565b50610f9e8383836116de565b60c9546001600160a01b031633146106c15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105ef565b61113d611703565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0382166111dd5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016105ef565b6111e96000838361162f565b80603560008282546111fb9190611e93565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b0382166112b45760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016105ef565b6112c08260008361162f565b6001600160a01b038216600090815260336020526040902054818110156113345760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016105ef565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b600080600084116113e05760405162461bcd60e51b815260206004820152601660248201527504552433230536e617073686f743a20696420697320360541b60448201526064016105ef565b6113e861174c565b8411156114375760405162461bcd60e51b815260206004820152601d60248201527f4552433230536e617073686f743a206e6f6e6578697374656e7420696400000060448201526064016105ef565b6000611443848661175c565b8454909150810361145b576000809250925050611489565b600184600101828154811061147257611472611fc1565b90600052602060002001549250925050611489565b505b9250929050565b60c980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166115095760405162461bcd60e51b81526004016105ef90611fd7565b6106d58282611809565b600054610100900460ff166106c15760405162461bcd60e51b81526004016105ef90611fd7565b600054610100900460ff166115615760405162461bcd60e51b81526004016105ef90611fd7565b6106c1611849565b600054610100900460ff166115905760405162461bcd60e51b81526004016105ef90611fd7565b6106c1611879565b6115a06118ac565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861116a3390565b60006115e5609a80546001019055565b60006115ef61174c565b90507f8030e83b04d87bef53480e26263266d6ca66863aa8506aca6f2559d18aa1cb678160405161162291815260200190565b60405180910390a1919050565b6116376118ac565b610f9e8383836118f2565b6001600160a01b0381163b6116af5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016105ef565b60008051602061218283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6116e78361193a565b6000825111806116f45750805b15610f9e57610da7838361197a565b60fb5460ff166106c15760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105ef565b6000611757609a5490565b905090565b8154600090810361176f5750600061057b565b82546000905b808210156117bc5760006117898383611a65565b600087815260209020909150859082015411156117a8578091506117b6565b6117b3816001611e93565b92505b50611775565b6000821180156117e85750836117e5866117d7600186612022565b600091825260209091200190565b54145b15611801576117f8600183612022565b9250505061057b565b50905061057b565b600054610100900460ff166118305760405162461bcd60e51b81526004016105ef90611fd7565b603661183c8382612083565b506037610f9e8282612083565b600054610100900460ff166118705760405162461bcd60e51b81526004016105ef90611fd7565b6106c133611490565b600054610100900460ff166118a05760405162461bcd60e51b81526004016105ef90611fd7565b60fb805460ff19169055565b60fb5460ff16156106c15760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105ef565b6001600160a01b0383166119115761190982611a80565b610f9e611ab3565b6001600160a01b0382166119285761190983611a80565b61193183611a80565b610f9e82611a80565b61194381611642565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6119e25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016105ef565b600080846001600160a01b0316846040516119fd9190612143565b600060405180830381855af49150503d8060008114611a38576040519150601f19603f3d011682016040523d82523d6000602084013e611a3d565b606091505b509150915061073382826040518060600160405280602781526020016121a260279139611ac1565b6000611a74600284841861215f565b6105a090848416611e93565b6001600160a01b038116600090815260976020908152604080832060339092529091205461068c9190611ada565b611ada565b6106c16098611aae60355490565b60608315611ad05750816105a0565b6105a08383611b24565b6000611ae461174c565b905080611af084611b4e565b1015610f9e578254600180820185556000858152602080822090930193909355938401805494850181558252902090910155565b815115611b345781518083602001fd5b8060405162461bcd60e51b81526004016105ef9190611bbc565b80546000908103611b6157506000919050565b81548290611b7190600190612022565b81548110611b8157611b81611fc1565b90600052602060002001549050919050565b919050565b60005b83811015611bb3578181015183820152602001611b9b565b50506000910152565b6020815260008251806020840152611bdb816040850160208701611b98565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114611b9357600080fd5b60008060408385031215611c1957600080fd5b611c2283611bef565b946020939093013593505050565b600080600060608486031215611c4557600080fd5b611c4e84611bef565b9250611c5c60208501611bef565b9150604084013590509250925092565b600060208284031215611c7e57600080fd5b6105a082611bef565b600060208284031215611c9957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215611cc957600080fd5b611cd283611bef565b9150602083013567ffffffffffffffff80821115611cef57600080fd5b818501915085601f830112611d0357600080fd5b813581811115611d1557611d15611ca0565b604051601f8201601f19908116603f01168101908382118183101715611d3d57611d3d611ca0565b81604052828152886020848701011115611d5657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060408385031215611d8b57600080fd5b611d9483611bef565b9150611da260208401611bef565b90509250929050565b600181811c90821680611dbf57607f821691505b602082108103611ddf57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561057b5761057b611e7d565b600181815b80851115611487578160001904821115611ec757611ec7611e7d565b80851615611ed457918102915b93841c9390800290611eab565b600082611ef05750600161057b565b81611efd5750600061057b565b8160018114611f135760028114611f1d57611f39565b600191505061057b565b60ff841115611f2e57611f2e611e7d565b50506001821b61057b565b5060208310610133831016604e8410600b8410161715611f5c575081810a61057b565b611f668383611ea6565b8060001904821115611f7a57611f7a611e7d565b029392505050565b60006105a060ff841683611ee1565b808202811582820484141761057b5761057b611e7d565b600060208284031215611fba57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b8181038181111561057b5761057b611e7d565b601f821115610f9e57600081815260208120601f850160051c8101602086101561205c5750805b601f850160051c820191505b8181101561207b57828155600101612068565b505050505050565b815167ffffffffffffffff81111561209d5761209d611ca0565b6120b1816120ab8454611dab565b84612035565b602080601f8311600181146120e657600084156120ce5750858301515b600019600386901b1c1916600185901b17855561207b565b600085815260208120601f198616915b82811015612115578886015182559484019460019091019084016120f6565b50858210156121335787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008251612155818460208701611b98565b9190910192915050565b60008261217c57634e487b7160e01b600052601260045260246000fd5b50049056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e998b0591bc15c686d6dea8bfcf04d2db1fe35cbe25211987ec7f6ac98c3ca2f64736f6c63430008110033",
							"opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D PUSH2 0x22 JUMP JUMPDEST PUSH2 0xE2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x8E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x616C697A696E67 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 DUP2 AND LT ISZERO PUSH2 0xE0 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x21FE PUSH3 0x11A PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x5B1 ADD MSTORE DUP2 DUP2 PUSH2 0x5FA ADD MSTORE DUP2 DUP2 PUSH2 0x746 ADD MSTORE DUP2 DUP2 PUSH2 0x786 ADD MSTORE PUSH2 0x815 ADD MSTORE PUSH2 0x21FE PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x19C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5C975ABB GT PUSH2 0xEC JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x455 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x475 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x495 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x40B JUMPI DUP1 PUSH4 0x9711715A EQ PUSH2 0x420 JUMPI DUP1 PUSH4 0x981B24D0 EQ PUSH2 0x435 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x79CC6790 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x399 JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x3B9 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x3CE JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x336 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x34E JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x384 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x39509351 GT PUSH2 0x159 JUMPI DUP1 PUSH4 0x42966C68 GT PUSH2 0x133 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x2CE JUMPI DUP1 PUSH4 0x4EE2CD7E EQ PUSH2 0x2EE JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x30E JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x321 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x39509351 EQ PUSH2 0x279 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x299 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x2AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1CC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x21B JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x23B JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x257 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B6 PUSH2 0x4D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C3 SWAP2 SWAP1 PUSH2 0x1BBC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EC PUSH2 0x1E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C06 JUMP JUMPDEST PUSH2 0x567 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x208 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x227 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EC PUSH2 0x236 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C30 JUMP JUMPDEST PUSH2 0x581 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x247 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x272 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C6C JUMP JUMPDEST PUSH2 0x5A7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x285 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EC PUSH2 0x294 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C06 JUMP JUMPDEST PUSH2 0x68F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x6B1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x2C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C06 JUMP JUMPDEST PUSH2 0x6C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x2E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C87 JUMP JUMPDEST PUSH2 0x6D9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20D PUSH2 0x309 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C06 JUMP JUMPDEST PUSH2 0x6E3 JUMP JUMPDEST PUSH2 0x277 PUSH2 0x31C CALLDATASIZE PUSH1 0x4 PUSH2 0x1CB6 JUMP JUMPDEST PUSH2 0x73C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20D PUSH2 0x808 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x342 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFB SLOAD PUSH1 0xFF AND PUSH2 0x1EC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20D PUSH2 0x369 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C6C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x390 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x8BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x3B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C06 JUMP JUMPDEST PUSH2 0x8CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x8E2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0xA80 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xC9 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B6 PUSH2 0xA90 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0xA9F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x441 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20D PUSH2 0x450 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C87 JUMP JUMPDEST PUSH2 0xAAF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x461 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EC PUSH2 0x470 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C06 JUMP JUMPDEST PUSH2 0xADA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x481 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EC PUSH2 0x490 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C06 JUMP JUMPDEST PUSH2 0xB60 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20D PUSH2 0x4B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D78 JUMP JUMPDEST PUSH2 0xB6E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x4D0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C6C JUMP JUMPDEST PUSH2 0xB99 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x4E4 SWAP1 PUSH2 0x1DAB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x510 SWAP1 PUSH2 0x1DAB JUMP JUMPDEST DUP1 ISZERO PUSH2 0x55D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x532 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x55D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x540 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x575 DUP2 DUP6 DUP6 PUSH2 0xC0F JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x58F DUP6 DUP3 DUP6 PUSH2 0xD33 JUMP JUMPDEST PUSH2 0x59A DUP6 DUP6 DUP6 PUSH2 0xDAD JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x5F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP1 PUSH2 0x1DE5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x641 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2182 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x667 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP1 PUSH2 0x1E31 JUMP JUMPDEST PUSH2 0x670 DUP2 PUSH2 0xF63 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x68C SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0xF6B JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x575 DUP2 DUP6 DUP6 PUSH2 0x6A2 DUP4 DUP4 PUSH2 0xB6E JUMP JUMPDEST PUSH2 0x6AC SWAP2 SWAP1 PUSH2 0x1E93 JUMP JUMPDEST PUSH2 0xC0F JUMP JUMPDEST PUSH2 0x6B9 PUSH2 0x10DB JUMP JUMPDEST PUSH2 0x6C1 PUSH2 0x1135 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x6CB PUSH2 0x10DB JUMP JUMPDEST PUSH2 0x6D5 DUP3 DUP3 PUSH2 0x1187 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x68C CALLER DUP3 PUSH2 0x1254 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 DUP2 SWAP1 PUSH2 0x70A SWAP1 DUP6 SWAP1 PUSH2 0x1394 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x731 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x733 JUMP JUMPDEST DUP1 JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x784 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP1 PUSH2 0x1DE5 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7CD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2182 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7F3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP1 PUSH2 0x1E31 JUMP JUMPDEST PUSH2 0x7FC DUP3 PUSH2 0xF63 JUMP JUMPDEST PUSH2 0x6D5 DUP3 DUP3 PUSH1 0x1 PUSH2 0xF6B JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x8A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2182 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x8C3 PUSH2 0x10DB JUMP JUMPDEST PUSH2 0x6C1 PUSH1 0x0 PUSH2 0x1490 JUMP JUMPDEST PUSH2 0x8D8 DUP3 CALLER DUP4 PUSH2 0xD33 JUMP JUMPDEST PUSH2 0x6D5 DUP3 DUP3 PUSH2 0x1254 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x902 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x91C JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x91C JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x97F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x9A2 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x9ED PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD PUSH12 0x42656172204E6574776F726B PUSH1 0xA0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x42524E4B43 PUSH1 0xD8 SHL DUP2 MSTORE POP PUSH2 0x14E2 JUMP JUMPDEST PUSH2 0x9F5 PUSH2 0x1513 JUMP JUMPDEST PUSH2 0x9FD PUSH2 0x1513 JUMP JUMPDEST PUSH2 0xA05 PUSH2 0x153A JUMP JUMPDEST PUSH2 0xA0D PUSH2 0x1569 JUMP JUMPDEST PUSH2 0xA15 PUSH2 0x1513 JUMP JUMPDEST PUSH2 0xA38 CALLER PUSH2 0xA25 PUSH1 0x12 PUSH1 0xA PUSH2 0x1F82 JUMP JUMPDEST PUSH2 0xA33 SWAP1 PUSH4 0x5F5E100 PUSH2 0x1F91 JUMP JUMPDEST PUSH2 0x1187 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x68C JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0xA88 PUSH2 0x10DB JUMP JUMPDEST PUSH2 0x6C1 PUSH2 0x1598 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x4E4 SWAP1 PUSH2 0x1DAB JUMP JUMPDEST PUSH2 0xAA7 PUSH2 0x10DB JUMP JUMPDEST PUSH2 0x68C PUSH2 0x15D5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xABF DUP5 PUSH1 0x98 PUSH2 0x1394 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0xAD0 JUMPI PUSH1 0x35 SLOAD PUSH2 0xAD2 JUMP JUMPDEST DUP1 JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0xAE8 DUP3 DUP7 PUSH2 0xB6E JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xB48 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH2 0xB55 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0xC0F JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x575 DUP2 DUP6 DUP6 PUSH2 0xDAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xBA1 PUSH2 0x10DB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xC06 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH2 0x68C DUP2 PUSH2 0x1490 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xC71 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xCD2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD3F DUP5 DUP5 PUSH2 0xB6E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0xDA7 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xD9A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH2 0xDA7 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0xC0F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xE11 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xE73 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH2 0xE7E DUP4 DUP4 DUP4 PUSH2 0x162F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xEF6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0xF56 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xDA7 JUMP JUMPDEST PUSH2 0x68C PUSH2 0x10DB JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xFA3 JUMPI PUSH2 0xF9E DUP4 PUSH2 0x1642 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xFFD JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xFFA SWAP2 DUP2 ADD SWAP1 PUSH2 0x1FA8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1060 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2182 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0x10CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST POP PUSH2 0xF9E DUP4 DUP4 DUP4 PUSH2 0x16DE JUMP JUMPDEST PUSH1 0xC9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH2 0x113D PUSH2 0x1703 JUMP JUMPDEST PUSH1 0xFB DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x11DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH2 0x11E9 PUSH1 0x0 DUP4 DUP4 PUSH2 0x162F JUMP JUMPDEST DUP1 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x11FB SWAP2 SWAP1 PUSH2 0x1E93 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x12B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH2 0x12C0 DUP3 PUSH1 0x0 DUP4 PUSH2 0x162F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1334 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE PUSH1 0x35 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE MLOAD DUP6 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 GT PUSH2 0x13E0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x4552433230536E617073686F743A206964206973203 PUSH1 0x54 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH2 0x13E8 PUSH2 0x174C JUMP JUMPDEST DUP5 GT ISZERO PUSH2 0x1437 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433230536E617073686F743A206E6F6E6578697374656E74206964000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1443 DUP5 DUP7 PUSH2 0x175C JUMP JUMPDEST DUP5 SLOAD SWAP1 SWAP2 POP DUP2 SUB PUSH2 0x145B JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x1489 JUMP JUMPDEST PUSH1 0x1 DUP5 PUSH1 0x1 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1472 JUMPI PUSH2 0x1472 PUSH2 0x1FC1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP3 POP SWAP3 POP POP PUSH2 0x1489 JUMP JUMPDEST POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0xC9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1509 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP1 PUSH2 0x1FD7 JUMP JUMPDEST PUSH2 0x6D5 DUP3 DUP3 PUSH2 0x1809 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x6C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP1 PUSH2 0x1FD7 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1561 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP1 PUSH2 0x1FD7 JUMP JUMPDEST PUSH2 0x6C1 PUSH2 0x1849 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1590 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP1 PUSH2 0x1FD7 JUMP JUMPDEST PUSH2 0x6C1 PUSH2 0x1879 JUMP JUMPDEST PUSH2 0x15A0 PUSH2 0x18AC JUMP JUMPDEST PUSH1 0xFB DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x116A CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15E5 PUSH1 0x9A DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15EF PUSH2 0x174C JUMP JUMPDEST SWAP1 POP PUSH32 0x8030E83B04D87BEF53480E26263266D6CA66863AA8506ACA6F2559D18AA1CB67 DUP2 PUSH1 0x40 MLOAD PUSH2 0x1622 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1637 PUSH2 0x18AC JUMP JUMPDEST PUSH2 0xF9E DUP4 DUP4 DUP4 PUSH2 0x18F2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0x16AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2182 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x16E7 DUP4 PUSH2 0x193A JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x16F4 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0xF9E JUMPI PUSH2 0xDA7 DUP4 DUP4 PUSH2 0x197A JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0xFF AND PUSH2 0x6C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1757 PUSH1 0x9A SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 DUP2 SUB PUSH2 0x176F JUMPI POP PUSH1 0x0 PUSH2 0x57B JUMP JUMPDEST DUP3 SLOAD PUSH1 0x0 SWAP1 JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x17BC JUMPI PUSH1 0x0 PUSH2 0x1789 DUP4 DUP4 PUSH2 0x1A65 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 SWAP1 SWAP2 POP DUP6 SWAP1 DUP3 ADD SLOAD GT ISZERO PUSH2 0x17A8 JUMPI DUP1 SWAP2 POP PUSH2 0x17B6 JUMP JUMPDEST PUSH2 0x17B3 DUP2 PUSH1 0x1 PUSH2 0x1E93 JUMP JUMPDEST SWAP3 POP JUMPDEST POP PUSH2 0x1775 JUMP JUMPDEST PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x17E8 JUMPI POP DUP4 PUSH2 0x17E5 DUP7 PUSH2 0x17D7 PUSH1 0x1 DUP7 PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SWAP1 JUMP JUMPDEST SLOAD EQ JUMPDEST ISZERO PUSH2 0x1801 JUMPI PUSH2 0x17F8 PUSH1 0x1 DUP4 PUSH2 0x2022 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x57B JUMP JUMPDEST POP SWAP1 POP PUSH2 0x57B JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1830 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP1 PUSH2 0x1FD7 JUMP JUMPDEST PUSH1 0x36 PUSH2 0x183C DUP4 DUP3 PUSH2 0x2083 JUMP JUMPDEST POP PUSH1 0x37 PUSH2 0xF9E DUP3 DUP3 PUSH2 0x2083 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1870 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP1 PUSH2 0x1FD7 JUMP JUMPDEST PUSH2 0x6C1 CALLER PUSH2 0x1490 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x18A0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP1 PUSH2 0x1FD7 JUMP JUMPDEST PUSH1 0xFB DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x6C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1911 JUMPI PUSH2 0x1909 DUP3 PUSH2 0x1A80 JUMP JUMPDEST PUSH2 0xF9E PUSH2 0x1AB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1928 JUMPI PUSH2 0x1909 DUP4 PUSH2 0x1A80 JUMP JUMPDEST PUSH2 0x1931 DUP4 PUSH2 0x1A80 JUMP JUMPDEST PUSH2 0xF9E DUP3 PUSH2 0x1A80 JUMP JUMPDEST PUSH2 0x1943 DUP2 PUSH2 0x1642 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE PUSH2 0x19E2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x19FD SWAP2 SWAP1 PUSH2 0x2143 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1A38 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A3D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x733 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x21A2 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x1AC1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A74 PUSH1 0x2 DUP5 DUP5 XOR PUSH2 0x215F JUMP JUMPDEST PUSH2 0x5A0 SWAP1 DUP5 DUP5 AND PUSH2 0x1E93 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x33 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH2 0x68C SWAP2 SWAP1 PUSH2 0x1ADA JUMP JUMPDEST PUSH2 0x1ADA JUMP JUMPDEST PUSH2 0x6C1 PUSH1 0x98 PUSH2 0x1AAE PUSH1 0x35 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1AD0 JUMPI POP DUP2 PUSH2 0x5A0 JUMP JUMPDEST PUSH2 0x5A0 DUP4 DUP4 PUSH2 0x1B24 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AE4 PUSH2 0x174C JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1AF0 DUP5 PUSH2 0x1B4E JUMP JUMPDEST LT ISZERO PUSH2 0xF9E JUMPI DUP3 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP6 SSTORE PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD SWAP4 SWAP1 SWAP4 SSTORE SWAP4 DUP5 ADD DUP1 SLOAD SWAP5 DUP6 ADD DUP2 SSTORE DUP3 MSTORE SWAP1 KECCAK256 SWAP1 SWAP2 ADD SSTORE JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x1B34 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP2 SWAP1 PUSH2 0x1BBC JUMP JUMPDEST DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 SUB PUSH2 0x1B61 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 SLOAD DUP3 SWAP1 PUSH2 0x1B71 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x2022 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x1B81 JUMPI PUSH2 0x1B81 PUSH2 0x1FC1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1BB3 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1B9B JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1BDB DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1B98 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1B93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C22 DUP4 PUSH2 0x1BEF JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1C45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C4E DUP5 PUSH2 0x1BEF JUMP JUMPDEST SWAP3 POP PUSH2 0x1C5C PUSH1 0x20 DUP6 ADD PUSH2 0x1BEF JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5A0 DUP3 PUSH2 0x1BEF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1CC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1CD2 DUP4 PUSH2 0x1BEF JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1CEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1D03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1D15 JUMPI PUSH2 0x1D15 PUSH2 0x1CA0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1D3D JUMPI PUSH2 0x1D3D PUSH2 0x1CA0 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x1D56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D94 DUP4 PUSH2 0x1BEF JUMP JUMPDEST SWAP2 POP PUSH2 0x1DA2 PUSH1 0x20 DUP5 ADD PUSH2 0x1BEF JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1DBF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1DDF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x57B JUMPI PUSH2 0x57B PUSH2 0x1E7D JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x1487 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x1EC7 JUMPI PUSH2 0x1EC7 PUSH2 0x1E7D JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x1ED4 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x1EAB JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1EF0 JUMPI POP PUSH1 0x1 PUSH2 0x57B JUMP JUMPDEST DUP2 PUSH2 0x1EFD JUMPI POP PUSH1 0x0 PUSH2 0x57B JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x1F13 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x1F1D JUMPI PUSH2 0x1F39 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x57B JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x1F2E JUMPI PUSH2 0x1F2E PUSH2 0x1E7D JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x57B JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x1F5C JUMPI POP DUP2 DUP2 EXP PUSH2 0x57B JUMP JUMPDEST PUSH2 0x1F66 DUP4 DUP4 PUSH2 0x1EA6 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x1F7A JUMPI PUSH2 0x1F7A PUSH2 0x1E7D JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5A0 PUSH1 0xFF DUP5 AND DUP4 PUSH2 0x1EE1 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x57B JUMPI PUSH2 0x57B PUSH2 0x1E7D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1FBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x57B JUMPI PUSH2 0x57B PUSH2 0x1E7D JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0xF9E JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x205C JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x207B JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2068 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x209D JUMPI PUSH2 0x209D PUSH2 0x1CA0 JUMP JUMPDEST PUSH2 0x20B1 DUP2 PUSH2 0x20AB DUP5 SLOAD PUSH2 0x1DAB JUMP JUMPDEST DUP5 PUSH2 0x2035 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x20E6 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x20CE JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x207B JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2115 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x20F6 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x2133 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2155 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1B98 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x217C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x6564A2646970667358221220E9 SWAP9 0xB0 MSIZE SHL 0xC1 0x5C PUSH9 0x6D6DEA8BFCF04D2DB1 INVALID CALLDATALOAD 0xCB 0xE2 MSTORE GT SWAP9 PUSH31 0xC7F6AC98C3CA2F64736F6C6343000811003300000000000000000000000000 ",
							"sourceMap": "1018:1301:18:-:0;;;1332:4:5;1289:48;;1245:55:18;;;;;;;;;-1:-1:-1;1270:22:18;:20;:22::i;:::-;1018:1301;;5928:279:4;5996:13;;;;;;;5995:14;5987:66;;;;-1:-1:-1;;;5987:66:4;;216:2:19;5987:66:4;;;198:21:19;255:2;235:18;;;228:30;294:34;274:18;;;267:62;-1:-1:-1;;;345:18:19;;;338:37;392:19;;5987:66:4;;;;;;;;6067:12;;6082:15;6067:12;;;:30;6063:138;;;6113:12;:30;;-1:-1:-1;;6113:30:4;6128:15;6113:30;;;;;;6162:28;;564:36:19;;;6162:28:4;;552:2:19;537:18;6162:28:4;;;;;;;6063:138;5928:279::o;422:184:19:-;1018:1301:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@__ERC20Burnable_init_1660": {
									"entryPoint": 5395,
									"id": 1660,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@__ERC20Snapshot_init_1723": {
									"entryPoint": null,
									"id": 1723,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@__ERC20_init_999": {
									"entryPoint": 5346,
									"id": 999,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@__ERC20_init_unchained_1017": {
									"entryPoint": 6153,
									"id": 1017,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@__Ownable_init_26": {
									"entryPoint": 5434,
									"id": 26,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@__Ownable_init_unchained_37": {
									"entryPoint": 6217,
									"id": 37,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@__Pausable_init_856": {
									"entryPoint": 5481,
									"id": 856,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@__Pausable_init_unchained_866": {
									"entryPoint": 6265,
									"id": 866,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@__UUPSUpgradeable_init_707": {
									"entryPoint": null,
									"id": 707,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_afterTokenTransfer_1558": {
									"entryPoint": null,
									"id": 1558,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_1493": {
									"entryPoint": 3087,
									"id": 1493,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_authorizeUpgrade_3703": {
									"entryPoint": 3939,
									"id": 3703,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_1547": {
									"entryPoint": null,
									"id": 1547,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_1905": {
									"entryPoint": 6386,
									"id": 1905,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_3694": {
									"entryPoint": 5679,
									"id": 3694,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_burn_1448": {
									"entryPoint": 4692,
									"id": 1448,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkOwner_68": {
									"entryPoint": 4315,
									"id": 68,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_functionDelegateCall_504": {
									"entryPoint": 6522,
									"id": 504,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_getCurrentSnapshotId_1794": {
									"entryPoint": 5964,
									"id": 1794,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_getImplementation_188": {
									"entryPoint": null,
									"id": 188,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_lastSnapshotId_2048": {
									"entryPoint": 6990,
									"id": 2048,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_mint_1376": {
									"entryPoint": 4487,
									"id": 1376,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_2546": {
									"entryPoint": null,
									"id": 2546,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_pause_930": {
									"entryPoint": 5528,
									"id": 930,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_requireNotPaused_903": {
									"entryPoint": 6316,
									"id": 903,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_requirePaused_914": {
									"entryPoint": 5891,
									"id": 914,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_revert_2362": {
									"entryPoint": 6948,
									"id": 2362,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_setImplementation_212": {
									"entryPoint": 5698,
									"id": 212,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_snapshot_1783": {
									"entryPoint": 5589,
									"id": 1783,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_1536": {
									"entryPoint": 3379,
									"id": 1536,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transferOwnership_125": {
									"entryPoint": 5264,
									"id": 125,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transfer_1319": {
									"entryPoint": 3501,
									"id": 1319,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_unpause_946": {
									"entryPoint": 4405,
									"id": 946,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_updateAccountSnapshot_1975": {
									"entryPoint": 6784,
									"id": 1975,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_updateSnapshot_2023": {
									"entryPoint": 6874,
									"id": 2023,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_updateTotalSupplySnapshot_1985": {
									"entryPoint": 6835,
									"id": 1985,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_upgradeToAndCallUUPS_308": {
									"entryPoint": 3947,
									"id": 308,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_upgradeToAndCall_255": {
									"entryPoint": 5854,
									"id": 255,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_upgradeTo_227": {
									"entryPoint": 6458,
									"id": 227,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_valueAt_1960": {
									"entryPoint": 5012,
									"id": 1960,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"@allowance_1114": {
									"entryPoint": 2926,
									"id": 1114,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_1139": {
									"entryPoint": 1383,
									"id": 1139,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@average_2761": {
									"entryPoint": 6757,
									"id": 2761,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOfAt_1823": {
									"entryPoint": 1763,
									"id": 1823,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_1071": {
									"entryPoint": null,
									"id": 1071,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@burnFrom_1700": {
									"entryPoint": 2253,
									"id": 1700,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@burn_1679": {
									"entryPoint": 1753,
									"id": 1679,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@current_2579": {
									"entryPoint": null,
									"id": 2579,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_1047": {
									"entryPoint": null,
									"id": 1047,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decreaseAllowance_1242": {
									"entryPoint": 2778,
									"id": 1242,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@findUpperBound_2455": {
									"entryPoint": 5980,
									"id": 2455,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@getAddressSlot_2661": {
									"entryPoint": null,
									"id": 2661,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getBooleanSlot_2672": {
									"entryPoint": null,
									"id": 2672,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getUint256Slot_2694": {
									"entryPoint": null,
									"id": 2694,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@increaseAllowance_1201": {
									"entryPoint": 1679,
									"id": 1201,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@increment_2593": {
									"entryPoint": null,
									"id": 2593,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@initialize_3629": {
									"entryPoint": 2274,
									"id": 3629,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@isContract_2097": {
									"entryPoint": null,
									"id": 2097,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@mint_3671": {
									"entryPoint": 1731,
									"id": 3671,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@name_1027": {
									"entryPoint": 1237,
									"id": 1027,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@owner_54": {
									"entryPoint": null,
									"id": 54,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@pause_3647": {
									"entryPoint": 2688,
									"id": 3647,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@paused_891": {
									"entryPoint": null,
									"id": 891,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@proxiableUUID_770": {
									"entryPoint": 2056,
									"id": 770,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_82": {
									"entryPoint": 2235,
									"id": 82,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@snapshot_3638": {
									"entryPoint": 2719,
									"id": 3638,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@symbol_1037": {
									"entryPoint": 2704,
									"id": 1037,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupplyAt_1847": {
									"entryPoint": 2735,
									"id": 1847,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@totalSupply_1057": {
									"entryPoint": null,
									"id": 1057,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_1172": {
									"entryPoint": 1409,
									"id": 1172,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transferOwnership_105": {
									"entryPoint": 2969,
									"id": 105,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@transfer_1096": {
									"entryPoint": 2912,
									"id": 1096,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@unpause_3656": {
									"entryPoint": 1713,
									"id": 3656,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@unsafeAccess_2518": {
									"entryPoint": null,
									"id": 2518,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@upgradeToAndCall_813": {
									"entryPoint": 1852,
									"id": 813,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@upgradeTo_792": {
									"entryPoint": 1447,
									"id": 792,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@verifyCallResult_2342": {
									"entryPoint": 6849,
									"id": 2342,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 7151,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 7276,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 7544,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 7216,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_bytes_memory_ptr": {
									"entryPoint": 7350,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 7174,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes32_fromMemory": {
									"entryPoint": 8104,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 7303,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 8515,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7100,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_031e0835d070e7bbd2c8dcce466eadb8c6b9fd22432b0357ab8c37bd9a385940__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7653,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7729,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 8151,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_d85a3cdc203c5cdc6dda93c12cd017145671a0ed9058a16c7aa00b8398a4a8e6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_dataslot_string_storage": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 7827,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 8543,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_helper": {
									"entryPoint": 7846,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"checked_exp_t_uint256_t_uint8": {
									"entryPoint": 8066,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_unsigned": {
									"entryPoint": 7905,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 8081,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 8226,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_string_storage": {
									"entryPoint": 8245,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 8323,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 7064,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 7595,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 7805,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 8129,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 7328,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:19586:19",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:19",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "80:184:19",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "90:10:19",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "99:1:19",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "94:1:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "159:63:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "184:3:19"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "189:1:19"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "180:3:19"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "180:11:19"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "203:3:19"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "208:1:19"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "199:3:19"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "199:11:19"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "193:5:19"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "193:18:19"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "173:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "173:39:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "173:39:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "120:1:19"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "123:6:19"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "117:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "117:13:19"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "131:19:19",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "133:15:19",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "142:1:19"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "145:2:19",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "138:3:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "138:10:19"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "133:1:19"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "113:3:19",
																"statements": []
															},
															"src": "109:113:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "242:3:19"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "247:6:19"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "238:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "238:16:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "256:1:19",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "231:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "231:27:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "231:27:19"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "58:3:19",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "63:3:19",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "68:6:19",
														"type": ""
													}
												],
												"src": "14:250:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "390:275:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "407:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "418:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "400:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "400:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "400:21:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "430:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "450:6:19"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "444:5:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "444:13:19"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "434:6:19",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "477:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "488:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "473:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "473:18:19"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "493:6:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "466:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "466:34:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "466:34:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "548:6:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "556:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "544:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "544:15:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "565:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "576:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "561:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "561:18:19"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "581:6:19"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "509:34:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "509:79:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "509:79:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "597:62:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "613:9:19"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "632:6:19"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "640:2:19",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "628:3:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "628:15:19"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "649:2:19",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "645:3:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "645:7:19"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "624:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "624:29:19"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "609:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "609:45:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "656:2:19",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "605:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "605:54:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "597:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "359:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "370:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "381:4:19",
														"type": ""
													}
												],
												"src": "269:396:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "719:124:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "729:29:19",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "751:6:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "738:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "738:20:19"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "729:5:19"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "821:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "830:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "833:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "823:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "823:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "823:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "780:5:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "791:5:19"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "806:3:19",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "811:1:19",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "802:3:19"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "802:11:19"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "815:1:19",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "798:3:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "798:19:19"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "787:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "787:31:19"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "777:2:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "777:42:19"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "770:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "770:50:19"
															},
															"nodeType": "YulIf",
															"src": "767:70:19"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "698:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "709:5:19",
														"type": ""
													}
												],
												"src": "670:173:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "935:167:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "981:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "990:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "993:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "983:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "983:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "983:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "956:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "965:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "952:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "952:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "977:2:19",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "948:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "948:32:19"
															},
															"nodeType": "YulIf",
															"src": "945:52:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1006:39:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1035:9:19"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1016:18:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1016:29:19"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1006:6:19"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1054:42:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1081:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1092:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1077:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1077:18:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1064:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1064:32:19"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1054:6:19"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "893:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "904:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "916:6:19",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "924:6:19",
														"type": ""
													}
												],
												"src": "848:254:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1202:92:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1212:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1224:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1235:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1220:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1220:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1212:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1254:9:19"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1279:6:19"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1272:6:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1272:14:19"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1265:6:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1265:22:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1247:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1247:41:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1247:41:19"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1171:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1182:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1193:4:19",
														"type": ""
													}
												],
												"src": "1107:187:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1400:76:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1410:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1422:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1433:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1418:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1418:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1410:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1452:9:19"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1463:6:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1445:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1445:25:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1445:25:19"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1369:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1380:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1391:4:19",
														"type": ""
													}
												],
												"src": "1299:177:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1585:224:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1631:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1640:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1643:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1633:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1633:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1633:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1606:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1615:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1602:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1602:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1627:2:19",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1598:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1598:32:19"
															},
															"nodeType": "YulIf",
															"src": "1595:52:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1656:39:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1685:9:19"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1666:18:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1666:29:19"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1656:6:19"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1704:48:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1737:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1748:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1733:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1733:18:19"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1714:18:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1714:38:19"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1704:6:19"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1761:42:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1788:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1799:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1784:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1784:18:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1771:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1771:32:19"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1761:6:19"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1535:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1546:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1558:6:19",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1566:6:19",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1574:6:19",
														"type": ""
													}
												],
												"src": "1481:328:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1911:87:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1921:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1933:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1944:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1929:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1929:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1921:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1963:9:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1978:6:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1986:4:19",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1974:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1974:17:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1956:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "1956:36:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1956:36:19"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1880:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1891:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1902:4:19",
														"type": ""
													}
												],
												"src": "1814:184:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2073:116:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2119:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2128:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2131:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2121:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2121:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2121:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2094:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2103:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2090:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2090:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2115:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2086:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2086:32:19"
															},
															"nodeType": "YulIf",
															"src": "2083:52:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2144:39:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2173:9:19"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2154:18:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2154:29:19"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2144:6:19"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2039:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2050:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2062:6:19",
														"type": ""
													}
												],
												"src": "2003:186:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2264:110:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2310:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2319:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2322:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2312:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2312:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2312:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2285:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2294:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2281:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2281:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2306:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2277:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2277:32:19"
															},
															"nodeType": "YulIf",
															"src": "2274:52:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2335:33:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2358:9:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2345:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2345:23:19"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2335:6:19"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2230:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2241:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2253:6:19",
														"type": ""
													}
												],
												"src": "2194:180:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2411:95:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2428:1:19",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2435:3:19",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2440:10:19",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2431:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2431:20:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2421:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2421:31:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2421:31:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2468:1:19",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2471:4:19",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2461:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2461:15:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2461:15:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2492:1:19",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2495:4:19",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2485:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2485:15:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2485:15:19"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "2379:127:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2607:899:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2653:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2662:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2665:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2655:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2655:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2655:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2628:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2637:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2624:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2624:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2649:2:19",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2620:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2620:32:19"
															},
															"nodeType": "YulIf",
															"src": "2617:52:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2678:39:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2707:9:19"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2688:18:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2688:29:19"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2678:6:19"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2726:46:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2757:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2768:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2753:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2753:18:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2740:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2740:32:19"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "2730:6:19",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2781:28:19",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2791:18:19",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "2785:2:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2836:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2845:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2848:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2838:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2838:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2838:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2824:6:19"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2832:2:19"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2821:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2821:14:19"
															},
															"nodeType": "YulIf",
															"src": "2818:34:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2861:32:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2875:9:19"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2886:6:19"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2871:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2871:22:19"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "2865:2:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2941:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2950:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2953:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2943:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2943:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2943:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "2920:2:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2924:4:19",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2916:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2916:13:19"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2931:7:19"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "2912:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2912:27:19"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2905:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2905:35:19"
															},
															"nodeType": "YulIf",
															"src": "2902:55:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2966:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "2989:2:19"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2976:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "2976:16:19"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "2970:2:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3015:22:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "3017:16:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3017:18:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3017:18:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "3007:2:19"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3011:2:19"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3004:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3004:10:19"
															},
															"nodeType": "YulIf",
															"src": "3001:36:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3046:17:19",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3060:2:19",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "3056:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3056:7:19"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "3050:2:19",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3072:23:19",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3092:2:19",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3086:5:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3086:9:19"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "3076:6:19",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3104:71:19",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "3126:6:19"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_3",
																										"nodeType": "YulIdentifier",
																										"src": "3150:2:19"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "3154:4:19",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "3146:3:19"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3146:13:19"
																							},
																							{
																								"name": "_4",
																								"nodeType": "YulIdentifier",
																								"src": "3161:2:19"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "3142:3:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3142:22:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3166:2:19",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3138:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3138:31:19"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "3171:2:19"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3134:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3134:40:19"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3122:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3122:53:19"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "3108:10:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3234:22:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "3236:16:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3236:18:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3236:18:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "3193:10:19"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3205:2:19"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "3190:2:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3190:18:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "3213:10:19"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "3225:6:19"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "3210:2:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3210:22:19"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "3187:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3187:46:19"
															},
															"nodeType": "YulIf",
															"src": "3184:72:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3272:2:19",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "3276:10:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3265:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3265:22:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3265:22:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "3303:6:19"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "3311:2:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3296:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3296:18:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3296:18:19"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3360:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3369:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3372:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3362:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3362:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3362:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "3337:2:19"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "3341:2:19"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3333:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3333:11:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3346:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3329:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3329:20:19"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "3351:7:19"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3326:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3326:33:19"
															},
															"nodeType": "YulIf",
															"src": "3323:53:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "3402:6:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3410:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3398:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3398:15:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "3419:2:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3423:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3415:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3415:11:19"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "3428:2:19"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "3385:12:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3385:46:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3385:46:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memPtr",
																						"nodeType": "YulIdentifier",
																						"src": "3455:6:19"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "3463:2:19"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3451:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3451:15:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3468:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3447:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3447:24:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3473:1:19",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3440:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3440:35:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3440:35:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3484:16:19",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "3494:6:19"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3484:6:19"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2565:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2576:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2588:6:19",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2596:6:19",
														"type": ""
													}
												],
												"src": "2511:995:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3612:76:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3622:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3634:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3645:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3630:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3630:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3622:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3664:9:19"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3675:6:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3657:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3657:25:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3657:25:19"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3581:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3592:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3603:4:19",
														"type": ""
													}
												],
												"src": "3511:177:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3794:102:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3804:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3816:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3827:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3812:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3812:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3804:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3846:9:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3861:6:19"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3877:3:19",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3882:1:19",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "3873:3:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3873:11:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3886:1:19",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3869:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3869:19:19"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3857:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3857:32:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3839:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "3839:51:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3839:51:19"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3763:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3774:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3785:4:19",
														"type": ""
													}
												],
												"src": "3693:203:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3988:173:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4034:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4043:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4046:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4036:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4036:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4036:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4009:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4018:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4005:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4005:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4030:2:19",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4001:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4001:32:19"
															},
															"nodeType": "YulIf",
															"src": "3998:52:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4059:39:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4088:9:19"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4069:18:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4069:29:19"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4059:6:19"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4107:48:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4140:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4151:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4136:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4136:18:19"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4117:18:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4117:38:19"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4107:6:19"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3946:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3957:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3969:6:19",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3977:6:19",
														"type": ""
													}
												],
												"src": "3901:260:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4221:325:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4231:22:19",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4245:1:19",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4248:4:19"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "4241:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4241:12:19"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "4231:6:19"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4262:38:19",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4292:4:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4298:1:19",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4288:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4288:12:19"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "4266:18:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4339:31:19",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "4341:27:19",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "4355:6:19"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4363:4:19",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "4351:3:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4351:17:19"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "4341:6:19"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "4319:18:19"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4312:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4312:26:19"
															},
															"nodeType": "YulIf",
															"src": "4309:61:19"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4429:111:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4450:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "4457:3:19",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "4462:10:19",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "4453:3:19"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4453:20:19"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "4443:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4443:31:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4443:31:19"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4494:1:19",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4497:4:19",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "4487:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4487:15:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4487:15:19"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4522:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4525:4:19",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4515:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4515:15:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4515:15:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "4385:18:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "4408:6:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4416:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "4405:2:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4405:14:19"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "4382:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4382:38:19"
															},
															"nodeType": "YulIf",
															"src": "4379:161:19"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "4201:4:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "4210:6:19",
														"type": ""
													}
												],
												"src": "4166:380:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4725:234:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4742:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4753:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4735:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4735:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4735:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4776:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4787:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4772:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4772:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4792:2:19",
																		"type": "",
																		"value": "44"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4765:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4765:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4765:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4815:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4826:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4811:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4811:18:19"
																	},
																	{
																		"hexValue": "46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4831:34:19",
																		"type": "",
																		"value": "Function must be called through "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4804:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4804:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4804:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4886:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4897:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4882:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4882:18:19"
																	},
																	{
																		"hexValue": "64656c656761746563616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4902:14:19",
																		"type": "",
																		"value": "delegatecall"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4875:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4875:42:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4875:42:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4926:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4938:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4949:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4934:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "4934:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4926:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4702:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4716:4:19",
														"type": ""
													}
												],
												"src": "4551:408:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5138:234:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5155:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5166:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5148:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5148:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5148:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5189:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5200:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5185:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5185:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5205:2:19",
																		"type": "",
																		"value": "44"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5178:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5178:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5178:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5228:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5239:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5224:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5224:18:19"
																	},
																	{
																		"hexValue": "46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5244:34:19",
																		"type": "",
																		"value": "Function must be called through "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5217:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5217:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5217:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5299:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5310:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5295:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5295:18:19"
																	},
																	{
																		"hexValue": "6163746976652070726f7879",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5315:14:19",
																		"type": "",
																		"value": "active proxy"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5288:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5288:42:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5288:42:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5339:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5351:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5362:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5347:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5347:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5339:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5115:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5129:4:19",
														"type": ""
													}
												],
												"src": "4964:408:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5409:95:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5426:1:19",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5433:3:19",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5438:10:19",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "5429:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5429:20:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5419:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5419:31:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5419:31:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5466:1:19",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5469:4:19",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5459:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5459:15:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5459:15:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5490:1:19",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5493:4:19",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "5483:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5483:15:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5483:15:19"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "5377:127:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5557:77:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5567:16:19",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5578:1:19"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5581:1:19"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5574:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5574:9:19"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "5567:3:19"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5606:22:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "5608:16:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5608:18:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5608:18:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5598:1:19"
																	},
																	{
																		"name": "sum",
																		"nodeType": "YulIdentifier",
																		"src": "5601:3:19"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5595:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5595:10:19"
															},
															"nodeType": "YulIf",
															"src": "5592:36:19"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "5540:1:19",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "5543:1:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "5549:3:19",
														"type": ""
													}
												],
												"src": "5509:125:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5813:246:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5830:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5841:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5823:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5823:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5823:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5864:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5875:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5860:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5860:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5880:2:19",
																		"type": "",
																		"value": "56"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5853:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5853:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5853:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5903:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5914:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5899:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5899:18:19"
																	},
																	{
																		"hexValue": "555550535570677261646561626c653a206d757374206e6f742062652063616c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5919:34:19",
																		"type": "",
																		"value": "UUPSUpgradeable: must not be cal"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5892:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5892:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5892:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5974:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5985:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5970:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5970:18:19"
																	},
																	{
																		"hexValue": "6c6564207468726f7567682064656c656761746563616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5990:26:19",
																		"type": "",
																		"value": "led through delegatecall"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5963:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "5963:54:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5963:54:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6026:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6038:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6049:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6034:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6034:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6026:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5790:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5804:4:19",
														"type": ""
													}
												],
												"src": "5639:420:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6238:236:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6255:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6266:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6248:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6248:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6248:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6289:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6300:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6285:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6285:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6305:2:19",
																		"type": "",
																		"value": "46"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6278:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6278:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6278:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6328:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6339:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6324:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6324:18:19"
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6344:34:19",
																		"type": "",
																		"value": "Initializable: contract is alrea"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6317:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6317:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6317:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6399:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6410:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6395:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6395:18:19"
																	},
																	{
																		"hexValue": "647920696e697469616c697a6564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6415:16:19",
																		"type": "",
																		"value": "dy initialized"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6388:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6388:44:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6388:44:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6441:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6453:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6464:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6449:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6449:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6441:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6215:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6229:4:19",
														"type": ""
													}
												],
												"src": "6064:410:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6543:358:19",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6553:16:19",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "6568:1:19",
																"type": "",
																"value": "1"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nodeType": "YulTypedName",
																	"src": "6557:7:19",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6578:16:19",
															"value": {
																"name": "power_1",
																"nodeType": "YulIdentifier",
																"src": "6587:7:19"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "6578:5:19"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6603:13:19",
															"value": {
																"name": "_base",
																"nodeType": "YulIdentifier",
																"src": "6611:5:19"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nodeType": "YulIdentifier",
																	"src": "6603:4:19"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6667:228:19",
																"statements": [
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "6712:22:19",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nodeType": "YulIdentifier",
																							"src": "6714:16:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6714:18:19"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "6714:18:19"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "6687:4:19"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "6701:1:19",
																									"type": "",
																									"value": "0"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "6697:3:19"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "6697:6:19"
																						},
																						{
																							"name": "base",
																							"nodeType": "YulIdentifier",
																							"src": "6705:4:19"
																						}
																					],
																					"functionName": {
																						"name": "div",
																						"nodeType": "YulIdentifier",
																						"src": "6693:3:19"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6693:17:19"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nodeType": "YulIdentifier",
																				"src": "6684:2:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6684:27:19"
																		},
																		"nodeType": "YulIf",
																		"src": "6681:53:19"
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "6773:29:19",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "6775:25:19",
																					"value": {
																						"arguments": [
																							{
																								"name": "power",
																								"nodeType": "YulIdentifier",
																								"src": "6788:5:19"
																							},
																							{
																								"name": "base",
																								"nodeType": "YulIdentifier",
																								"src": "6795:4:19"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nodeType": "YulIdentifier",
																							"src": "6784:3:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6784:16:19"
																					},
																					"variableNames": [
																						{
																							"name": "power",
																							"nodeType": "YulIdentifier",
																							"src": "6775:5:19"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "6754:8:19"
																				},
																				{
																					"name": "power_1",
																					"nodeType": "YulIdentifier",
																					"src": "6764:7:19"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "6750:3:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6750:22:19"
																		},
																		"nodeType": "YulIf",
																		"src": "6747:55:19"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "6815:23:19",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "6827:4:19"
																				},
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "6833:4:19"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nodeType": "YulIdentifier",
																				"src": "6823:3:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6823:15:19"
																		},
																		"variableNames": [
																			{
																				"name": "base",
																				"nodeType": "YulIdentifier",
																				"src": "6815:4:19"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "6851:34:19",
																		"value": {
																			"arguments": [
																				{
																					"name": "power_1",
																					"nodeType": "YulIdentifier",
																					"src": "6867:7:19"
																				},
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "6876:8:19"
																				}
																			],
																			"functionName": {
																				"name": "shr",
																				"nodeType": "YulIdentifier",
																				"src": "6863:3:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6863:22:19"
																		},
																		"variableNames": [
																			{
																				"name": "exponent",
																				"nodeType": "YulIdentifier",
																				"src": "6851:8:19"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "6636:8:19"
																	},
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "6646:7:19"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "6633:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6633:21:19"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "6655:3:19",
																"statements": []
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "6629:3:19",
																"statements": []
															},
															"src": "6625:270:19"
														}
													]
												},
												"name": "checked_exp_helper",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "_base",
														"nodeType": "YulTypedName",
														"src": "6507:5:19",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "6514:8:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "6527:5:19",
														"type": ""
													},
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "6534:4:19",
														"type": ""
													}
												],
												"src": "6479:422:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6965:747:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7003:52:19",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "7017:10:19",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "7026:1:19",
																			"type": "",
																			"value": "1"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "7017:5:19"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "7040:5:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "6985:8:19"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "6978:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "6978:16:19"
															},
															"nodeType": "YulIf",
															"src": "6975:80:19"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7088:52:19",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "7102:10:19",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "7111:1:19",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "7102:5:19"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "7125:5:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "7074:4:19"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "7067:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "7067:12:19"
															},
															"nodeType": "YulIf",
															"src": "7064:76:19"
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "7176:52:19",
																		"statements": [
																			{
																				"nodeType": "YulAssignment",
																				"src": "7190:10:19",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7199:1:19",
																					"type": "",
																					"value": "1"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nodeType": "YulIdentifier",
																						"src": "7190:5:19"
																					}
																				]
																			},
																			{
																				"nodeType": "YulLeave",
																				"src": "7213:5:19"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "7169:59:19",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7174:1:19",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "7244:123:19",
																		"statements": [
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "7279:22:19",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nodeType": "YulIdentifier",
																									"src": "7281:16:19"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "7281:18:19"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "7281:18:19"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "7264:8:19"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "7274:3:19",
																							"type": "",
																							"value": "255"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nodeType": "YulIdentifier",
																						"src": "7261:2:19"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "7261:17:19"
																				},
																				"nodeType": "YulIf",
																				"src": "7258:43:19"
																			},
																			{
																				"nodeType": "YulAssignment",
																				"src": "7314:25:19",
																				"value": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "7327:8:19"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "7337:1:19",
																							"type": "",
																							"value": "1"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "7323:3:19"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "7323:16:19"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nodeType": "YulIdentifier",
																						"src": "7314:5:19"
																					}
																				]
																			},
																			{
																				"nodeType": "YulLeave",
																				"src": "7352:5:19"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "7237:130:19",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7242:1:19",
																		"type": "",
																		"value": "2"
																	}
																}
															],
															"expression": {
																"name": "base",
																"nodeType": "YulIdentifier",
																"src": "7156:4:19"
															},
															"nodeType": "YulSwitch",
															"src": "7149:218:19"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7465:70:19",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "7479:28:19",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "7492:4:19"
																				},
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "7498:8:19"
																				}
																			],
																			"functionName": {
																				"name": "exp",
																				"nodeType": "YulIdentifier",
																				"src": "7488:3:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7488:19:19"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "7479:5:19"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "7520:5:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nodeType": "YulIdentifier",
																						"src": "7389:4:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7395:2:19",
																						"type": "",
																						"value": "11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "7386:2:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7386:12:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nodeType": "YulIdentifier",
																						"src": "7403:8:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7413:2:19",
																						"type": "",
																						"value": "78"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "7400:2:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7400:16:19"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7382:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7382:35:19"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nodeType": "YulIdentifier",
																						"src": "7426:4:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7432:3:19",
																						"type": "",
																						"value": "307"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "7423:2:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7423:13:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nodeType": "YulIdentifier",
																						"src": "7441:8:19"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7451:2:19",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "7438:2:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7438:16:19"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7419:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7419:36:19"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7379:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "7379:77:19"
															},
															"nodeType": "YulIf",
															"src": "7376:159:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7544:57:19",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "7586:4:19"
																	},
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "7592:8:19"
																	}
																],
																"functionName": {
																	"name": "checked_exp_helper",
																	"nodeType": "YulIdentifier",
																	"src": "7567:18:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "7567:34:19"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nodeType": "YulTypedName",
																	"src": "7548:7:19",
																	"type": ""
																},
																{
																	"name": "base_1",
																	"nodeType": "YulTypedName",
																	"src": "7557:6:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7646:22:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "7648:16:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7648:18:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7648:18:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "7616:7:19"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7633:1:19",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "7629:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7629:6:19"
																			},
																			{
																				"name": "base_1",
																				"nodeType": "YulIdentifier",
																				"src": "7637:6:19"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "7625:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7625:19:19"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7613:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "7613:32:19"
															},
															"nodeType": "YulIf",
															"src": "7610:58:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7677:29:19",
															"value": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "7690:7:19"
																	},
																	{
																		"name": "base_1",
																		"nodeType": "YulIdentifier",
																		"src": "7699:6:19"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "7686:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "7686:20:19"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "7677:5:19"
																}
															]
														}
													]
												},
												"name": "checked_exp_unsigned",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "6936:4:19",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "6942:8:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "6955:5:19",
														"type": ""
													}
												],
												"src": "6906:806:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7785:72:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7795:56:19",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "7825:4:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "exponent",
																				"nodeType": "YulIdentifier",
																				"src": "7835:8:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7845:4:19",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7831:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7831:19:19"
																	}
																],
																"functionName": {
																	"name": "checked_exp_unsigned",
																	"nodeType": "YulIdentifier",
																	"src": "7804:20:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "7804:47:19"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "7795:5:19"
																}
															]
														}
													]
												},
												"name": "checked_exp_t_uint256_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "7756:4:19",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "7762:8:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "7775:5:19",
														"type": ""
													}
												],
												"src": "7717:140:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7914:116:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7924:20:19",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7939:1:19"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7942:1:19"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "7935:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "7935:9:19"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "7924:7:19"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8002:22:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "8004:16:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8004:18:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8004:18:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "7973:1:19"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "7966:6:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7966:9:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nodeType": "YulIdentifier",
																						"src": "7980:1:19"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nodeType": "YulIdentifier",
																								"src": "7987:7:19"
																							},
																							{
																								"name": "x",
																								"nodeType": "YulIdentifier",
																								"src": "7996:1:19"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nodeType": "YulIdentifier",
																							"src": "7983:3:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7983:15:19"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nodeType": "YulIdentifier",
																					"src": "7977:2:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7977:22:19"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nodeType": "YulIdentifier",
																			"src": "7963:2:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7963:37:19"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "7956:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "7956:45:19"
															},
															"nodeType": "YulIf",
															"src": "7953:71:19"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "7893:1:19",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "7896:1:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "7902:7:19",
														"type": ""
													}
												],
												"src": "7862:168:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8142:87:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8152:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8164:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8175:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8160:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "8160:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8152:4:19"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8194:9:19"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "8209:6:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8217:4:19",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "8205:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8205:17:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8187:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "8187:36:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8187:36:19"
														}
													]
												},
												"name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8111:9:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8122:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8133:4:19",
														"type": ""
													}
												],
												"src": "8035:194:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8408:227:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8425:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8436:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8418:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "8418:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8418:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8459:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8470:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8455:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8455:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8475:2:19",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8448:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "8448:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8448:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8498:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8509:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8494:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8494:18:19"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8514:34:19",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8487:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "8487:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8487:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8569:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8580:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8565:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8565:18:19"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8585:7:19",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8558:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "8558:35:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8558:35:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8602:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8614:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8625:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8610:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "8610:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8602:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8385:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8399:4:19",
														"type": ""
													}
												],
												"src": "8234:401:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8814:228:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8831:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8842:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8824:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "8824:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8824:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8865:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8876:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8861:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8861:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8881:2:19",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8854:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "8854:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8854:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8904:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8915:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8900:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8900:18:19"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8920:34:19",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8893:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "8893:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8893:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8975:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8986:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8971:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8971:18:19"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8991:8:19",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8964:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "8964:36:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8964:36:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9009:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9021:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9032:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9017:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9017:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9009:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8791:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8805:4:19",
														"type": ""
													}
												],
												"src": "8640:402:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9221:226:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9238:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9249:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9231:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9231:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9231:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9272:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9283:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9268:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9268:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9288:2:19",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9261:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9261:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9261:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9311:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9322:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9307:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9307:18:19"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9327:34:19",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9300:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9300:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9300:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9382:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9393:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9378:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9378:18:19"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9398:6:19",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9371:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9371:34:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9371:34:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9414:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9426:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9437:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9422:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9422:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9414:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9198:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9212:4:19",
														"type": ""
													}
												],
												"src": "9047:400:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9626:224:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9643:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9654:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9636:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9636:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9636:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9677:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9688:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9673:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9673:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9693:2:19",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9666:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9666:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9666:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9716:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9727:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9712:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9712:18:19"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9732:34:19",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9705:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9705:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9705:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9787:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9798:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9783:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9783:18:19"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9803:4:19",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9776:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9776:32:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9776:32:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9817:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9829:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9840:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9825:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "9825:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9817:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9603:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9617:4:19",
														"type": ""
													}
												],
												"src": "9452:398:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10029:179:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10046:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10057:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10039:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10039:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10039:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10080:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10091:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10076:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10076:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10096:2:19",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10069:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10069:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10069:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10119:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10130:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10115:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10115:18:19"
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10135:31:19",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10108:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10108:59:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10108:59:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10176:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10188:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10199:2:19",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10184:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10184:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10176:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10006:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10020:4:19",
														"type": ""
													}
												],
												"src": "9855:353:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10387:227:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10404:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10415:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10397:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10397:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10397:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10438:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10449:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10434:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10434:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10454:2:19",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10427:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10427:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10427:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10477:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10488:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10473:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10473:18:19"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10493:34:19",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10466:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10466:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10466:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10548:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10559:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10544:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10544:18:19"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10564:7:19",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10537:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10537:35:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10537:35:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10581:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10593:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10604:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10589:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10589:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10581:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10364:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10378:4:19",
														"type": ""
													}
												],
												"src": "10213:401:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10793:225:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10810:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10821:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10803:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10803:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10803:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10844:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10855:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10840:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10840:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10860:2:19",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10833:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10833:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10833:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10883:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10894:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10879:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10879:18:19"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10899:34:19",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10872:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10872:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10872:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10954:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10965:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10950:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10950:18:19"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10970:5:19",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10943:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10943:33:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10943:33:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10985:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10997:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11008:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10993:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "10993:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10985:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10770:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10784:4:19",
														"type": ""
													}
												],
												"src": "10619:399:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11197:228:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11214:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11225:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11207:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11207:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11207:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11248:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11259:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11244:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11244:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11264:2:19",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11237:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11237:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11237:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11287:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11298:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11283:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11283:18:19"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11303:34:19",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11276:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11276:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11276:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11358:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11369:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11354:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11354:18:19"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11374:8:19",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11347:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11347:36:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11347:36:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11392:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11404:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11415:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11400:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11400:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11392:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11174:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11188:4:19",
														"type": ""
													}
												],
												"src": "11023:402:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11511:103:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11557:16:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11566:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11569:1:19",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "11559:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11559:12:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11559:12:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "11532:7:19"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11541:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "11528:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11528:23:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11553:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "11524:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11524:32:19"
															},
															"nodeType": "YulIf",
															"src": "11521:52:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11582:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11598:9:19"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "11592:5:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11592:16:19"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "11582:6:19"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11477:9:19",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "11488:7:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11500:6:19",
														"type": ""
													}
												],
												"src": "11430:184:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11793:236:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11810:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11821:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11803:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11803:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11803:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11844:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11855:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11840:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11840:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11860:2:19",
																		"type": "",
																		"value": "46"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11833:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11833:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11833:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11883:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11894:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11879:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11879:18:19"
																	},
																	{
																		"hexValue": "45524331393637557067726164653a206e657720696d706c656d656e74617469",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11899:34:19",
																		"type": "",
																		"value": "ERC1967Upgrade: new implementati"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11872:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11872:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11872:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11954:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11965:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11950:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11950:18:19"
																	},
																	{
																		"hexValue": "6f6e206973206e6f742055555053",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11970:16:19",
																		"type": "",
																		"value": "on is not UUPS"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11943:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "11943:44:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11943:44:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11996:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12008:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12019:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12004:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12004:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11996:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11770:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11784:4:19",
														"type": ""
													}
												],
												"src": "11619:410:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12208:231:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12225:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12236:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12218:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12218:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12218:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12259:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12270:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12255:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12255:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12275:2:19",
																		"type": "",
																		"value": "41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12248:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12248:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12248:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12298:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12309:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12294:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12294:18:19"
																	},
																	{
																		"hexValue": "45524331393637557067726164653a20756e737570706f727465642070726f78",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12314:34:19",
																		"type": "",
																		"value": "ERC1967Upgrade: unsupported prox"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12287:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12287:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12287:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12369:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12380:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12365:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12365:18:19"
																	},
																	{
																		"hexValue": "6961626c6555554944",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12385:11:19",
																		"type": "",
																		"value": "iableUUID"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12358:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12358:39:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12358:39:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12406:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12418:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12429:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12414:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12414:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12406:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12185:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12199:4:19",
														"type": ""
													}
												],
												"src": "12034:405:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12618:182:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12635:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12646:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12628:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12628:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12628:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12669:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12680:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12665:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12665:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12685:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12658:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12658:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12658:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12708:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12719:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12704:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12704:18:19"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12724:34:19",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12697:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12697:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12697:62:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12768:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12780:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12791:2:19",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12776:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12776:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12768:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12595:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12609:4:19",
														"type": ""
													}
												],
												"src": "12444:356:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12979:181:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12996:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13007:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12989:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "12989:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12989:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13030:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13041:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13026:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13026:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13046:2:19",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13019:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13019:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13019:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13069:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13080:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13065:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13065:18:19"
																	},
																	{
																		"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13085:33:19",
																		"type": "",
																		"value": "ERC20: mint to the zero address"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13058:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13058:61:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13058:61:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13128:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13140:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13151:2:19",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13136:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13136:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13128:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12956:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12970:4:19",
														"type": ""
													}
												],
												"src": "12805:355:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13339:223:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13356:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13367:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13349:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13349:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13349:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13390:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13401:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13386:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13386:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13406:2:19",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13379:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13379:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13379:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13429:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13440:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13425:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13425:18:19"
																	},
																	{
																		"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f20616464726573",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13445:34:19",
																		"type": "",
																		"value": "ERC20: burn from the zero addres"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13418:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13418:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13418:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13500:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13511:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13496:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13496:18:19"
																	},
																	{
																		"hexValue": "73",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13516:3:19",
																		"type": "",
																		"value": "s"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13489:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13489:31:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13489:31:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13529:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13541:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13552:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13537:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13537:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13529:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13316:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13330:4:19",
														"type": ""
													}
												],
												"src": "13165:397:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13741:224:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13758:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13769:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13751:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13751:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13751:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13792:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13803:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13788:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13788:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13808:2:19",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13781:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13781:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13781:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13831:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13842:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13827:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13827:18:19"
																	},
																	{
																		"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13847:34:19",
																		"type": "",
																		"value": "ERC20: burn amount exceeds balan"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13820:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13820:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13820:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13902:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13913:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13898:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13898:18:19"
																	},
																	{
																		"hexValue": "6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13918:4:19",
																		"type": "",
																		"value": "ce"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13891:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13891:32:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13891:32:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13932:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13944:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13955:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13940:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "13940:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13932:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13718:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13732:4:19",
														"type": ""
													}
												],
												"src": "13567:398:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14144:172:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14161:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14172:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14154:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14154:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14154:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14195:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14206:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14191:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14191:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14211:2:19",
																		"type": "",
																		"value": "22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14184:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14184:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14184:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14234:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14245:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14230:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14230:18:19"
																	},
																	{
																		"hexValue": "4552433230536e617073686f743a2069642069732030",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14250:24:19",
																		"type": "",
																		"value": "ERC20Snapshot: id is 0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14223:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14223:52:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14223:52:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14284:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14296:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14307:2:19",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14292:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14292:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14284:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_d85a3cdc203c5cdc6dda93c12cd017145671a0ed9058a16c7aa00b8398a4a8e6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14121:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14135:4:19",
														"type": ""
													}
												],
												"src": "13970:346:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14495:179:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14512:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14523:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14505:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14505:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14505:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14546:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14557:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14542:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14542:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14562:2:19",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14535:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14535:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14535:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14585:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14596:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14581:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14581:18:19"
																	},
																	{
																		"hexValue": "4552433230536e617073686f743a206e6f6e6578697374656e74206964",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14601:31:19",
																		"type": "",
																		"value": "ERC20Snapshot: nonexistent id"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14574:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14574:59:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14574:59:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14642:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14654:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14665:2:19",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14650:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14650:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14642:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_031e0835d070e7bbd2c8dcce466eadb8c6b9fd22432b0357ab8c37bd9a385940__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14472:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14486:4:19",
														"type": ""
													}
												],
												"src": "14321:353:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14711:95:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14728:1:19",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14735:3:19",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14740:10:19",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "14731:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14731:20:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14721:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14721:31:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14721:31:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14768:1:19",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14771:4:19",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14761:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14761:15:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14761:15:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14792:1:19",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14795:4:19",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "14785:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14785:15:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14785:15:19"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "14679:127:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14985:233:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15002:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15013:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14995:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "14995:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14995:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15036:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15047:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15032:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15032:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15052:2:19",
																		"type": "",
																		"value": "43"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15025:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "15025:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15025:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15075:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15086:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15071:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15071:18:19"
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15091:34:19",
																		"type": "",
																		"value": "Initializable: contract is not i"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15064:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "15064:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15064:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15146:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15157:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15142:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15142:18:19"
																	},
																	{
																		"hexValue": "6e697469616c697a696e67",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15162:13:19",
																		"type": "",
																		"value": "nitializing"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15135:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "15135:41:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15135:41:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15185:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15197:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15208:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15193:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "15193:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15185:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14962:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14976:4:19",
														"type": ""
													}
												],
												"src": "14811:407:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15397:235:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15414:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15425:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15407:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "15407:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15407:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15448:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15459:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15444:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15444:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15464:2:19",
																		"type": "",
																		"value": "45"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15437:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "15437:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15437:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15487:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15498:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15483:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15483:18:19"
																	},
																	{
																		"hexValue": "455243313936373a206e657720696d706c656d656e746174696f6e206973206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15503:34:19",
																		"type": "",
																		"value": "ERC1967: new implementation is n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15476:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "15476:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15476:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15558:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15569:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15554:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15554:18:19"
																	},
																	{
																		"hexValue": "6f74206120636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15574:15:19",
																		"type": "",
																		"value": "ot a contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15547:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "15547:43:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15547:43:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15599:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15611:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15622:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15607:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "15607:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15599:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15374:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15388:4:19",
														"type": ""
													}
												],
												"src": "15223:409:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15811:170:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15828:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15839:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15821:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "15821:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15821:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15862:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15873:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15858:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15858:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15878:2:19",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15851:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "15851:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15851:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15901:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15912:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15897:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15897:18:19"
																	},
																	{
																		"hexValue": "5061757361626c653a206e6f7420706175736564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15917:22:19",
																		"type": "",
																		"value": "Pausable: not paused"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15890:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "15890:50:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15890:50:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15949:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15961:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15972:2:19",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15957:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "15957:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15949:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15788:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15802:4:19",
														"type": ""
													}
												],
												"src": "15637:344:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16035:79:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16045:17:19",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "16057:1:19"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "16060:1:19"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "16053:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "16053:9:19"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "16045:4:19"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "16086:22:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "16088:16:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16088:18:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16088:18:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nodeType": "YulIdentifier",
																		"src": "16077:4:19"
																	},
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "16083:1:19"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "16074:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "16074:11:19"
															},
															"nodeType": "YulIf",
															"src": "16071:37:19"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "16017:1:19",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "16020:1:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "16026:4:19",
														"type": ""
													}
												],
												"src": "15986:128:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16175:65:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16192:1:19",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "16195:3:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16185:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "16185:14:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16185:14:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16208:26:19",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16226:1:19",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16229:4:19",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "16216:9:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "16216:18:19"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "16208:4:19"
																}
															]
														}
													]
												},
												"name": "array_dataslot_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "16158:3:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "16166:4:19",
														"type": ""
													}
												],
												"src": "16119:121:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16326:464:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "16359:425:19",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "16373:11:19",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "16383:1:19",
																			"type": "",
																			"value": "0"
																		},
																		"variables": [
																			{
																				"name": "_1",
																				"nodeType": "YulTypedName",
																				"src": "16377:2:19",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "16404:2:19"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "16408:5:19"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "16397:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16397:17:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16397:17:19"
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "16427:31:19",
																		"value": {
																			"arguments": [
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "16449:2:19"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "16453:4:19",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "keccak256",
																				"nodeType": "YulIdentifier",
																				"src": "16439:9:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16439:19:19"
																		},
																		"variables": [
																			{
																				"name": "data",
																				"nodeType": "YulTypedName",
																				"src": "16431:4:19",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "16471:57:19",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nodeType": "YulIdentifier",
																					"src": "16494:4:19"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "16504:1:19",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "startIndex",
																									"nodeType": "YulIdentifier",
																									"src": "16511:10:19"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "16523:2:19",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "16507:3:19"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "16507:19:19"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nodeType": "YulIdentifier",
																						"src": "16500:3:19"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "16500:27:19"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "16490:3:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16490:38:19"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nodeType": "YulTypedName",
																				"src": "16475:11:19",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "16565:23:19",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "16567:19:19",
																					"value": {
																						"name": "data",
																						"nodeType": "YulIdentifier",
																						"src": "16582:4:19"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nodeType": "YulIdentifier",
																							"src": "16567:11:19"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nodeType": "YulIdentifier",
																					"src": "16547:10:19"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "16559:4:19",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nodeType": "YulIdentifier",
																				"src": "16544:2:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16544:20:19"
																		},
																		"nodeType": "YulIf",
																		"src": "16541:47:19"
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "16601:41:19",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nodeType": "YulIdentifier",
																					"src": "16615:4:19"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "16625:1:19",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nodeType": "YulIdentifier",
																									"src": "16632:3:19"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "16637:2:19",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "16628:3:19"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "16628:12:19"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nodeType": "YulIdentifier",
																						"src": "16621:3:19"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "16621:20:19"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "16611:3:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16611:31:19"
																		},
																		"variables": [
																			{
																				"name": "_2",
																				"nodeType": "YulTypedName",
																				"src": "16605:2:19",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "16655:24:19",
																		"value": {
																			"name": "deleteStart",
																			"nodeType": "YulIdentifier",
																			"src": "16668:11:19"
																		},
																		"variables": [
																			{
																				"name": "start",
																				"nodeType": "YulTypedName",
																				"src": "16659:5:19",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "16753:21:19",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [
																							{
																								"name": "start",
																								"nodeType": "YulIdentifier",
																								"src": "16762:5:19"
																							},
																							{
																								"name": "_1",
																								"nodeType": "YulIdentifier",
																								"src": "16769:2:19"
																							}
																						],
																						"functionName": {
																							"name": "sstore",
																							"nodeType": "YulIdentifier",
																							"src": "16755:6:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "16755:17:19"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "16755:17:19"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "start",
																					"nodeType": "YulIdentifier",
																					"src": "16703:5:19"
																				},
																				{
																					"name": "_2",
																					"nodeType": "YulIdentifier",
																					"src": "16710:2:19"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nodeType": "YulIdentifier",
																				"src": "16700:2:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16700:13:19"
																		},
																		"nodeType": "YulForLoop",
																		"post": {
																			"nodeType": "YulBlock",
																			"src": "16714:26:19",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "16716:22:19",
																					"value": {
																						"arguments": [
																							{
																								"name": "start",
																								"nodeType": "YulIdentifier",
																								"src": "16729:5:19"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "16736:1:19",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "16725:3:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "16725:13:19"
																					},
																					"variableNames": [
																						{
																							"name": "start",
																							"nodeType": "YulIdentifier",
																							"src": "16716:5:19"
																						}
																					]
																				}
																			]
																		},
																		"pre": {
																			"nodeType": "YulBlock",
																			"src": "16696:3:19",
																			"statements": []
																		},
																		"src": "16692:82:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "16342:3:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16347:2:19",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "16339:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "16339:11:19"
															},
															"nodeType": "YulIf",
															"src": "16336:448:19"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "16298:5:19",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "16305:3:19",
														"type": ""
													},
													{
														"name": "startIndex",
														"nodeType": "YulTypedName",
														"src": "16310:10:19",
														"type": ""
													}
												],
												"src": "16245:545:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16880:81:19",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16890:65:19",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nodeType": "YulIdentifier",
																				"src": "16905:4:19"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "16923:1:19",
																										"type": "",
																										"value": "3"
																									},
																									{
																										"name": "len",
																										"nodeType": "YulIdentifier",
																										"src": "16926:3:19"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "16919:3:19"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "16919:11:19"
																							},
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "16936:1:19",
																										"type": "",
																										"value": "0"
																									}
																								],
																								"functionName": {
																									"name": "not",
																									"nodeType": "YulIdentifier",
																									"src": "16932:3:19"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "16932:6:19"
																							}
																						],
																						"functionName": {
																							"name": "shr",
																							"nodeType": "YulIdentifier",
																							"src": "16915:3:19"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "16915:24:19"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "16911:3:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "16911:29:19"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "16901:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16901:40:19"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16947:1:19",
																				"type": "",
																				"value": "1"
																			},
																			{
																				"name": "len",
																				"nodeType": "YulIdentifier",
																				"src": "16950:3:19"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "16943:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16943:11:19"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "16898:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "16898:57:19"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nodeType": "YulIdentifier",
																	"src": "16890:4:19"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "16857:4:19",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "16863:3:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nodeType": "YulTypedName",
														"src": "16871:4:19",
														"type": ""
													}
												],
												"src": "16795:166:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17062:1256:19",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "17072:24:19",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "17092:3:19"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "17086:5:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "17086:10:19"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nodeType": "YulTypedName",
																	"src": "17076:6:19",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "17139:22:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "17141:16:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17141:18:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "17141:18:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "17111:6:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17119:18:19",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "17108:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "17108:30:19"
															},
															"nodeType": "YulIf",
															"src": "17105:56:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "17214:4:19"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nodeType": "YulIdentifier",
																						"src": "17252:4:19"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nodeType": "YulIdentifier",
																					"src": "17246:5:19"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "17246:11:19"
																			}
																		],
																		"functionName": {
																			"name": "extract_byte_array_length",
																			"nodeType": "YulIdentifier",
																			"src": "17220:25:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17220:38:19"
																	},
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "17260:6:19"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_string_storage",
																	"nodeType": "YulIdentifier",
																	"src": "17170:43:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "17170:97:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17170:97:19"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "17276:18:19",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "17293:1:19",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulTypedName",
																	"src": "17280:9:19",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "17303:23:19",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "17322:4:19",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "srcOffset_1",
																	"nodeType": "YulTypedName",
																	"src": "17307:11:19",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "17335:24:19",
															"value": {
																"name": "srcOffset_1",
																"nodeType": "YulIdentifier",
																"src": "17348:11:19"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulIdentifier",
																	"src": "17335:9:19"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "17405:656:19",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "17419:35:19",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "17438:6:19"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "17450:2:19",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "17446:3:19"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "17446:7:19"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "17434:3:19"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "17434:20:19"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nodeType": "YulTypedName",
																						"src": "17423:7:19",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "17467:49:19",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "17511:4:19"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_string_storage",
																						"nodeType": "YulIdentifier",
																						"src": "17481:29:19"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "17481:35:19"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nodeType": "YulTypedName",
																						"src": "17471:6:19",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "17529:10:19",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "17538:1:19",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nodeType": "YulTypedName",
																						"src": "17533:1:19",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "17616:172:19",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "17641:6:19"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nodeType": "YulIdentifier",
																														"src": "17659:3:19"
																													},
																													{
																														"name": "srcOffset",
																														"nodeType": "YulIdentifier",
																														"src": "17664:9:19"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nodeType": "YulIdentifier",
																													"src": "17655:3:19"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "17655:19:19"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nodeType": "YulIdentifier",
																											"src": "17649:5:19"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "17649:26:19"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "17634:6:19"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "17634:42:19"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "17634:42:19"
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "17693:24:19",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "17707:6:19"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "17715:1:19",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "17703:3:19"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "17703:14:19"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nodeType": "YulIdentifier",
																									"src": "17693:6:19"
																								}
																							]
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "17734:40:19",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nodeType": "YulIdentifier",
																										"src": "17751:9:19"
																									},
																									{
																										"name": "srcOffset_1",
																										"nodeType": "YulIdentifier",
																										"src": "17762:11:19"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "17747:3:19"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "17747:27:19"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nodeType": "YulIdentifier",
																									"src": "17734:9:19"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "17563:1:19"
																						},
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "17566:7:19"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "17560:2:19"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "17560:14:19"
																				},
																				"nodeType": "YulForLoop",
																				"post": {
																					"nodeType": "YulBlock",
																					"src": "17575:28:19",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "17577:24:19",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nodeType": "YulIdentifier",
																										"src": "17586:1:19"
																									},
																									{
																										"name": "srcOffset_1",
																										"nodeType": "YulIdentifier",
																										"src": "17589:11:19"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "17582:3:19"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "17582:19:19"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "17577:1:19"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nodeType": "YulBlock",
																					"src": "17556:3:19",
																					"statements": []
																				},
																				"src": "17552:236:19"
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "17836:166:19",
																					"statements": [
																						{
																							"nodeType": "YulVariableDeclaration",
																							"src": "17854:43:19",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "17881:3:19"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "17886:9:19"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "17877:3:19"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "17877:19:19"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "17871:5:19"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "17871:26:19"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nodeType": "YulTypedName",
																									"src": "17858:9:19",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "17921:6:19"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nodeType": "YulIdentifier",
																												"src": "17933:9:19"
																											},
																											{
																												"arguments": [
																													{
																														"arguments": [
																															{
																																"arguments": [
																																	{
																																		"arguments": [
																																			{
																																				"kind": "number",
																																				"nodeType": "YulLiteral",
																																				"src": "17960:1:19",
																																				"type": "",
																																				"value": "3"
																																			},
																																			{
																																				"name": "newLen",
																																				"nodeType": "YulIdentifier",
																																				"src": "17963:6:19"
																																			}
																																		],
																																		"functionName": {
																																			"name": "shl",
																																			"nodeType": "YulIdentifier",
																																			"src": "17956:3:19"
																																		},
																																		"nodeType": "YulFunctionCall",
																																		"src": "17956:14:19"
																																	},
																																	{
																																		"kind": "number",
																																		"nodeType": "YulLiteral",
																																		"src": "17972:3:19",
																																		"type": "",
																																		"value": "248"
																																	}
																																],
																																"functionName": {
																																	"name": "and",
																																	"nodeType": "YulIdentifier",
																																	"src": "17952:3:19"
																																},
																																"nodeType": "YulFunctionCall",
																																"src": "17952:24:19"
																															},
																															{
																																"arguments": [
																																	{
																																		"kind": "number",
																																		"nodeType": "YulLiteral",
																																		"src": "17982:1:19",
																																		"type": "",
																																		"value": "0"
																																	}
																																],
																																"functionName": {
																																	"name": "not",
																																	"nodeType": "YulIdentifier",
																																	"src": "17978:3:19"
																																},
																																"nodeType": "YulFunctionCall",
																																"src": "17978:6:19"
																															}
																														],
																														"functionName": {
																															"name": "shr",
																															"nodeType": "YulIdentifier",
																															"src": "17948:3:19"
																														},
																														"nodeType": "YulFunctionCall",
																														"src": "17948:37:19"
																													}
																												],
																												"functionName": {
																													"name": "not",
																													"nodeType": "YulIdentifier",
																													"src": "17944:3:19"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "17944:42:19"
																											}
																										],
																										"functionName": {
																											"name": "and",
																											"nodeType": "YulIdentifier",
																											"src": "17929:3:19"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "17929:58:19"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "17914:6:19"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "17914:74:19"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "17914:74:19"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "17807:7:19"
																						},
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "17816:6:19"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "17804:2:19"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "17804:19:19"
																				},
																				"nodeType": "YulIf",
																				"src": "17801:201:19"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "18022:4:19"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "18036:1:19",
																											"type": "",
																											"value": "1"
																										},
																										{
																											"name": "newLen",
																											"nodeType": "YulIdentifier",
																											"src": "18039:6:19"
																										}
																									],
																									"functionName": {
																										"name": "shl",
																										"nodeType": "YulIdentifier",
																										"src": "18032:3:19"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "18032:14:19"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "18048:1:19",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "18028:3:19"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "18028:22:19"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "18015:6:19"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "18015:36:19"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "18015:36:19"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "17398:663:19",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17403:1:19",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "18078:234:19",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "18092:14:19",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "18105:1:19",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nodeType": "YulTypedName",
																						"src": "18096:5:19",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "18141:67:19",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "18159:35:19",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "18178:3:19"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "18183:9:19"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "18174:3:19"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "18174:19:19"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "18168:5:19"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "18168:26:19"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "18159:5:19"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nodeType": "YulIdentifier",
																					"src": "18122:6:19"
																				},
																				"nodeType": "YulIf",
																				"src": "18119:89:19"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "18228:4:19"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "18287:5:19"
																								},
																								{
																									"name": "newLen",
																									"nodeType": "YulIdentifier",
																									"src": "18294:6:19"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nodeType": "YulIdentifier",
																								"src": "18234:52:19"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "18234:67:19"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "18221:6:19"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "18221:81:19"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "18221:81:19"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "18070:242:19",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "17378:6:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17386:2:19",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "17375:2:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "17375:14:19"
															},
															"nodeType": "YulSwitch",
															"src": "17368:944:19"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nodeType": "YulTypedName",
														"src": "17047:4:19",
														"type": ""
													},
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "17053:3:19",
														"type": ""
													}
												],
												"src": "16966:1352:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18497:166:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "18514:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18525:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18507:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "18507:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18507:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "18548:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18559:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18544:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18544:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18564:2:19",
																		"type": "",
																		"value": "16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18537:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "18537:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18537:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "18587:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18598:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18583:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18583:18:19"
																	},
																	{
																		"hexValue": "5061757361626c653a20706175736564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "18603:18:19",
																		"type": "",
																		"value": "Pausable: paused"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18576:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "18576:46:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18576:46:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "18631:26:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "18643:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18654:2:19",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "18639:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "18639:18:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "18631:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "18474:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "18488:4:19",
														"type": ""
													}
												],
												"src": "18323:340:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18842:228:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "18859:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18870:2:19",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18852:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "18852:21:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18852:21:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "18893:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18904:2:19",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18889:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18889:18:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18909:2:19",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18882:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "18882:30:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18882:30:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "18932:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18943:2:19",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18928:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18928:18:19"
																	},
																	{
																		"hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "18948:34:19",
																		"type": "",
																		"value": "Address: delegate call to non-co"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18921:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "18921:62:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18921:62:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "19003:9:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19014:2:19",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18999:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18999:18:19"
																	},
																	{
																		"hexValue": "6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "19019:8:19",
																		"type": "",
																		"value": "ntract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18992:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "18992:36:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18992:36:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "19037:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "19049:9:19"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19060:3:19",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "19045:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "19045:19:19"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "19037:4:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "18819:9:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "18833:4:19",
														"type": ""
													}
												],
												"src": "18668:402:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19212:150:19",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "19222:27:19",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "19242:6:19"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "19236:5:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "19236:13:19"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "19226:6:19",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "19297:6:19"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19305:4:19",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "19293:3:19"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19293:17:19"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "19312:3:19"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "19317:6:19"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "19258:34:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "19258:66:19"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19258:66:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "19333:23:19",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "19344:3:19"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "19349:6:19"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "19340:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "19340:16:19"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "19333:3:19"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "19188:3:19",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "19193:6:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "19204:3:19",
														"type": ""
													}
												],
												"src": "19075:287:19"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19413:171:19",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "19444:111:19",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "19465:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "19472:3:19",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "19477:10:19",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "19468:3:19"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "19468:20:19"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "19458:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "19458:31:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "19458:31:19"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "19509:1:19",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "19512:4:19",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "19502:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "19502:15:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "19502:15:19"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "19537:1:19",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "19540:4:19",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "19530:6:19"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "19530:15:19"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "19530:15:19"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "19433:1:19"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "19426:6:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "19426:9:19"
															},
															"nodeType": "YulIf",
															"src": "19423:132:19"
														},
														{
															"nodeType": "YulAssignment",
															"src": "19564:14:19",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "19573:1:19"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "19576:1:19"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "19569:3:19"
																},
																"nodeType": "YulFunctionCall",
																"src": "19569:9:19"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "19564:1:19"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "19398:1:19",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "19401:1:19",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "19407:1:19",
														"type": ""
													}
												],
												"src": "19367:217:19"
											}
										]
									},
									"contents": "{\n    { }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value1 := memPtr\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"Function must be called through \")\n        mstore(add(headStart, 96), \"active proxy\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"UUPSUpgradeable: must not be cal\")\n        mstore(add(headStart, 96), \"led through delegatecall\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: new implementati\")\n        mstore(add(headStart, 96), \"on is not UUPS\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC1967Upgrade: unsupported prox\")\n        mstore(add(headStart, 96), \"iableUUID\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC20: burn from the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: burn amount exceeds balan\")\n        mstore(add(headStart, 96), \"ce\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d85a3cdc203c5cdc6dda93c12cd017145671a0ed9058a16c7aa00b8398a4a8e6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"ERC20Snapshot: id is 0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_031e0835d070e7bbd2c8dcce466eadb8c6b9fd22432b0357ab8c37bd9a385940__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20Snapshot: nonexistent id\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC1967: new implementation is n\")\n        mstore(add(headStart, 96), \"ot a contract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Pausable: not paused\")\n        tail := add(headStart, 96)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Pausable: paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: delegate call to non-co\")\n        mstore(add(headStart, 96), \"ntract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n}",
									"id": 19,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"720": [
									{
										"length": 32,
										"start": 1457
									},
									{
										"length": 32,
										"start": 1530
									},
									{
										"length": 32,
										"start": 1862
									},
									{
										"length": 32,
										"start": 1926
									},
									{
										"length": 32,
										"start": 2069
									}
								]
							},
							"linkReferences": {},
							"object": "60806040526004361061019c5760003560e01c80635c975abb116100ec57806395d89b411161008a578063a457c2d711610064578063a457c2d714610455578063a9059cbb14610475578063dd62ed3e14610495578063f2fde38b146104b557600080fd5b806395d89b411461040b5780639711715a14610420578063981b24d01461043557600080fd5b806379cc6790116100c657806379cc6790146103995780638129fc1c146103b95780638456cb59146103ce5780638da5cb5b146103e357600080fd5b80635c975abb1461033657806370a082311461034e578063715018a61461038457600080fd5b8063395093511161015957806342966c681161013357806342966c68146102ce5780634ee2cd7e146102ee5780634f1ef2861461030e57806352d1902d1461032157600080fd5b806339509351146102795780633f4ba83a1461029957806340c10f19146102ae57600080fd5b806306fdde03146101a1578063095ea7b3146101cc57806318160ddd146101fc57806323b872dd1461021b578063313ce5671461023b5780633659cfe614610257575b600080fd5b3480156101ad57600080fd5b506101b66104d5565b6040516101c39190611bbc565b60405180910390f35b3480156101d857600080fd5b506101ec6101e7366004611c06565b610567565b60405190151581526020016101c3565b34801561020857600080fd5b506035545b6040519081526020016101c3565b34801561022757600080fd5b506101ec610236366004611c30565b610581565b34801561024757600080fd5b50604051601281526020016101c3565b34801561026357600080fd5b50610277610272366004611c6c565b6105a7565b005b34801561028557600080fd5b506101ec610294366004611c06565b61068f565b3480156102a557600080fd5b506102776106b1565b3480156102ba57600080fd5b506102776102c9366004611c06565b6106c3565b3480156102da57600080fd5b506102776102e9366004611c87565b6106d9565b3480156102fa57600080fd5b5061020d610309366004611c06565b6106e3565b61027761031c366004611cb6565b61073c565b34801561032d57600080fd5b5061020d610808565b34801561034257600080fd5b5060fb5460ff166101ec565b34801561035a57600080fd5b5061020d610369366004611c6c565b6001600160a01b031660009081526033602052604090205490565b34801561039057600080fd5b506102776108bb565b3480156103a557600080fd5b506102776103b4366004611c06565b6108cd565b3480156103c557600080fd5b506102776108e2565b3480156103da57600080fd5b50610277610a80565b3480156103ef57600080fd5b5060c9546040516001600160a01b0390911681526020016101c3565b34801561041757600080fd5b506101b6610a90565b34801561042c57600080fd5b50610277610a9f565b34801561044157600080fd5b5061020d610450366004611c87565b610aaf565b34801561046157600080fd5b506101ec610470366004611c06565b610ada565b34801561048157600080fd5b506101ec610490366004611c06565b610b60565b3480156104a157600080fd5b5061020d6104b0366004611d78565b610b6e565b3480156104c157600080fd5b506102776104d0366004611c6c565b610b99565b6060603680546104e490611dab565b80601f016020809104026020016040519081016040528092919081815260200182805461051090611dab565b801561055d5780601f106105325761010080835404028352916020019161055d565b820191906000526020600020905b81548152906001019060200180831161054057829003601f168201915b5050505050905090565b600033610575818585610c0f565b60019150505b92915050565b60003361058f858285610d33565b61059a858585610dad565b60019150505b9392505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105f85760405162461bcd60e51b81526004016105ef90611de5565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610641600080516020612182833981519152546001600160a01b031690565b6001600160a01b0316146106675760405162461bcd60e51b81526004016105ef90611e31565b61067081610f63565b6040805160008082526020820190925261068c91839190610f6b565b50565b6000336105758185856106a28383610b6e565b6106ac9190611e93565b610c0f565b6106b96110db565b6106c1611135565b565b6106cb6110db565b6106d58282611187565b5050565b61068c3382611254565b6001600160a01b03821660009081526097602052604081208190819061070a908590611394565b9150915081610731576001600160a01b038516600090815260336020526040902054610733565b805b95945050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107845760405162461bcd60e51b81526004016105ef90611de5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107cd600080516020612182833981519152546001600160a01b031690565b6001600160a01b0316146107f35760405162461bcd60e51b81526004016105ef90611e31565b6107fc82610f63565b6106d582826001610f6b565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108a85760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016105ef565b5060008051602061218283398151915290565b6108c36110db565b6106c16000611490565b6108d8823383610d33565b6106d58282611254565b600054610100900460ff16158080156109025750600054600160ff909116105b8061091c5750303b15801561091c575060005460ff166001145b61097f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105ef565b6000805460ff1916600117905580156109a2576000805461ff0019166101001790555b6109ed6040518060400160405280600c81526020016b42656172204e6574776f726b60a01b8152506040518060400160405280600581526020016442524e4b4360d81b8152506114e2565b6109f5611513565b6109fd611513565b610a0561153a565b610a0d611569565b610a15611513565b610a3833610a256012600a611f82565b610a33906305f5e100611f91565b611187565b801561068c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b610a886110db565b6106c1611598565b6060603780546104e490611dab565b610aa76110db565b61068c6115d5565b6000806000610abf846098611394565b9150915081610ad057603554610ad2565b805b949350505050565b60003381610ae88286610b6e565b905083811015610b485760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016105ef565b610b558286868403610c0f565b506001949350505050565b600033610575818585610dad565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b610ba16110db565b6001600160a01b038116610c065760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105ef565b61068c81611490565b6001600160a01b038316610c715760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105ef565b6001600160a01b038216610cd25760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105ef565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610d3f8484610b6e565b90506000198114610da75781811015610d9a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016105ef565b610da78484848403610c0f565b50505050565b6001600160a01b038316610e115760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105ef565b6001600160a01b038216610e735760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105ef565b610e7e83838361162f565b6001600160a01b03831660009081526033602052604090205481811015610ef65760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016105ef565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610f569086815260200190565b60405180910390a3610da7565b61068c6110db565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610fa357610f9e83611642565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610ffd575060408051601f3d908101601f19168201909252610ffa91810190611fa8565b60015b6110605760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016105ef565b60008051602061218283398151915281146110cf5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016105ef565b50610f9e8383836116de565b60c9546001600160a01b031633146106c15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105ef565b61113d611703565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0382166111dd5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016105ef565b6111e96000838361162f565b80603560008282546111fb9190611e93565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b0382166112b45760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016105ef565b6112c08260008361162f565b6001600160a01b038216600090815260336020526040902054818110156113345760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016105ef565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b600080600084116113e05760405162461bcd60e51b815260206004820152601660248201527504552433230536e617073686f743a20696420697320360541b60448201526064016105ef565b6113e861174c565b8411156114375760405162461bcd60e51b815260206004820152601d60248201527f4552433230536e617073686f743a206e6f6e6578697374656e7420696400000060448201526064016105ef565b6000611443848661175c565b8454909150810361145b576000809250925050611489565b600184600101828154811061147257611472611fc1565b90600052602060002001549250925050611489565b505b9250929050565b60c980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166115095760405162461bcd60e51b81526004016105ef90611fd7565b6106d58282611809565b600054610100900460ff166106c15760405162461bcd60e51b81526004016105ef90611fd7565b600054610100900460ff166115615760405162461bcd60e51b81526004016105ef90611fd7565b6106c1611849565b600054610100900460ff166115905760405162461bcd60e51b81526004016105ef90611fd7565b6106c1611879565b6115a06118ac565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861116a3390565b60006115e5609a80546001019055565b60006115ef61174c565b90507f8030e83b04d87bef53480e26263266d6ca66863aa8506aca6f2559d18aa1cb678160405161162291815260200190565b60405180910390a1919050565b6116376118ac565b610f9e8383836118f2565b6001600160a01b0381163b6116af5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016105ef565b60008051602061218283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6116e78361193a565b6000825111806116f45750805b15610f9e57610da7838361197a565b60fb5460ff166106c15760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105ef565b6000611757609a5490565b905090565b8154600090810361176f5750600061057b565b82546000905b808210156117bc5760006117898383611a65565b600087815260209020909150859082015411156117a8578091506117b6565b6117b3816001611e93565b92505b50611775565b6000821180156117e85750836117e5866117d7600186612022565b600091825260209091200190565b54145b15611801576117f8600183612022565b9250505061057b565b50905061057b565b600054610100900460ff166118305760405162461bcd60e51b81526004016105ef90611fd7565b603661183c8382612083565b506037610f9e8282612083565b600054610100900460ff166118705760405162461bcd60e51b81526004016105ef90611fd7565b6106c133611490565b600054610100900460ff166118a05760405162461bcd60e51b81526004016105ef90611fd7565b60fb805460ff19169055565b60fb5460ff16156106c15760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105ef565b6001600160a01b0383166119115761190982611a80565b610f9e611ab3565b6001600160a01b0382166119285761190983611a80565b61193183611a80565b610f9e82611a80565b61194381611642565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6119e25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016105ef565b600080846001600160a01b0316846040516119fd9190612143565b600060405180830381855af49150503d8060008114611a38576040519150601f19603f3d011682016040523d82523d6000602084013e611a3d565b606091505b509150915061073382826040518060600160405280602781526020016121a260279139611ac1565b6000611a74600284841861215f565b6105a090848416611e93565b6001600160a01b038116600090815260976020908152604080832060339092529091205461068c9190611ada565b611ada565b6106c16098611aae60355490565b60608315611ad05750816105a0565b6105a08383611b24565b6000611ae461174c565b905080611af084611b4e565b1015610f9e578254600180820185556000858152602080822090930193909355938401805494850181558252902090910155565b815115611b345781518083602001fd5b8060405162461bcd60e51b81526004016105ef9190611bbc565b80546000908103611b6157506000919050565b81548290611b7190600190612022565b81548110611b8157611b81611fc1565b90600052602060002001549050919050565b919050565b60005b83811015611bb3578181015183820152602001611b9b565b50506000910152565b6020815260008251806020840152611bdb816040850160208701611b98565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114611b9357600080fd5b60008060408385031215611c1957600080fd5b611c2283611bef565b946020939093013593505050565b600080600060608486031215611c4557600080fd5b611c4e84611bef565b9250611c5c60208501611bef565b9150604084013590509250925092565b600060208284031215611c7e57600080fd5b6105a082611bef565b600060208284031215611c9957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215611cc957600080fd5b611cd283611bef565b9150602083013567ffffffffffffffff80821115611cef57600080fd5b818501915085601f830112611d0357600080fd5b813581811115611d1557611d15611ca0565b604051601f8201601f19908116603f01168101908382118183101715611d3d57611d3d611ca0565b81604052828152886020848701011115611d5657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060408385031215611d8b57600080fd5b611d9483611bef565b9150611da260208401611bef565b90509250929050565b600181811c90821680611dbf57607f821691505b602082108103611ddf57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561057b5761057b611e7d565b600181815b80851115611487578160001904821115611ec757611ec7611e7d565b80851615611ed457918102915b93841c9390800290611eab565b600082611ef05750600161057b565b81611efd5750600061057b565b8160018114611f135760028114611f1d57611f39565b600191505061057b565b60ff841115611f2e57611f2e611e7d565b50506001821b61057b565b5060208310610133831016604e8410600b8410161715611f5c575081810a61057b565b611f668383611ea6565b8060001904821115611f7a57611f7a611e7d565b029392505050565b60006105a060ff841683611ee1565b808202811582820484141761057b5761057b611e7d565b600060208284031215611fba57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b8181038181111561057b5761057b611e7d565b601f821115610f9e57600081815260208120601f850160051c8101602086101561205c5750805b601f850160051c820191505b8181101561207b57828155600101612068565b505050505050565b815167ffffffffffffffff81111561209d5761209d611ca0565b6120b1816120ab8454611dab565b84612035565b602080601f8311600181146120e657600084156120ce5750858301515b600019600386901b1c1916600185901b17855561207b565b600085815260208120601f198616915b82811015612115578886015182559484019460019091019084016120f6565b50858210156121335787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008251612155818460208701611b98565b9190910192915050565b60008261217c57634e487b7160e01b600052601260045260246000fd5b50049056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e998b0591bc15c686d6dea8bfcf04d2db1fe35cbe25211987ec7f6ac98c3ca2f64736f6c63430008110033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x19C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5C975ABB GT PUSH2 0xEC JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x455 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x475 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x495 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x40B JUMPI DUP1 PUSH4 0x9711715A EQ PUSH2 0x420 JUMPI DUP1 PUSH4 0x981B24D0 EQ PUSH2 0x435 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x79CC6790 GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x399 JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x3B9 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x3CE JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x336 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x34E JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x384 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x39509351 GT PUSH2 0x159 JUMPI DUP1 PUSH4 0x42966C68 GT PUSH2 0x133 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x2CE JUMPI DUP1 PUSH4 0x4EE2CD7E EQ PUSH2 0x2EE JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x30E JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x321 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x39509351 EQ PUSH2 0x279 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x299 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x2AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1CC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x21B JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x23B JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x257 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B6 PUSH2 0x4D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C3 SWAP2 SWAP1 PUSH2 0x1BBC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EC PUSH2 0x1E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C06 JUMP JUMPDEST PUSH2 0x567 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x208 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x227 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EC PUSH2 0x236 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C30 JUMP JUMPDEST PUSH2 0x581 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x247 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x272 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C6C JUMP JUMPDEST PUSH2 0x5A7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x285 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EC PUSH2 0x294 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C06 JUMP JUMPDEST PUSH2 0x68F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x6B1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x2C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C06 JUMP JUMPDEST PUSH2 0x6C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x2E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C87 JUMP JUMPDEST PUSH2 0x6D9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20D PUSH2 0x309 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C06 JUMP JUMPDEST PUSH2 0x6E3 JUMP JUMPDEST PUSH2 0x277 PUSH2 0x31C CALLDATASIZE PUSH1 0x4 PUSH2 0x1CB6 JUMP JUMPDEST PUSH2 0x73C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20D PUSH2 0x808 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x342 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xFB SLOAD PUSH1 0xFF AND PUSH2 0x1EC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20D PUSH2 0x369 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C6C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x390 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x8BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x3B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C06 JUMP JUMPDEST PUSH2 0x8CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x8E2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0xA80 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xC9 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B6 PUSH2 0xA90 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0xA9F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x441 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20D PUSH2 0x450 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C87 JUMP JUMPDEST PUSH2 0xAAF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x461 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EC PUSH2 0x470 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C06 JUMP JUMPDEST PUSH2 0xADA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x481 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EC PUSH2 0x490 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C06 JUMP JUMPDEST PUSH2 0xB60 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20D PUSH2 0x4B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D78 JUMP JUMPDEST PUSH2 0xB6E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x277 PUSH2 0x4D0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C6C JUMP JUMPDEST PUSH2 0xB99 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x4E4 SWAP1 PUSH2 0x1DAB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x510 SWAP1 PUSH2 0x1DAB JUMP JUMPDEST DUP1 ISZERO PUSH2 0x55D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x532 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x55D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x540 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x575 DUP2 DUP6 DUP6 PUSH2 0xC0F JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x58F DUP6 DUP3 DUP6 PUSH2 0xD33 JUMP JUMPDEST PUSH2 0x59A DUP6 DUP6 DUP6 PUSH2 0xDAD JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x5F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP1 PUSH2 0x1DE5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x641 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2182 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x667 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP1 PUSH2 0x1E31 JUMP JUMPDEST PUSH2 0x670 DUP2 PUSH2 0xF63 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x68C SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0xF6B JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x575 DUP2 DUP6 DUP6 PUSH2 0x6A2 DUP4 DUP4 PUSH2 0xB6E JUMP JUMPDEST PUSH2 0x6AC SWAP2 SWAP1 PUSH2 0x1E93 JUMP JUMPDEST PUSH2 0xC0F JUMP JUMPDEST PUSH2 0x6B9 PUSH2 0x10DB JUMP JUMPDEST PUSH2 0x6C1 PUSH2 0x1135 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x6CB PUSH2 0x10DB JUMP JUMPDEST PUSH2 0x6D5 DUP3 DUP3 PUSH2 0x1187 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x68C CALLER DUP3 PUSH2 0x1254 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 DUP2 SWAP1 PUSH2 0x70A SWAP1 DUP6 SWAP1 PUSH2 0x1394 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0x731 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x733 JUMP JUMPDEST DUP1 JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS SUB PUSH2 0x784 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP1 PUSH2 0x1DE5 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7CD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2182 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7F3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP1 PUSH2 0x1E31 JUMP JUMPDEST PUSH2 0x7FC DUP3 PUSH2 0xF63 JUMP JUMPDEST PUSH2 0x6D5 DUP3 DUP3 PUSH1 0x1 PUSH2 0xF6B JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x8A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x555550535570677261646561626C653A206D757374206E6F742062652063616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C6564207468726F7567682064656C656761746563616C6C0000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2182 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x8C3 PUSH2 0x10DB JUMP JUMPDEST PUSH2 0x6C1 PUSH1 0x0 PUSH2 0x1490 JUMP JUMPDEST PUSH2 0x8D8 DUP3 CALLER DUP4 PUSH2 0xD33 JUMP JUMPDEST PUSH2 0x6D5 DUP3 DUP3 PUSH2 0x1254 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x902 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x91C JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x91C JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x97F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x9A2 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x9ED PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD PUSH12 0x42656172204E6574776F726B PUSH1 0xA0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x42524E4B43 PUSH1 0xD8 SHL DUP2 MSTORE POP PUSH2 0x14E2 JUMP JUMPDEST PUSH2 0x9F5 PUSH2 0x1513 JUMP JUMPDEST PUSH2 0x9FD PUSH2 0x1513 JUMP JUMPDEST PUSH2 0xA05 PUSH2 0x153A JUMP JUMPDEST PUSH2 0xA0D PUSH2 0x1569 JUMP JUMPDEST PUSH2 0xA15 PUSH2 0x1513 JUMP JUMPDEST PUSH2 0xA38 CALLER PUSH2 0xA25 PUSH1 0x12 PUSH1 0xA PUSH2 0x1F82 JUMP JUMPDEST PUSH2 0xA33 SWAP1 PUSH4 0x5F5E100 PUSH2 0x1F91 JUMP JUMPDEST PUSH2 0x1187 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x68C JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0xA88 PUSH2 0x10DB JUMP JUMPDEST PUSH2 0x6C1 PUSH2 0x1598 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x4E4 SWAP1 PUSH2 0x1DAB JUMP JUMPDEST PUSH2 0xAA7 PUSH2 0x10DB JUMP JUMPDEST PUSH2 0x68C PUSH2 0x15D5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xABF DUP5 PUSH1 0x98 PUSH2 0x1394 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 PUSH2 0xAD0 JUMPI PUSH1 0x35 SLOAD PUSH2 0xAD2 JUMP JUMPDEST DUP1 JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0xAE8 DUP3 DUP7 PUSH2 0xB6E JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xB48 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH2 0xB55 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0xC0F JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x575 DUP2 DUP6 DUP6 PUSH2 0xDAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xBA1 PUSH2 0x10DB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xC06 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH2 0x68C DUP2 PUSH2 0x1490 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xC71 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xCD2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD3F DUP5 DUP5 PUSH2 0xB6E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0xDA7 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xD9A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH2 0xDA7 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0xC0F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xE11 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xE73 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH2 0xE7E DUP4 DUP4 DUP4 PUSH2 0x162F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xEF6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0xF56 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xDA7 JUMP JUMPDEST PUSH2 0x68C PUSH2 0x10DB JUMP JUMPDEST PUSH32 0x4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xFA3 JUMPI PUSH2 0xF9E DUP4 PUSH2 0x1642 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xFFD JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xFFA SWAP2 DUP2 ADD SWAP1 PUSH2 0x1FA8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1060 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A206E657720696D706C656D656E74617469 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x6F6E206973206E6F742055555053 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2182 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0x10CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524331393637557067726164653A20756E737570706F727465642070726F78 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1A58589B1955555251 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST POP PUSH2 0xF9E DUP4 DUP4 DUP4 PUSH2 0x16DE JUMP JUMPDEST PUSH1 0xC9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH2 0x113D PUSH2 0x1703 JUMP JUMPDEST PUSH1 0xFB DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x11DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH2 0x11E9 PUSH1 0x0 DUP4 DUP4 PUSH2 0x162F JUMP JUMPDEST DUP1 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x11FB SWAP2 SWAP1 PUSH2 0x1E93 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x12B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH2 0x12C0 DUP3 PUSH1 0x0 DUP4 PUSH2 0x162F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1334 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE PUSH1 0x35 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE MLOAD DUP6 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 GT PUSH2 0x13E0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x4552433230536E617073686F743A206964206973203 PUSH1 0x54 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH2 0x13E8 PUSH2 0x174C JUMP JUMPDEST DUP5 GT ISZERO PUSH2 0x1437 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433230536E617073686F743A206E6F6E6578697374656E74206964000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1443 DUP5 DUP7 PUSH2 0x175C JUMP JUMPDEST DUP5 SLOAD SWAP1 SWAP2 POP DUP2 SUB PUSH2 0x145B JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x1489 JUMP JUMPDEST PUSH1 0x1 DUP5 PUSH1 0x1 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1472 JUMPI PUSH2 0x1472 PUSH2 0x1FC1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP3 POP SWAP3 POP POP PUSH2 0x1489 JUMP JUMPDEST POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0xC9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1509 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP1 PUSH2 0x1FD7 JUMP JUMPDEST PUSH2 0x6D5 DUP3 DUP3 PUSH2 0x1809 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x6C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP1 PUSH2 0x1FD7 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1561 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP1 PUSH2 0x1FD7 JUMP JUMPDEST PUSH2 0x6C1 PUSH2 0x1849 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1590 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP1 PUSH2 0x1FD7 JUMP JUMPDEST PUSH2 0x6C1 PUSH2 0x1879 JUMP JUMPDEST PUSH2 0x15A0 PUSH2 0x18AC JUMP JUMPDEST PUSH1 0xFB DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x116A CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15E5 PUSH1 0x9A DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15EF PUSH2 0x174C JUMP JUMPDEST SWAP1 POP PUSH32 0x8030E83B04D87BEF53480E26263266D6CA66863AA8506ACA6F2559D18AA1CB67 DUP2 PUSH1 0x40 MLOAD PUSH2 0x1622 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1637 PUSH2 0x18AC JUMP JUMPDEST PUSH2 0xF9E DUP4 DUP4 DUP4 PUSH2 0x18F2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE PUSH2 0x16AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BDD08184818DBDB9D1C9858DD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2182 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x16E7 DUP4 PUSH2 0x193A JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x16F4 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0xF9E JUMPI PUSH2 0xDA7 DUP4 DUP4 PUSH2 0x197A JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0xFF AND PUSH2 0x6C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1757 PUSH1 0x9A SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 DUP2 SUB PUSH2 0x176F JUMPI POP PUSH1 0x0 PUSH2 0x57B JUMP JUMPDEST DUP3 SLOAD PUSH1 0x0 SWAP1 JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x17BC JUMPI PUSH1 0x0 PUSH2 0x1789 DUP4 DUP4 PUSH2 0x1A65 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 SWAP1 SWAP2 POP DUP6 SWAP1 DUP3 ADD SLOAD GT ISZERO PUSH2 0x17A8 JUMPI DUP1 SWAP2 POP PUSH2 0x17B6 JUMP JUMPDEST PUSH2 0x17B3 DUP2 PUSH1 0x1 PUSH2 0x1E93 JUMP JUMPDEST SWAP3 POP JUMPDEST POP PUSH2 0x1775 JUMP JUMPDEST PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x17E8 JUMPI POP DUP4 PUSH2 0x17E5 DUP7 PUSH2 0x17D7 PUSH1 0x1 DUP7 PUSH2 0x2022 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SWAP1 JUMP JUMPDEST SLOAD EQ JUMPDEST ISZERO PUSH2 0x1801 JUMPI PUSH2 0x17F8 PUSH1 0x1 DUP4 PUSH2 0x2022 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x57B JUMP JUMPDEST POP SWAP1 POP PUSH2 0x57B JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1830 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP1 PUSH2 0x1FD7 JUMP JUMPDEST PUSH1 0x36 PUSH2 0x183C DUP4 DUP3 PUSH2 0x2083 JUMP JUMPDEST POP PUSH1 0x37 PUSH2 0xF9E DUP3 DUP3 PUSH2 0x2083 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1870 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP1 PUSH2 0x1FD7 JUMP JUMPDEST PUSH2 0x6C1 CALLER PUSH2 0x1490 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x18A0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP1 PUSH2 0x1FD7 JUMP JUMPDEST PUSH1 0xFB DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xFB SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x6C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1911 JUMPI PUSH2 0x1909 DUP3 PUSH2 0x1A80 JUMP JUMPDEST PUSH2 0xF9E PUSH2 0x1AB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1928 JUMPI PUSH2 0x1909 DUP4 PUSH2 0x1A80 JUMP JUMPDEST PUSH2 0x1931 DUP4 PUSH2 0x1A80 JUMP JUMPDEST PUSH2 0xF9E DUP3 PUSH2 0x1A80 JUMP JUMPDEST PUSH2 0x1943 DUP2 PUSH2 0x1642 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE PUSH2 0x19E2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x19FD SWAP2 SWAP1 PUSH2 0x2143 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1A38 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A3D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x733 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x21A2 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x1AC1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A74 PUSH1 0x2 DUP5 DUP5 XOR PUSH2 0x215F JUMP JUMPDEST PUSH2 0x5A0 SWAP1 DUP5 DUP5 AND PUSH2 0x1E93 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x33 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH2 0x68C SWAP2 SWAP1 PUSH2 0x1ADA JUMP JUMPDEST PUSH2 0x1ADA JUMP JUMPDEST PUSH2 0x6C1 PUSH1 0x98 PUSH2 0x1AAE PUSH1 0x35 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1AD0 JUMPI POP DUP2 PUSH2 0x5A0 JUMP JUMPDEST PUSH2 0x5A0 DUP4 DUP4 PUSH2 0x1B24 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AE4 PUSH2 0x174C JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1AF0 DUP5 PUSH2 0x1B4E JUMP JUMPDEST LT ISZERO PUSH2 0xF9E JUMPI DUP3 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP6 SSTORE PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD SWAP4 SWAP1 SWAP4 SSTORE SWAP4 DUP5 ADD DUP1 SLOAD SWAP5 DUP6 ADD DUP2 SSTORE DUP3 MSTORE SWAP1 KECCAK256 SWAP1 SWAP2 ADD SSTORE JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x1B34 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5EF SWAP2 SWAP1 PUSH2 0x1BBC JUMP JUMPDEST DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 SUB PUSH2 0x1B61 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 SLOAD DUP3 SWAP1 PUSH2 0x1B71 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x2022 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x1B81 JUMPI PUSH2 0x1B81 PUSH2 0x1FC1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1BB3 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1B9B JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1BDB DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1B98 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1B93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C22 DUP4 PUSH2 0x1BEF JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1C45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C4E DUP5 PUSH2 0x1BEF JUMP JUMPDEST SWAP3 POP PUSH2 0x1C5C PUSH1 0x20 DUP6 ADD PUSH2 0x1BEF JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5A0 DUP3 PUSH2 0x1BEF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1CC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1CD2 DUP4 PUSH2 0x1BEF JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1CEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1D03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1D15 JUMPI PUSH2 0x1D15 PUSH2 0x1CA0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1D3D JUMPI PUSH2 0x1D3D PUSH2 0x1CA0 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x1D56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D94 DUP4 PUSH2 0x1BEF JUMP JUMPDEST SWAP2 POP PUSH2 0x1DA2 PUSH1 0x20 DUP5 ADD PUSH2 0x1BEF JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1DBF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1DDF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x19195B1959D85D1958D85B1B PUSH1 0xA2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x6163746976652070726F7879 PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x57B JUMPI PUSH2 0x57B PUSH2 0x1E7D JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x1487 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x1EC7 JUMPI PUSH2 0x1EC7 PUSH2 0x1E7D JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x1ED4 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x1EAB JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1EF0 JUMPI POP PUSH1 0x1 PUSH2 0x57B JUMP JUMPDEST DUP2 PUSH2 0x1EFD JUMPI POP PUSH1 0x0 PUSH2 0x57B JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x1F13 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x1F1D JUMPI PUSH2 0x1F39 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x57B JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x1F2E JUMPI PUSH2 0x1F2E PUSH2 0x1E7D JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x57B JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x1F5C JUMPI POP DUP2 DUP2 EXP PUSH2 0x57B JUMP JUMPDEST PUSH2 0x1F66 DUP4 DUP4 PUSH2 0x1EA6 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x1F7A JUMPI PUSH2 0x1F7A PUSH2 0x1E7D JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5A0 PUSH1 0xFF DUP5 AND DUP4 PUSH2 0x1EE1 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x57B JUMPI PUSH2 0x57B PUSH2 0x1E7D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1FBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x57B JUMPI PUSH2 0x57B PUSH2 0x1E7D JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0xF9E JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x205C JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x207B JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2068 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x209D JUMPI PUSH2 0x209D PUSH2 0x1CA0 JUMP JUMPDEST PUSH2 0x20B1 DUP2 PUSH2 0x20AB DUP5 SLOAD PUSH2 0x1DAB JUMP JUMPDEST DUP5 PUSH2 0x2035 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x20E6 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x20CE JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x207B JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2115 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x20F6 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x2133 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2155 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1B98 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x217C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP INVALID CALLDATASIZE ADDMOD SWAP5 LOG1 EXTCODESIZE LOG1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBC416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x6564A2646970667358221220E9 SWAP9 0xB0 MSIZE SHL 0xC1 0x5C PUSH9 0x6D6DEA8BFCF04D2DB1 INVALID CALLDATALOAD 0xCB 0xE2 MSTORE GT SWAP9 PUSH31 0xC7F6AC98C3CA2F64736F6C6343000811003300000000000000000000000000 ",
							"sourceMap": "1018:1301:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2491:98:7;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4768:197;;;;;;;;;;-1:-1:-1;4768:197:7;;;;;:::i;:::-;;:::i;:::-;;;1272:14:19;;1265:22;1247:41;;1235:2;1220:18;4768:197:7;1107:187:19;3579:106:7;;;;;;;;;;-1:-1:-1;3666:12:7;;3579:106;;;1445:25:19;;;1433:2;1418:18;3579:106:7;1299:177:19;5527:286:7;;;;;;;;;;-1:-1:-1;5527:286:7;;;;;:::i;:::-;;:::i;3428:91::-;;;;;;;;;;-1:-1:-1;3428:91:7;;3510:2;1956:36:19;;1944:2;1929:18;3428:91:7;1814:184:19;3317:197:5;;;;;;;;;;-1:-1:-1;3317:197:5;;;;;:::i;:::-;;:::i;:::-;;6208:234:7;;;;;;;;;;-1:-1:-1;6208:234:7;;;;;:::i;:::-;;:::i;1773:65:18:-;;;;;;;;;;;;;:::i;1846:95::-;;;;;;;;;;-1:-1:-1;1846:95:18;;;;;:::i;:::-;;:::i;848:89:9:-;;;;;;;;;;-1:-1:-1;848:89:9;;;;;:::i;:::-;;:::i;5312:262:10:-;;;;;;;;;;-1:-1:-1;5312:262:10;;;;;:::i;:::-;;:::i;3763:222:5:-;;;;;;:::i;:::-;;:::i;3006:131::-;;;;;;;;;;;;;:::i;1858:84:6:-;;;;;;;;;;-1:-1:-1;1928:7:6;;;;1858:84;;3743:125:7;;;;;;;;;;-1:-1:-1;3743:125:7;;;;;:::i;:::-;-1:-1:-1;;;;;3843:18:7;3817:7;3843:18;;;:9;:18;;;;;;;3743:125;2071:101:0;;;;;;;;;;;;;:::i;1243:161:9:-;;;;;;;;;;-1:-1:-1;1243:161:9;;;;;:::i;:::-;;:::i;1308:313:18:-;;;;;;;;;;;;;:::i;1704:61::-;;;;;;;;;;;;;:::i;1441:85:0:-;;;;;;;;;;-1:-1:-1;1513:6:0;;1441:85;;-1:-1:-1;;;;;1513:6:0;;;3839:51:19;;3827:2;3812:18;1441:85:0;3693:203:19;2702:102:7;;;;;;;;;;;;;:::i;1629:67:18:-;;;;;;;;;;;;;:::i;5673:230:10:-;;;;;;;;;;-1:-1:-1;5673:230:10;;;;;:::i;:::-;;:::i;6929:427:7:-;;;;;;;;;;-1:-1:-1;6929:427:7;;;;;:::i;:::-;;:::i;4064:189::-;;;;;;;;;;-1:-1:-1;4064:189:7;;;;;:::i;:::-;;:::i;4311:149::-;;;;;;;;;;-1:-1:-1;4311:149:7;;;;;:::i;:::-;;:::i;2321:198:0:-;;;;;;;;;;-1:-1:-1;2321:198:0;;;;;:::i;:::-;;:::i;2491:98:7:-;2545:13;2577:5;2570:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2491:98;:::o;4768:197::-;4851:4;929:10:14;4905:32:7;929:10:14;4921:7:7;4930:6;4905:8;:32::i;:::-;4954:4;4947:11;;;4768:197;;;;;:::o;5527:286::-;5654:4;929:10:14;5710:38:7;5726:4;929:10:14;5741:6:7;5710:15;:38::i;:::-;5758:27;5768:4;5774:2;5778:6;5758:9;:27::i;:::-;5802:4;5795:11;;;5527:286;;;;;;:::o;3317:197:5:-;-1:-1:-1;;;;;1898:6:5;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:5;;;;;;;:::i;:::-;;;;;;;;;1995:6;-1:-1:-1;;;;;1971:30:5;:20;-1:-1:-1;;;;;;;;;;;1642:65:2;-1:-1:-1;;;;;1642:65:2;;1563:151;1971:20:5;-1:-1:-1;;;;;1971:30:5;;1963:87;;;;-1:-1:-1;;;1963:87:5;;;;;;;:::i;:::-;3400:36:::1;3418:17;3400;:36::i;:::-;3487:12;::::0;;3497:1:::1;3487:12:::0;;;::::1;::::0;::::1;::::0;;;3446:61:::1;::::0;3468:17;;3487:12;3446:21:::1;:61::i;:::-;3317:197:::0;:::o;6208:234:7:-;6296:4;929:10:14;6350:64:7;929:10:14;6366:7:7;6403:10;6375:25;929:10:14;6366:7:7;6375:9;:25::i;:::-;:38;;;;:::i;:::-;6350:8;:64::i;1773:65:18:-;1334:13:0;:11;:13::i;:::-;1820:10:18::1;:8;:10::i;:::-;1773:65::o:0;1846:95::-;1334:13:0;:11;:13::i;:::-;1916:17:18::1;1922:2;1926:6;1916:5;:17::i;:::-;1846:95:::0;;:::o;848:89:9:-;903:27;929:10:14;923:6:9;903:5;:27::i;5312:262:10:-;-1:-1:-1;;;;;5475:33:10;;5399:7;5475:33;;;:24;:33;;;;;5399:7;;;;5454:55;;5463:10;;5454:8;:55::i;:::-;5418:91;;;;5527:11;:40;;-1:-1:-1;;;;;3843:18:7;;3817:7;3843:18;;;:9;:18;;;;;;5527:40:10;;;5541:5;5527:40;5520:47;5312:262;-1:-1:-1;;;;;5312:262:10:o;3763:222:5:-;-1:-1:-1;;;;;1898:6:5;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:5;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:5;:20;-1:-1:-1;;;;;;;;;;;1642:65:2;-1:-1:-1;;;;;1642:65:2;;1563:151;1971:20:5;-1:-1:-1;;;;;1971:30:5;;1963:87;;;;-1:-1:-1;;;1963:87:5;;;;;;;:::i;:::-;3880:36:::1;3898:17;3880;:36::i;:::-;3926:52;3948:17;3967:4;3973;3926:21;:52::i;3006:131::-:0;3084:7;2324:4;-1:-1:-1;;;;;2333:6:5;2316:23;;2308:92;;;;-1:-1:-1;;;2308:92:5;;5841:2:19;2308:92:5;;;5823:21:19;5880:2;5860:18;;;5853:30;5919:34;5899:18;;;5892:62;5990:26;5970:18;;;5963:54;6034:19;;2308:92:5;5639:420:19;2308:92:5;-1:-1:-1;;;;;;;;;;;;3006:131:5;:::o;2071:101:0:-;1334:13;:11;:13::i;:::-;2135:30:::1;2162:1;2135:18;:30::i;1243:161:9:-:0;1319:46;1335:7;929:10:14;1358:6:9;1319:15;:46::i;:::-;1375:22;1381:7;1390:6;1375:5;:22::i;1308:313:18:-;3268:19:4;3291:13;;;;;;3290:14;;3336:34;;;;-1:-1:-1;3354:12:4;;3369:1;3354:12;;;;:16;3336:34;3335:108;;;-1:-1:-1;3415:4:4;1476:19:12;:23;;;3376:66:4;;-1:-1:-1;3425:12:4;;;;;:17;3376:66;3314:201;;;;-1:-1:-1;;;3314:201:4;;6266:2:19;3314:201:4;;;6248:21:19;6305:2;6285:18;;;6278:30;6344:34;6324:18;;;6317:62;-1:-1:-1;;;6395:18:19;;;6388:44;6449:19;;3314:201:4;6064:410:19;3314:201:4;3525:12;:16;;-1:-1:-1;;3525:16:4;3540:1;3525:16;;;3551:65;;;;3585:13;:20;;-1:-1:-1;;3585:20:4;;;;;3551:65;1360:37:18::1;;;;;;;;;;;;;;-1:-1:-1::0;;;1360:37:18::1;;::::0;::::1;;;;;;;;;;;;;-1:-1:-1::0;;;1360:37:18::1;;::::0;:12:::1;:37::i;:::-;1408:22;:20;:22::i;:::-;1441;:20;:22::i;:::-;1474:16;:14;:16::i;:::-;1501:17;:15;:17::i;:::-;1529:24;:22;:24::i;:::-;1566:47;1572:10;1596:16;3510:2:7::0;1596::18::1;:16;:::i;:::-;1584:28;::::0;:9:::1;:28;:::i;:::-;1566:5;:47::i;:::-;3640:14:4::0;3636:99;;;3686:5;3670:21;;-1:-1:-1;;3670:21:4;;;3710:14;;-1:-1:-1;1956:36:19;;3710:14:4;;1944:2:19;1929:18;3710:14:4;;;;;;;3258:483;1308:313:18:o;1704:61::-;1334:13:0;:11;:13::i;:::-;1749:8:18::1;:6;:8::i;2702:102:7:-:0;2758:13;2790:7;2783:14;;;;;:::i;1629:67:18:-;1334:13:0;:11;:13::i;:::-;1677:11:18::1;:9;:11::i;5673:230:10:-:0;5745:7;5765:16;5783:13;5800:43;5809:10;5821:21;5800:8;:43::i;:::-;5764:79;;;;5861:11;:35;;3666:12:7;;5861:35:10;;;5875:5;5861:35;5854:42;5673:230;-1:-1:-1;;;;5673:230:10:o;6929:427:7:-;7022:4;929:10:14;7022:4:7;7103:25;929:10:14;7120:7:7;7103:9;:25::i;:::-;7076:52;;7166:15;7146:16;:35;;7138:85;;;;-1:-1:-1;;;7138:85:7;;8436:2:19;7138:85:7;;;8418:21:19;8475:2;8455:18;;;8448:30;8514:34;8494:18;;;8487:62;-1:-1:-1;;;8565:18:19;;;8558:35;8610:19;;7138:85:7;8234:401:19;7138:85:7;7257:60;7266:5;7273:7;7301:15;7282:16;:34;7257:8;:60::i;:::-;-1:-1:-1;7345:4:7;;6929:427;-1:-1:-1;;;;6929:427:7:o;4064:189::-;4143:4;929:10:14;4197:28:7;929:10:14;4214:2:7;4218:6;4197:9;:28::i;4311:149::-;-1:-1:-1;;;;;4426:18:7;;;4400:7;4426:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4311:149::o;2321:198:0:-;1334:13;:11;:13::i;:::-;-1:-1:-1;;;;;2409:22:0;::::1;2401:73;;;::::0;-1:-1:-1;;;2401:73:0;;8842:2:19;2401:73:0::1;::::0;::::1;8824:21:19::0;8881:2;8861:18;;;8854:30;8920:34;8900:18;;;8893:62;-1:-1:-1;;;8971:18:19;;;8964:36;9017:19;;2401:73:0::1;8640:402:19::0;2401:73:0::1;2484:28;2503:8;2484:18;:28::i;10841:370:7:-:0;-1:-1:-1;;;;;10972:19:7;;10964:68;;;;-1:-1:-1;;;10964:68:7;;9249:2:19;10964:68:7;;;9231:21:19;9288:2;9268:18;;;9261:30;9327:34;9307:18;;;9300:62;-1:-1:-1;;;9378:18:19;;;9371:34;9422:19;;10964:68:7;9047:400:19;10964:68:7;-1:-1:-1;;;;;11050:21:7;;11042:68;;;;-1:-1:-1;;;11042:68:7;;9654:2:19;11042:68:7;;;9636:21:19;9693:2;9673:18;;;9666:30;9732:34;9712:18;;;9705:62;-1:-1:-1;;;9783:18:19;;;9776:32;9825:19;;11042:68:7;9452:398:19;11042:68:7;-1:-1:-1;;;;;11121:18:7;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;11172:32;;1445:25:19;;;11172:32:7;;1418:18:19;11172:32:7;;;;;;;10841:370;;;:::o;11492:441::-;11622:24;11649:25;11659:5;11666:7;11649:9;:25::i;:::-;11622:52;;-1:-1:-1;;11688:16:7;:37;11684:243;;11769:6;11749:16;:26;;11741:68;;;;-1:-1:-1;;;11741:68:7;;10057:2:19;11741:68:7;;;10039:21:19;10096:2;10076:18;;;10069:30;10135:31;10115:18;;;10108:59;10184:18;;11741:68:7;9855:353:19;11741:68:7;11851:51;11860:5;11867:7;11895:6;11876:16;:25;11851:8;:51::i;:::-;11612:321;11492:441;;;:::o;7810:818::-;-1:-1:-1;;;;;7936:18:7;;7928:68;;;;-1:-1:-1;;;7928:68:7;;10415:2:19;7928:68:7;;;10397:21:19;10454:2;10434:18;;;10427:30;10493:34;10473:18;;;10466:62;-1:-1:-1;;;10544:18:19;;;10537:35;10589:19;;7928:68:7;10213:401:19;7928:68:7;-1:-1:-1;;;;;8014:16:7;;8006:64;;;;-1:-1:-1;;;8006:64:7;;10821:2:19;8006:64:7;;;10803:21:19;10860:2;10840:18;;;10833:30;10899:34;10879:18;;;10872:62;-1:-1:-1;;;10950:18:19;;;10943:33;10993:19;;8006:64:7;10619:399:19;8006:64:7;8081:38;8102:4;8108:2;8112:6;8081:20;:38::i;:::-;-1:-1:-1;;;;;8152:15:7;;8130:19;8152:15;;;:9;:15;;;;;;8185:21;;;;8177:72;;;;-1:-1:-1;;;8177:72:7;;11225:2:19;8177:72:7;;;11207:21:19;11264:2;11244:18;;;11237:30;11303:34;11283:18;;;11276:62;-1:-1:-1;;;11354:18:19;;;11347:36;11400:19;;8177:72:7;11023:402:19;8177:72:7;-1:-1:-1;;;;;8283:15:7;;;;;;;:9;:15;;;;;;8301:20;;;8283:38;;8498:13;;;;;;;;;;:23;;;;;;8547:26;;;;;;8315:6;1445:25:19;;1433:2;1418:18;;1299:177;8547:26:7;;;;;;;;8584:37;2938:974:2;2200:116:18;1334:13:0;:11;:13::i;2938:974:2:-;951:66;3384:59;;;3380:526;;;3459:37;3478:17;3459:18;:37::i;:::-;2938:974;;;:::o;3380:526::-;3560:17;-1:-1:-1;;;;;3531:61:2;;:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3531:63:2;;;;;;;;-1:-1:-1;;3531:63:2;;;;;;;;;;;;:::i;:::-;;;3527:302;;3758:56;;-1:-1:-1;;;3758:56:2;;11821:2:19;3758:56:2;;;11803:21:19;11860:2;11840:18;;;11833:30;11899:34;11879:18;;;11872:62;-1:-1:-1;;;11950:18:19;;;11943:44;12004:19;;3758:56:2;11619:410:19;3527:302:2;-1:-1:-1;;;;;;;;;;;3644:28:2;;3636:82;;;;-1:-1:-1;;;3636:82:2;;12236:2:19;3636:82:2;;;12218:21:19;12275:2;12255:18;;;12248:30;12314:34;12294:18;;;12287:62;-1:-1:-1;;;12365:18:19;;;12358:39;12414:19;;3636:82:2;12034:405:19;3636:82:2;3595:138;3842:53;3860:17;3879:4;3885:9;3842:17;:53::i;1599:130:0:-;1513:6;;-1:-1:-1;;;;;1513:6:0;929:10:14;1662:23:0;1654:68;;;;-1:-1:-1;;;1654:68:0;;12646:2:19;1654:68:0;;;12628:21:19;;;12665:18;;;12658:30;12724:34;12704:18;;;12697:62;12776:18;;1654:68:0;12444:356:19;2676:117:6;1729:16;:14;:16::i;:::-;2734:7:::1;:15:::0;;-1:-1:-1;;2734:15:6::1;::::0;;2764:22:::1;929:10:14::0;2773:12:6::1;2764:22;::::0;-1:-1:-1;;;;;3857:32:19;;;3839:51;;3827:2;3812:18;2764:22:6::1;;;;;;;2676:117::o:0;8904:535:7:-;-1:-1:-1;;;;;8987:21:7;;8979:65;;;;-1:-1:-1;;;8979:65:7;;13007:2:19;8979:65:7;;;12989:21:19;13046:2;13026:18;;;13019:30;13085:33;13065:18;;;13058:61;13136:18;;8979:65:7;12805:355:19;8979:65:7;9055:49;9084:1;9088:7;9097:6;9055:20;:49::i;:::-;9131:6;9115:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;9283:18:7;;;;;;:9;:18;;;;;;;;:28;;;;;;9336:37;1445:25:19;;;9336:37:7;;1418:18:19;9336:37:7;;;;;;;1846:95:18;;:::o;9759:659:7:-;-1:-1:-1;;;;;9842:21:7;;9834:67;;;;-1:-1:-1;;;9834:67:7;;13367:2:19;9834:67:7;;;13349:21:19;13406:2;13386:18;;;13379:30;13445:34;13425:18;;;13418:62;-1:-1:-1;;;13496:18:19;;;13489:31;13537:19;;9834:67:7;13165:397:19;9834:67:7;9912:49;9933:7;9950:1;9954:6;9912:20;:49::i;:::-;-1:-1:-1;;;;;9997:18:7;;9972:22;9997:18;;;:9;:18;;;;;;10033:24;;;;10025:71;;;;-1:-1:-1;;;10025:71:7;;13769:2:19;10025:71:7;;;13751:21:19;13808:2;13788:18;;;13781:30;13847:34;13827:18;;;13820:62;-1:-1:-1;;;13898:18:19;;;13891:32;13940:19;;10025:71:7;13567:398:19;10025:71:7;-1:-1:-1;;;;;10130:18:7;;;;;;:9;:18;;;;;;;;10151:23;;;10130:44;;10267:12;:22;;;;;;;10315:37;1445:25:19;;;10130:18:7;;;10315:37;;1418:18:19;10315:37:7;;;;;;;2938:974:2;;;:::o;6724:1594:10:-;6813:4;6819:7;6859:1;6846:10;:14;6838:49;;;;-1:-1:-1;;;6838:49:10;;14172:2:19;6838:49:10;;;14154:21:19;14211:2;14191:18;;;14184:30;-1:-1:-1;;;14230:18:19;;;14223:52;14292:18;;6838:49:10;13970:346:19;6838:49:10;6919:23;:21;:23::i;:::-;6905:10;:37;;6897:79;;;;-1:-1:-1;;;6897:79:10;;14523:2:19;6897:79:10;;;14505:21:19;14562:2;14542:18;;;14535:30;14601:31;14581:18;;;14574:59;14650:18;;6897:79:10;14321:353:19;6897:79:10;8099:13;8115:40;:9;8144:10;8115:28;:40::i;:::-;8179:20;;8099:56;;-1:-1:-1;8170:29:10;;8166:146;;8223:5;8230:1;8215:17;;;;;;;8166:146;8271:4;8277:9;:16;;8294:5;8277:23;;;;;;;;:::i;:::-;;;;;;;;;8263:38;;;;;;;8166:146;6828:1490;6724:1594;;;;;;:::o;2673:187:0:-;2765:6;;;-1:-1:-1;;;;;2781:17:0;;;-1:-1:-1;;;;;;2781:17:0;;;;;;;2813:40;;2765:6;;;2781:17;2765:6;;2813:40;;2746:16;;2813:40;2736:124;2673:187;:::o;2114:147:7:-;5363:13:4;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:4;;;;;;;:::i;:::-;2216:38:7::1;2239:5;2246:7;2216:22;:38::i;594:65:9:-:0;5363:13:4;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:4;;;;;;;:::i;1003:95:0:-;5363:13:4;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:4;;;;;;;:::i;:::-;1065:26:0::1;:24;:26::i;1063:97:6:-:0;5363:13:4;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:4;;;;;;;:::i;:::-;1126:27:6::1;:25;:27::i;2429:115::-:0;1482:19;:17;:19::i;:::-;2488:7:::1;:14:::0;;-1:-1:-1;;2488:14:6::1;2498:4;2488:14;::::0;;2517:20:::1;2524:12;929:10:14::0;;850:96;4802:217:10;4849:7;4868:30;:18;1043:19:15;;1061:1;1043:19;;;956:123;4868:30:10;4909:17;4929:23;:21;:23::i;:::-;4909:43;;4967:19;4976:9;4967:19;;;;1445:25:19;;1433:2;1418:18;;1299:177;4967:19:10;;;;;;;;5003:9;4802:217;-1:-1:-1;4802:217:10:o;1949:243:18:-;1482:19:6;:17;:19::i;:::-;2140:44:18::1;2167:4;2173:2;2177:6;2140:26;:44::i;1805:281:2:-:0;-1:-1:-1;;;;;1476:19:12;;;1878:106:2;;;;-1:-1:-1;;;1878:106:2;;15425:2:19;1878:106:2;;;15407:21:19;15464:2;15444:18;;;15437:30;15503:34;15483:18;;;15476:62;-1:-1:-1;;;15554:18:19;;;15547:43;15607:19;;1878:106:2;15223:409:19;1878:106:2;-1:-1:-1;;;;;;;;;;;1994:85:2;;-1:-1:-1;;;;;;1994:85:2;-1:-1:-1;;;;;1994:85:2;;;;;;;;;;1805:281::o;2478:288::-;2616:29;2627:17;2616:10;:29::i;:::-;2673:1;2659:4;:11;:15;:28;;;;2678:9;2659:28;2655:105;;;2703:46;2725:17;2744:4;2703:21;:46::i;2188:106:6:-;1928:7;;;;2246:41;;;;-1:-1:-1;;;2246:41:6;;15839:2:19;2246:41:6;;;15821:21:19;15878:2;15858:18;;;15851:30;-1:-1:-1;;;15897:18:19;;;15890:50;15957:18;;2246:41:6;15637:344:19;5080:125:10;5144:7;5170:28;:18;929:14:15;;838:112;5170:28:10;5163:35;;5080:125;:::o;757:943:13:-;869:12;;846:7;;869:17;;865:56;;-1:-1:-1;909:1:13;902:8;;865:56;971:12;;931:11;;994:445;1007:4;1001:3;:10;994:445;;;1027:11;1041:34;1065:3;1070:4;1041:23;:34::i;:::-;3077:42;3219:19;;;3276:4;3263:18;;1027:48;;-1:-1:-1;1325:7:13;;3259:28;;1292:30;:40;1288:141;;;1359:3;1352:10;;1288:141;;;1407:7;:3;1413:1;1407:7;:::i;:::-;1401:13;;1288:141;1013:426;994:445;;;1562:1;1556:3;:7;:56;;;;-1:-1:-1;1605:7:13;1567:28;1580:5;1587:7;1593:1;1587:3;:7;:::i;:::-;3077:42;3219:19;;;3276:4;3263:18;;;3259:28;;2996:345;1567:28;:34;:45;1556:56;1552:142;;;1635:7;1641:1;1635:3;:7;:::i;:::-;1628:14;;;;;;1552:142;-1:-1:-1;1680:3:13;-1:-1:-1;1673:10:13;;2267:159:7;5363:13:4;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:4;;;;;;;:::i;:::-;2379:5:7::1;:13;2387:5:::0;2379;:13:::1;:::i;:::-;-1:-1:-1::0;2402:7:7::1;:17;2412:7:::0;2402;:17:::1;:::i;1104:111:0:-:0;5363:13:4;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:4;;;;;;;:::i;:::-;1176:32:0::1;929:10:14::0;1176:18:0::1;:32::i;1166:95:6:-:0;5363:13:4;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:4;;;;;;;:::i;:::-;1239:7:6::1;:15:::0;;-1:-1:-1;;1239:15:6::1;::::0;;1166:95::o;2010:106::-;1928:7;;;;2079:9;2071:38;;;;-1:-1:-1;;;2071:38:6;;18525:2:19;2071:38:6;;;18507:21:19;18564:2;18544:18;;;18537:30;-1:-1:-1;;;18583:18:19;;;18576:46;18639:18;;2071:38:6;18323:340:19;6116:602:10;-1:-1:-1;;;;;6313:18:10;;6309:403;;6367:26;6390:2;6367:22;:26::i;:::-;6407:28;:26;:28::i;6309:403::-;-1:-1:-1;;;;;6456:16:10;;6452:260;;6508:28;6531:4;6508:22;:28::i;6452:260::-;6633:28;6656:4;6633:22;:28::i;:::-;6675:26;6698:2;6675:22;:26::i;2192:152:2:-;2258:37;2277:17;2258:18;:37::i;:::-;2310:27;;-1:-1:-1;;;;;2310:27:2;;;;;;;;2192:152;:::o;7088:455::-;7171:12;-1:-1:-1;;;;;1476:19:12;;;7195:88:2;;;;-1:-1:-1;;;7195:88:2;;18870:2:19;7195:88:2;;;18852:21:19;18909:2;18889:18;;;18882:30;18948:34;18928:18;;;18921:62;-1:-1:-1;;;18999:18:19;;;18992:36;19045:19;;7195:88:2;18668:402:19;7195:88:2;7354:12;7368:23;7395:6;-1:-1:-1;;;;;7395:19:2;7415:4;7395:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7353:67;;;;7437:99;7473:7;7482:10;7437:99;;;;;;;;;;;;;;;;;:35;:99::i;816:153:17:-;878:7;951:11;961:1;952:5;;;951:11;:::i;:::-;941:21;;942:5;;;941:21;:::i;8324:144:10:-;-1:-1:-1;;;;;8407:33:10;;;;;;:24;:33;;;;;;;;3843:9:7;:18;;;;;;;8391:70:10;;8407:33;8391:15;:70::i;8442:18::-;8391:15;:70::i;8474:116::-;8530:53;8546:21;8569:13;3666:12:7;;;3579:106;7438:295:12;7584:12;7612:7;7608:119;;;-1:-1:-1;7642:10:12;7635:17;;7608:119;7683:33;7691:10;7703:12;7683:7;:33::i;8596:304:10:-;8690:17;8710:23;:21;:23::i;:::-;8690:43;-1:-1:-1;8690:43:10;8747:30;8763:9;8747:15;:30::i;:::-;:42;8743:151;;;8805:29;;;;;;;;-1:-1:-1;8805:29:10;;;;;;;;;;;;;;8848:16;;;:35;;;;;;;;;;;;;;;8596:304::o;7739:540:12:-;7898:17;;:21;7894:379;;8126:10;8120:17;8182:15;8169:10;8165:2;8161:19;8154:44;7894:379;8249:12;8242:20;;-1:-1:-1;;;8242:20:12;;;;;;;;:::i;8906:206:10:-;8999:10;;8976:7;;8999:15;;8995:111;;-1:-1:-1;9037:1:10;;8906:206;-1:-1:-1;8906:206:10:o;8995:111::-;9080:10;;9076:3;;9080:14;;9093:1;;9080:14;:::i;:::-;9076:19;;;;;;;;:::i;:::-;;;;;;;;;9069:26;;8906:206;;;:::o;8995:111::-;8906:206;;;:::o;14:250:19:-;99:1;109:113;123:6;120:1;117:13;109:113;;;199:11;;;193:18;180:11;;;173:39;145:2;138:10;109:113;;;-1:-1:-1;;256:1:19;238:16;;231:27;14:250::o;269:396::-;418:2;407:9;400:21;381:4;450:6;444:13;493:6;488:2;477:9;473:18;466:34;509:79;581:6;576:2;565:9;561:18;556:2;548:6;544:15;509:79;:::i;:::-;649:2;628:15;-1:-1:-1;;624:29:19;609:45;;;;656:2;605:54;;269:396;-1:-1:-1;;269:396:19:o;670:173::-;738:20;;-1:-1:-1;;;;;787:31:19;;777:42;;767:70;;833:1;830;823:12;848:254;916:6;924;977:2;965:9;956:7;952:23;948:32;945:52;;;993:1;990;983:12;945:52;1016:29;1035:9;1016:29;:::i;:::-;1006:39;1092:2;1077:18;;;;1064:32;;-1:-1:-1;;;848:254:19:o;1481:328::-;1558:6;1566;1574;1627:2;1615:9;1606:7;1602:23;1598:32;1595:52;;;1643:1;1640;1633:12;1595:52;1666:29;1685:9;1666:29;:::i;:::-;1656:39;;1714:38;1748:2;1737:9;1733:18;1714:38;:::i;:::-;1704:48;;1799:2;1788:9;1784:18;1771:32;1761:42;;1481:328;;;;;:::o;2003:186::-;2062:6;2115:2;2103:9;2094:7;2090:23;2086:32;2083:52;;;2131:1;2128;2121:12;2083:52;2154:29;2173:9;2154:29;:::i;2194:180::-;2253:6;2306:2;2294:9;2285:7;2281:23;2277:32;2274:52;;;2322:1;2319;2312:12;2274:52;-1:-1:-1;2345:23:19;;2194:180;-1:-1:-1;2194:180:19:o;2379:127::-;2440:10;2435:3;2431:20;2428:1;2421:31;2471:4;2468:1;2461:15;2495:4;2492:1;2485:15;2511:995;2588:6;2596;2649:2;2637:9;2628:7;2624:23;2620:32;2617:52;;;2665:1;2662;2655:12;2617:52;2688:29;2707:9;2688:29;:::i;:::-;2678:39;;2768:2;2757:9;2753:18;2740:32;2791:18;2832:2;2824:6;2821:14;2818:34;;;2848:1;2845;2838:12;2818:34;2886:6;2875:9;2871:22;2861:32;;2931:7;2924:4;2920:2;2916:13;2912:27;2902:55;;2953:1;2950;2943:12;2902:55;2989:2;2976:16;3011:2;3007;3004:10;3001:36;;;3017:18;;:::i;:::-;3092:2;3086:9;3060:2;3146:13;;-1:-1:-1;;3142:22:19;;;3166:2;3138:31;3134:40;3122:53;;;3190:18;;;3210:22;;;3187:46;3184:72;;;3236:18;;:::i;:::-;3276:10;3272:2;3265:22;3311:2;3303:6;3296:18;3351:7;3346:2;3341;3337;3333:11;3329:20;3326:33;3323:53;;;3372:1;3369;3362:12;3323:53;3428:2;3423;3419;3415:11;3410:2;3402:6;3398:15;3385:46;3473:1;3468:2;3463;3455:6;3451:15;3447:24;3440:35;3494:6;3484:16;;;;;;;2511:995;;;;;:::o;3901:260::-;3969:6;3977;4030:2;4018:9;4009:7;4005:23;4001:32;3998:52;;;4046:1;4043;4036:12;3998:52;4069:29;4088:9;4069:29;:::i;:::-;4059:39;;4117:38;4151:2;4140:9;4136:18;4117:38;:::i;:::-;4107:48;;3901:260;;;;;:::o;4166:380::-;4245:1;4241:12;;;;4288;;;4309:61;;4363:4;4355:6;4351:17;4341:27;;4309:61;4416:2;4408:6;4405:14;4385:18;4382:38;4379:161;;4462:10;4457:3;4453:20;4450:1;4443:31;4497:4;4494:1;4487:15;4525:4;4522:1;4515:15;4379:161;;4166:380;;;:::o;4551:408::-;4753:2;4735:21;;;4792:2;4772:18;;;4765:30;4831:34;4826:2;4811:18;;4804:62;-1:-1:-1;;;4897:2:19;4882:18;;4875:42;4949:3;4934:19;;4551:408::o;4964:::-;5166:2;5148:21;;;5205:2;5185:18;;;5178:30;5244:34;5239:2;5224:18;;5217:62;-1:-1:-1;;;5310:2:19;5295:18;;5288:42;5362:3;5347:19;;4964:408::o;5377:127::-;5438:10;5433:3;5429:20;5426:1;5419:31;5469:4;5466:1;5459:15;5493:4;5490:1;5483:15;5509:125;5574:9;;;5595:10;;;5592:36;;;5608:18;;:::i;6479:422::-;6568:1;6611:5;6568:1;6625:270;6646:7;6636:8;6633:21;6625:270;;;6705:4;6701:1;6697:6;6693:17;6687:4;6684:27;6681:53;;;6714:18;;:::i;:::-;6764:7;6754:8;6750:22;6747:55;;;6784:16;;;;6747:55;6863:22;;;;6823:15;;;;6625:270;;6906:806;6955:5;6985:8;6975:80;;-1:-1:-1;7026:1:19;7040:5;;6975:80;7074:4;7064:76;;-1:-1:-1;7111:1:19;7125:5;;7064:76;7156:4;7174:1;7169:59;;;;7242:1;7237:130;;;;7149:218;;7169:59;7199:1;7190:10;;7213:5;;;7237:130;7274:3;7264:8;7261:17;7258:43;;;7281:18;;:::i;:::-;-1:-1:-1;;7337:1:19;7323:16;;7352:5;;7149:218;;7451:2;7441:8;7438:16;7432:3;7426:4;7423:13;7419:36;7413:2;7403:8;7400:16;7395:2;7389:4;7386:12;7382:35;7379:77;7376:159;;;-1:-1:-1;7488:19:19;;;7520:5;;7376:159;7567:34;7592:8;7586:4;7567:34;:::i;:::-;7637:6;7633:1;7629:6;7625:19;7616:7;7613:32;7610:58;;;7648:18;;:::i;:::-;7686:20;;6906:806;-1:-1:-1;;;6906:806:19:o;7717:140::-;7775:5;7804:47;7845:4;7835:8;7831:19;7825:4;7804:47;:::i;7862:168::-;7935:9;;;7966;;7983:15;;;7977:22;;7963:37;7953:71;;8004:18;;:::i;11430:184::-;11500:6;11553:2;11541:9;11532:7;11528:23;11524:32;11521:52;;;11569:1;11566;11559:12;11521:52;-1:-1:-1;11592:16:19;;11430:184;-1:-1:-1;11430:184:19:o;14679:127::-;14740:10;14735:3;14731:20;14728:1;14721:31;14771:4;14768:1;14761:15;14795:4;14792:1;14785:15;14811:407;15013:2;14995:21;;;15052:2;15032:18;;;15025:30;15091:34;15086:2;15071:18;;15064:62;-1:-1:-1;;;15157:2:19;15142:18;;15135:41;15208:3;15193:19;;14811:407::o;15986:128::-;16053:9;;;16074:11;;;16071:37;;;16088:18;;:::i;16245:545::-;16347:2;16342:3;16339:11;16336:448;;;16383:1;16408:5;16404:2;16397:17;16453:4;16449:2;16439:19;16523:2;16511:10;16507:19;16504:1;16500:27;16494:4;16490:38;16559:4;16547:10;16544:20;16541:47;;;-1:-1:-1;16582:4:19;16541:47;16637:2;16632:3;16628:12;16625:1;16621:20;16615:4;16611:31;16601:41;;16692:82;16710:2;16703:5;16700:13;16692:82;;;16755:17;;;16736:1;16725:13;16692:82;;;16696:3;;;16245:545;;;:::o;16966:1352::-;17092:3;17086:10;17119:18;17111:6;17108:30;17105:56;;;17141:18;;:::i;:::-;17170:97;17260:6;17220:38;17252:4;17246:11;17220:38;:::i;:::-;17214:4;17170:97;:::i;:::-;17322:4;;17386:2;17375:14;;17403:1;17398:663;;;;18105:1;18122:6;18119:89;;;-1:-1:-1;18174:19:19;;;18168:26;18119:89;-1:-1:-1;;16923:1:19;16919:11;;;16915:24;16911:29;16901:40;16947:1;16943:11;;;16898:57;18221:81;;17368:944;;17398:663;16192:1;16185:14;;;16229:4;16216:18;;-1:-1:-1;;17434:20:19;;;17552:236;17566:7;17563:1;17560:14;17552:236;;;17655:19;;;17649:26;17634:42;;17747:27;;;;17715:1;17703:14;;;;17582:19;;17552:236;;;17556:3;17816:6;17807:7;17804:19;17801:201;;;17877:19;;;17871:26;-1:-1:-1;;17960:1:19;17956:14;;;17972:3;17952:24;17948:37;17944:42;17929:58;17914:74;;17801:201;-1:-1:-1;;;;;18048:1:19;18032:14;;;18028:22;18015:36;;-1:-1:-1;16966:1352:19:o;19075:287::-;19204:3;19242:6;19236:13;19258:66;19317:6;19312:3;19305:4;19297:6;19293:17;19258:66;:::i;:::-;19340:16;;;;;19075:287;-1:-1:-1;;19075:287:19:o;19367:217::-;19407:1;19433;19423:132;;19477:10;19472:3;19468:20;19465:1;19458:31;19512:4;19509:1;19502:15;19540:4;19537:1;19530:15;19423:132;-1:-1:-1;19569:9:19;;19367:217::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1740400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24651",
								"balanceOf(address)": "2605",
								"balanceOfAt(address,uint256)": "infinite",
								"burn(uint256)": "infinite",
								"burnFrom(address,uint256)": "infinite",
								"decimals()": "289",
								"decreaseAllowance(address,uint256)": "26994",
								"increaseAllowance(address,uint256)": "infinite",
								"initialize()": "infinite",
								"mint(address,uint256)": "infinite",
								"name()": "infinite",
								"owner()": "2412",
								"pause()": "infinite",
								"paused()": "2350",
								"proxiableUUID()": "infinite",
								"renounceOwnership()": "infinite",
								"snapshot()": "29872",
								"symbol()": "infinite",
								"totalSupply()": "2349",
								"totalSupplyAt(uint256)": "infinite",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "28446",
								"unpause()": "infinite",
								"upgradeTo(address)": "infinite",
								"upgradeToAndCall(address,bytes)": "infinite"
							},
							"internal": {
								"_authorizeUpgrade(address)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1018,
									"end": 2319,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 1018,
									"end": 2319,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 1018,
									"end": 2319,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 1332,
									"end": 1336,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 1289,
									"end": 1337,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 1289,
									"end": 1337,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1245,
									"end": 1300,
									"name": "CALLVALUE",
									"source": 18
								},
								{
									"begin": 1245,
									"end": 1300,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1245,
									"end": 1300,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 1245,
									"end": 1300,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 1245,
									"end": 1300,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 1245,
									"end": 1300,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1245,
									"end": 1300,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 1245,
									"end": 1300,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 1245,
									"end": 1300,
									"name": "tag",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 1245,
									"end": 1300,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1270,
									"end": 1292,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 1270,
									"end": 1290,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "5"
								},
								{
									"begin": 1270,
									"end": 1292,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 1270,
									"end": 1292,
									"name": "tag",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 1270,
									"end": 1292,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 1018,
									"end": 2319,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "14"
								},
								{
									"begin": 1018,
									"end": 2319,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 5928,
									"end": 6207,
									"name": "tag",
									"source": 4,
									"value": "5"
								},
								{
									"begin": 5928,
									"end": 6207,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 5996,
									"end": 6009,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 5996,
									"end": 6009,
									"name": "SLOAD",
									"source": 4
								},
								{
									"begin": 5996,
									"end": 6009,
									"name": "PUSH",
									"source": 4,
									"value": "100"
								},
								{
									"begin": 5996,
									"end": 6009,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 5996,
									"end": 6009,
									"name": "DIV",
									"source": 4
								},
								{
									"begin": 5996,
									"end": 6009,
									"name": "PUSH",
									"source": 4,
									"value": "FF"
								},
								{
									"begin": 5996,
									"end": 6009,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 5995,
									"end": 6009,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "8"
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "461BCD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 216,
									"end": 218,
									"name": "PUSH",
									"source": 19,
									"value": "20"
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 198,
									"end": 219,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 255,
									"end": 257,
									"name": "PUSH",
									"source": 19,
									"value": "27"
								},
								{
									"begin": 235,
									"end": 253,
									"name": "PUSH",
									"source": 19,
									"value": "24"
								},
								{
									"begin": 235,
									"end": 253,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 235,
									"end": 253,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 228,
									"end": 258,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 294,
									"end": 328,
									"name": "PUSH",
									"source": 19,
									"value": "496E697469616C697A61626C653A20636F6E747261637420697320696E697469"
								},
								{
									"begin": 274,
									"end": 292,
									"name": "PUSH",
									"source": 19,
									"value": "44"
								},
								{
									"begin": 274,
									"end": 292,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 274,
									"end": 292,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 267,
									"end": 329,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "616C697A696E67"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "C8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 345,
									"end": 363,
									"name": "PUSH",
									"source": 19,
									"value": "64"
								},
								{
									"begin": 345,
									"end": 363,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 345,
									"end": 363,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 338,
									"end": 375,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 392,
									"end": 411,
									"name": "PUSH",
									"source": 19,
									"value": "84"
								},
								{
									"begin": 392,
									"end": 411,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "SUB",
									"source": 4
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "tag",
									"source": 4,
									"value": "8"
								},
								{
									"begin": 5987,
									"end": 6053,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 6067,
									"end": 6079,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 6067,
									"end": 6079,
									"name": "SLOAD",
									"source": 4
								},
								{
									"begin": 6082,
									"end": 6097,
									"name": "PUSH",
									"source": 4,
									"value": "FF"
								},
								{
									"begin": 6067,
									"end": 6079,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 6067,
									"end": 6079,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 6067,
									"end": 6079,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 6067,
									"end": 6097,
									"name": "LT",
									"source": 4
								},
								{
									"begin": 6063,
									"end": 6201,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 6063,
									"end": 6201,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "11"
								},
								{
									"begin": 6063,
									"end": 6201,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 6113,
									"end": 6125,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "SLOAD",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FF"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 6128,
									"end": 6143,
									"name": "PUSH",
									"source": 4,
									"value": "FF"
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "OR",
									"source": 4
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 6113,
									"end": 6143,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 564,
									"end": 600,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 564,
									"end": 600,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 564,
									"end": 600,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "PUSH",
									"source": 4,
									"value": "7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498"
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 552,
									"end": 554,
									"name": "PUSH",
									"source": 19,
									"value": "20"
								},
								{
									"begin": 537,
									"end": 555,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "SUB",
									"source": 4
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 6162,
									"end": 6190,
									"name": "LOG1",
									"source": 4
								},
								{
									"begin": 6063,
									"end": 6201,
									"name": "tag",
									"source": 4,
									"value": "11"
								},
								{
									"begin": 6063,
									"end": 6201,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 5928,
									"end": 6207,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 422,
									"end": 606,
									"name": "tag",
									"source": 19,
									"value": "14"
								},
								{
									"begin": 422,
									"end": 606,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 1018,
									"end": 2319,
									"name": "PUSH",
									"source": 18,
									"value": "80"
								},
								{
									"begin": 1018,
									"end": 2319,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 1018,
									"end": 2319,
									"name": "PUSH #[$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1018,
									"end": 2319,
									"name": "PUSH [$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1018,
									"end": 2319,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1018,
									"end": 2319,
									"name": "CODECOPY",
									"source": 18
								},
								{
									"begin": 1018,
									"end": 2319,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1018,
									"end": 2319,
									"name": "ASSIGNIMMUTABLE",
									"source": 18,
									"value": "720"
								},
								{
									"begin": 1018,
									"end": 2319,
									"name": "PUSH #[$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1018,
									"end": 2319,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 1018,
									"end": 2319,
									"name": "RETURN",
									"source": 18
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e998b0591bc15c686d6dea8bfcf04d2db1fe35cbe25211987ec7f6ac98c3ca2f64736f6c63430008110033",
									".code": [
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "5C975ABB"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "29"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "95D89B41"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "30"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "A457C2D7"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "31"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "A457C2D7"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "25"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "A9059CBB"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "26"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "DD62ED3E"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "27"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "F2FDE38B"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "28"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "tag",
											"source": 18,
											"value": "31"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "95D89B41"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "22"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "9711715A"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "23"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "981B24D0"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "tag",
											"source": 18,
											"value": "30"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "79CC6790"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "32"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "79CC6790"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "18"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "8129FC1C"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "19"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "8456CB59"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "8DA5CB5B"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "21"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "tag",
											"source": 18,
											"value": "32"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "5C975ABB"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "15"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "70A08231"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "16"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "715018A6"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "17"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "tag",
											"source": 18,
											"value": "29"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "39509351"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "33"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "42966C68"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "34"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "42966C68"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "11"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "4EE2CD7E"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "12"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "4F1EF286"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "13"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "52D1902D"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "14"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "tag",
											"source": 18,
											"value": "34"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "39509351"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "8"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "3F4BA83A"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "9"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "40C10F19"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "10"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "tag",
											"source": 18,
											"value": "33"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "6FDDE03"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "2"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "95EA7B3"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "3"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "18160DDD"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "23B872DD"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "5"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "313CE567"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "6"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "3659CFE6"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "7"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "tag",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1018,
											"end": 2319,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "tag",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "tag",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "37"
										},
										{
											"begin": 2491,
											"end": 2589,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "tag",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "38"
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 2491,
											"end": 2589,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "tag",
											"source": 7,
											"value": "38"
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "tag",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "tag",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "41"
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "42"
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "43"
										},
										{
											"begin": 4768,
											"end": 4965,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "tag",
											"source": 7,
											"value": "42"
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 4768,
											"end": 4965,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "tag",
											"source": 7,
											"value": "41"
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1272,
											"end": 1286,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 1272,
											"end": 1286,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1265,
											"end": 1287,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1247,
											"end": 1288,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1247,
											"end": 1288,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 1235,
											"end": 1237,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1220,
											"end": 1238,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "38"
										},
										{
											"begin": 1107,
											"end": 1294,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "tag",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "47"
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "tag",
											"source": 7,
											"value": "47"
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3666,
											"end": 3678,
											"name": "PUSH",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 3666,
											"end": 3678,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "tag",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1445,
											"end": 1470,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 1445,
											"end": 1470,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1445,
											"end": 1470,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 1433,
											"end": 1435,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1418,
											"end": 1436,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "38"
										},
										{
											"begin": 1299,
											"end": 1476,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "tag",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "52"
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "tag",
											"source": 7,
											"value": "52"
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "41"
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "54"
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "55"
										},
										{
											"begin": 5527,
											"end": 5813,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "tag",
											"source": 7,
											"value": "54"
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "56"
										},
										{
											"begin": 5527,
											"end": 5813,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3428,
											"end": 3519,
											"name": "tag",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 3428,
											"end": 3519,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3428,
											"end": 3519,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 3428,
											"end": 3519,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3428,
											"end": 3519,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3428,
											"end": 3519,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "58"
										},
										{
											"begin": 3428,
											"end": 3519,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3428,
											"end": 3519,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3428,
											"end": 3519,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3428,
											"end": 3519,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3428,
											"end": 3519,
											"name": "tag",
											"source": 7,
											"value": "58"
										},
										{
											"begin": 3428,
											"end": 3519,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3428,
											"end": 3519,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3428,
											"end": 3519,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3510,
											"end": 3512,
											"name": "PUSH",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 1956,
											"end": 1992,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1956,
											"end": 1992,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 1944,
											"end": 1946,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1929,
											"end": 1947,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3428,
											"end": 3519,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "38"
										},
										{
											"begin": 1814,
											"end": 1998,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "tag",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "63"
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "tag",
											"source": 5,
											"value": "63"
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "65"
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "66"
										},
										{
											"begin": 3317,
											"end": 3514,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "tag",
											"source": 5,
											"value": "65"
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 3317,
											"end": 3514,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "tag",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "STOP",
											"source": 5
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "tag",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "tag",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "41"
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "70"
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "43"
										},
										{
											"begin": 6208,
											"end": 6442,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "tag",
											"source": 7,
											"value": "70"
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "71"
										},
										{
											"begin": 6208,
											"end": 6442,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1773,
											"end": 1838,
											"name": "tag",
											"source": 18,
											"value": "9"
										},
										{
											"begin": 1773,
											"end": 1838,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1773,
											"end": 1838,
											"name": "CALLVALUE",
											"source": 18
										},
										{
											"begin": 1773,
											"end": 1838,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1773,
											"end": 1838,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1773,
											"end": 1838,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "73"
										},
										{
											"begin": 1773,
											"end": 1838,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1773,
											"end": 1838,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1773,
											"end": 1838,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1773,
											"end": 1838,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1773,
											"end": 1838,
											"name": "tag",
											"source": 18,
											"value": "73"
										},
										{
											"begin": 1773,
											"end": 1838,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1773,
											"end": 1838,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1773,
											"end": 1838,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 1773,
											"end": 1838,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "75"
										},
										{
											"begin": 1773,
											"end": 1838,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "tag",
											"source": 18,
											"value": "10"
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "CALLVALUE",
											"source": 18
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "76"
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "tag",
											"source": 18,
											"value": "76"
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "78"
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "43"
										},
										{
											"begin": 1846,
											"end": 1941,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "tag",
											"source": 18,
											"value": "78"
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "79"
										},
										{
											"begin": 1846,
											"end": 1941,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 848,
											"end": 937,
											"name": "tag",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 848,
											"end": 937,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 848,
											"end": 937,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 848,
											"end": 937,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 848,
											"end": 937,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 848,
											"end": 937,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 848,
											"end": 937,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 848,
											"end": 937,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 848,
											"end": 937,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 848,
											"end": 937,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 848,
											"end": 937,
											"name": "tag",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 848,
											"end": 937,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 848,
											"end": 937,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 848,
											"end": 937,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "82"
										},
										{
											"begin": 848,
											"end": 937,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 848,
											"end": 937,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 848,
											"end": 937,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "83"
										},
										{
											"begin": 848,
											"end": 937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 848,
											"end": 937,
											"name": "tag",
											"source": 9,
											"value": "82"
										},
										{
											"begin": 848,
											"end": 937,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 848,
											"end": 937,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 848,
											"end": 937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5312,
											"end": 5574,
											"name": "tag",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 5312,
											"end": 5574,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5312,
											"end": 5574,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 5312,
											"end": 5574,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5312,
											"end": 5574,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5312,
											"end": 5574,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "85"
										},
										{
											"begin": 5312,
											"end": 5574,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5312,
											"end": 5574,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5312,
											"end": 5574,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5312,
											"end": 5574,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 5312,
											"end": 5574,
											"name": "tag",
											"source": 10,
											"value": "85"
										},
										{
											"begin": 5312,
											"end": 5574,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5312,
											"end": 5574,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "48"
										},
										{
											"begin": 5312,
											"end": 5574,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "87"
										},
										{
											"begin": 5312,
											"end": 5574,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 5312,
											"end": 5574,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 5312,
											"end": 5574,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "43"
										},
										{
											"begin": 5312,
											"end": 5574,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5312,
											"end": 5574,
											"name": "tag",
											"source": 10,
											"value": "87"
										},
										{
											"begin": 5312,
											"end": 5574,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5312,
											"end": 5574,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "88"
										},
										{
											"begin": 5312,
											"end": 5574,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3763,
											"end": 3985,
											"name": "tag",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 3763,
											"end": 3985,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3763,
											"end": 3985,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 3763,
											"end": 3985,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "91"
										},
										{
											"begin": 3763,
											"end": 3985,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 3763,
											"end": 3985,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3763,
											"end": 3985,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "92"
										},
										{
											"begin": 3763,
											"end": 3985,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3763,
											"end": 3985,
											"name": "tag",
											"source": 5,
											"value": "91"
										},
										{
											"begin": 3763,
											"end": 3985,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3763,
											"end": 3985,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "93"
										},
										{
											"begin": 3763,
											"end": 3985,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "tag",
											"source": 5,
											"value": "14"
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "94"
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "tag",
											"source": 5,
											"value": "94"
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "48"
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "96"
										},
										{
											"begin": 3006,
											"end": 3137,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "tag",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "99"
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "tag",
											"source": 6,
											"value": "99"
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "PUSH",
											"source": 6,
											"value": "FB"
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 1858,
											"end": 1942,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "tag",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "103"
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "tag",
											"source": 7,
											"value": "103"
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "105"
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 3743,
											"end": 3868,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "tag",
											"source": 7,
											"value": "105"
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3817,
											"end": 3824,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3852,
											"name": "PUSH",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3743,
											"end": 3868,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "tag",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 2071,
											"end": 2172,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "tag",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "111"
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "tag",
											"source": 9,
											"value": "111"
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 1243,
											"end": 1404,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "tag",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "114"
										},
										{
											"begin": 1243,
											"end": 1404,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1308,
											"end": 1621,
											"name": "tag",
											"source": 18,
											"value": "19"
										},
										{
											"begin": 1308,
											"end": 1621,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1308,
											"end": 1621,
											"name": "CALLVALUE",
											"source": 18
										},
										{
											"begin": 1308,
											"end": 1621,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1308,
											"end": 1621,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1308,
											"end": 1621,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "115"
										},
										{
											"begin": 1308,
											"end": 1621,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1308,
											"end": 1621,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1308,
											"end": 1621,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1308,
											"end": 1621,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1308,
											"end": 1621,
											"name": "tag",
											"source": 18,
											"value": "115"
										},
										{
											"begin": 1308,
											"end": 1621,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1308,
											"end": 1621,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1308,
											"end": 1621,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 1308,
											"end": 1621,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "117"
										},
										{
											"begin": 1308,
											"end": 1621,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1704,
											"end": 1765,
											"name": "tag",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1704,
											"end": 1765,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1704,
											"end": 1765,
											"name": "CALLVALUE",
											"source": 18
										},
										{
											"begin": 1704,
											"end": 1765,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1704,
											"end": 1765,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1704,
											"end": 1765,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "118"
										},
										{
											"begin": 1704,
											"end": 1765,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1704,
											"end": 1765,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1704,
											"end": 1765,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1704,
											"end": 1765,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1704,
											"end": 1765,
											"name": "tag",
											"source": 18,
											"value": "118"
										},
										{
											"begin": 1704,
											"end": 1765,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1704,
											"end": 1765,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1704,
											"end": 1765,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 1704,
											"end": 1765,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "120"
										},
										{
											"begin": 1704,
											"end": 1765,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "tag",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "PUSH",
											"source": 0,
											"value": "C9"
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3839,
											"end": 3890,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 3839,
											"end": 3890,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3827,
											"end": 3829,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 3812,
											"end": 3830,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1441,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 3693,
											"end": 3896,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2702,
											"end": 2804,
											"name": "tag",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 2702,
											"end": 2804,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2702,
											"end": 2804,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 2702,
											"end": 2804,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2702,
											"end": 2804,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2702,
											"end": 2804,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "126"
										},
										{
											"begin": 2702,
											"end": 2804,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2702,
											"end": 2804,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2702,
											"end": 2804,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2702,
											"end": 2804,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2702,
											"end": 2804,
											"name": "tag",
											"source": 7,
											"value": "126"
										},
										{
											"begin": 2702,
											"end": 2804,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2702,
											"end": 2804,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2702,
											"end": 2804,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 2702,
											"end": 2804,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "128"
										},
										{
											"begin": 2702,
											"end": 2804,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1629,
											"end": 1696,
											"name": "tag",
											"source": 18,
											"value": "23"
										},
										{
											"begin": 1629,
											"end": 1696,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1629,
											"end": 1696,
											"name": "CALLVALUE",
											"source": 18
										},
										{
											"begin": 1629,
											"end": 1696,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1629,
											"end": 1696,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1629,
											"end": 1696,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "130"
										},
										{
											"begin": 1629,
											"end": 1696,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1629,
											"end": 1696,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1629,
											"end": 1696,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1629,
											"end": 1696,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1629,
											"end": 1696,
											"name": "tag",
											"source": 18,
											"value": "130"
										},
										{
											"begin": 1629,
											"end": 1696,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1629,
											"end": 1696,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1629,
											"end": 1696,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 1629,
											"end": 1696,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "132"
										},
										{
											"begin": 1629,
											"end": 1696,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5673,
											"end": 5903,
											"name": "tag",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 5673,
											"end": 5903,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5673,
											"end": 5903,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 5673,
											"end": 5903,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5673,
											"end": 5903,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5673,
											"end": 5903,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 5673,
											"end": 5903,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5673,
											"end": 5903,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5673,
											"end": 5903,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5673,
											"end": 5903,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 5673,
											"end": 5903,
											"name": "tag",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 5673,
											"end": 5903,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5673,
											"end": 5903,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "48"
										},
										{
											"begin": 5673,
											"end": 5903,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "135"
										},
										{
											"begin": 5673,
											"end": 5903,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 5673,
											"end": 5903,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 5673,
											"end": 5903,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "83"
										},
										{
											"begin": 5673,
											"end": 5903,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5673,
											"end": 5903,
											"name": "tag",
											"source": 10,
											"value": "135"
										},
										{
											"begin": 5673,
											"end": 5903,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5673,
											"end": 5903,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "136"
										},
										{
											"begin": 5673,
											"end": 5903,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "tag",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "138"
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "tag",
											"source": 7,
											"value": "138"
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "41"
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "140"
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "43"
										},
										{
											"begin": 6929,
											"end": 7356,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "tag",
											"source": 7,
											"value": "140"
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "141"
										},
										{
											"begin": 6929,
											"end": 7356,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "tag",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "tag",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "41"
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "145"
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "43"
										},
										{
											"begin": 4064,
											"end": 4253,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "tag",
											"source": 7,
											"value": "145"
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "146"
										},
										{
											"begin": 4064,
											"end": 4253,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "tag",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "148"
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "tag",
											"source": 7,
											"value": "148"
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "150"
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "151"
										},
										{
											"begin": 4311,
											"end": 4460,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "tag",
											"source": 7,
											"value": "150"
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "152"
										},
										{
											"begin": 4311,
											"end": 4460,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "tag",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "154"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "tag",
											"source": 0,
											"value": "154"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 2321,
											"end": 2519,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "tag",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 2321,
											"end": 2519,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "tag",
											"source": 7,
											"value": "37"
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2545,
											"end": 2558,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 2577,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "159"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "160"
										},
										{
											"begin": 2570,
											"end": 2582,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "tag",
											"source": 7,
											"value": "159"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "161"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "160"
										},
										{
											"begin": 2570,
											"end": 2582,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "tag",
											"source": 7,
											"value": "161"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "162"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "163"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "162"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "tag",
											"source": 7,
											"value": "163"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "tag",
											"source": 7,
											"value": "164"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "164"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "tag",
											"source": 7,
											"value": "162"
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2570,
											"end": 2582,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2491,
											"end": 2589,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "tag",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4851,
											"end": 4855,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 4905,
											"end": 4937,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "168"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4921,
											"end": 4928,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4930,
											"end": 4936,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4905,
											"end": 4913,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "169"
										},
										{
											"begin": 4905,
											"end": 4937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4905,
											"end": 4937,
											"name": "tag",
											"source": 7,
											"value": "168"
										},
										{
											"begin": 4905,
											"end": 4937,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4954,
											"end": 4958,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 4947,
											"end": 4958,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4947,
											"end": 4958,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4947,
											"end": 4958,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "tag",
											"source": 7,
											"value": "165"
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4768,
											"end": 4965,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "tag",
											"source": 7,
											"value": "56"
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5654,
											"end": 5658,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 5710,
											"end": 5748,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "173"
										},
										{
											"begin": 5726,
											"end": 5730,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5741,
											"end": 5747,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5710,
											"end": 5725,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "174"
										},
										{
											"begin": 5710,
											"end": 5748,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5710,
											"end": 5748,
											"name": "tag",
											"source": 7,
											"value": "173"
										},
										{
											"begin": 5710,
											"end": 5748,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5758,
											"end": 5785,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "175"
										},
										{
											"begin": 5768,
											"end": 5772,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5774,
											"end": 5776,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5778,
											"end": 5784,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5758,
											"end": 5767,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "176"
										},
										{
											"begin": 5758,
											"end": 5785,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5758,
											"end": 5785,
											"name": "tag",
											"source": 7,
											"value": "175"
										},
										{
											"begin": 5758,
											"end": 5785,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5802,
											"end": 5806,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 5795,
											"end": 5806,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5795,
											"end": 5806,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5795,
											"end": 5806,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "tag",
											"source": 7,
											"value": "171"
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5813,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5813,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "tag",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1898,
											"end": 1904,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "720"
										},
										{
											"begin": 1881,
											"end": 1904,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1889,
											"end": 1893,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 1881,
											"end": 1904,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "179"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "180"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "181"
										},
										{
											"begin": 1873,
											"end": 1953,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "tag",
											"source": 5,
											"value": "180"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "tag",
											"source": 5,
											"value": "179"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1995,
											"end": 2001,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "720"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1971,
											"end": 2001,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1971,
											"end": 1991,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "182"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1642,
											"end": 1707,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1642,
											"end": 1707,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1642,
											"end": 1707,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1563,
											"end": 1714,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1971,
											"end": 1991,
											"name": "tag",
											"source": 5,
											"value": "182"
										},
										{
											"begin": 1971,
											"end": 1991,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1971,
											"end": 2001,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1971,
											"end": 2001,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "184"
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "180"
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "186"
										},
										{
											"begin": 1963,
											"end": 2050,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "tag",
											"source": 5,
											"value": "184"
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3400,
											"end": 3436,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "188"
										},
										{
											"begin": 3418,
											"end": 3435,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3400,
											"end": 3417,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "189"
										},
										{
											"begin": 3400,
											"end": 3436,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3400,
											"end": 3436,
											"modifierDepth": 1,
											"name": "tag",
											"source": 5,
											"value": "188"
										},
										{
											"begin": 3400,
											"end": 3436,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3487,
											"end": 3499,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3487,
											"end": 3499,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3487,
											"end": 3499,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3497,
											"end": 3498,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3487,
											"end": 3499,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3487,
											"end": 3499,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3487,
											"end": 3499,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3487,
											"end": 3499,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3487,
											"end": 3499,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3487,
											"end": 3499,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3487,
											"end": 3499,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3487,
											"end": 3499,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 3487,
											"end": 3499,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3446,
											"end": 3507,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "190"
										},
										{
											"begin": 3446,
											"end": 3507,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3468,
											"end": 3485,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3468,
											"end": 3485,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3487,
											"end": 3499,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3446,
											"end": 3467,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "195"
										},
										{
											"begin": 3446,
											"end": 3507,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3446,
											"end": 3507,
											"modifierDepth": 1,
											"name": "tag",
											"source": 5,
											"value": "190"
										},
										{
											"begin": 3446,
											"end": 3507,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3317,
											"end": 3514,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3317,
											"end": 3514,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "tag",
											"source": 7,
											"value": "71"
										},
										{
											"begin": 6208,
											"end": 6442,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6296,
											"end": 6300,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 6350,
											"end": 6414,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "168"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6366,
											"end": 6373,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 6403,
											"end": 6413,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 6375,
											"end": 6400,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "199"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6366,
											"end": 6373,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6375,
											"end": 6384,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "152"
										},
										{
											"begin": 6375,
											"end": 6400,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6375,
											"end": 6400,
											"name": "tag",
											"source": 7,
											"value": "199"
										},
										{
											"begin": 6375,
											"end": 6400,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6375,
											"end": 6413,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "200"
										},
										{
											"begin": 6375,
											"end": 6413,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6375,
											"end": 6413,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6375,
											"end": 6413,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "201"
										},
										{
											"begin": 6375,
											"end": 6413,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6375,
											"end": 6413,
											"name": "tag",
											"source": 7,
											"value": "200"
										},
										{
											"begin": 6375,
											"end": 6413,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6350,
											"end": 6358,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "169"
										},
										{
											"begin": 6350,
											"end": 6414,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1773,
											"end": 1838,
											"name": "tag",
											"source": 18,
											"value": "75"
										},
										{
											"begin": 1773,
											"end": 1838,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "203"
										},
										{
											"begin": 1334,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "204"
										},
										{
											"begin": 1334,
											"end": 1347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "tag",
											"source": 0,
											"value": "203"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1820,
											"end": 1830,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "206"
										},
										{
											"begin": 1820,
											"end": 1828,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "207"
										},
										{
											"begin": 1820,
											"end": 1830,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1820,
											"end": 1830,
											"modifierDepth": 1,
											"name": "tag",
											"source": 18,
											"value": "206"
										},
										{
											"begin": 1820,
											"end": 1830,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1773,
											"end": 1838,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "tag",
											"source": 18,
											"value": "79"
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "209"
										},
										{
											"begin": 1334,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "204"
										},
										{
											"begin": 1334,
											"end": 1347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "tag",
											"source": 0,
											"value": "209"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1916,
											"end": 1933,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "211"
										},
										{
											"begin": 1922,
											"end": 1924,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1926,
											"end": 1932,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1916,
											"end": 1921,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "212"
										},
										{
											"begin": 1916,
											"end": 1933,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1916,
											"end": 1933,
											"modifierDepth": 1,
											"name": "tag",
											"source": 18,
											"value": "211"
										},
										{
											"begin": 1916,
											"end": 1933,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1846,
											"end": 1941,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 848,
											"end": 937,
											"name": "tag",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 848,
											"end": 937,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 903,
											"end": 930,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "190"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 923,
											"end": 929,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 903,
											"end": 908,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "216"
										},
										{
											"begin": 903,
											"end": 930,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5312,
											"end": 5574,
											"name": "tag",
											"source": 10,
											"value": "88"
										},
										{
											"begin": 5312,
											"end": 5574,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5475,
											"end": 5508,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5475,
											"end": 5508,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5399,
											"end": 5406,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5475,
											"end": 5508,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5475,
											"end": 5508,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5475,
											"end": 5508,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5475,
											"end": 5499,
											"name": "PUSH",
											"source": 10,
											"value": "97"
										},
										{
											"begin": 5475,
											"end": 5508,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5475,
											"end": 5508,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5475,
											"end": 5508,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5475,
											"end": 5508,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5475,
											"end": 5508,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 5399,
											"end": 5406,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5399,
											"end": 5406,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5399,
											"end": 5406,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5399,
											"end": 5406,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5454,
											"end": 5509,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "218"
										},
										{
											"begin": 5454,
											"end": 5509,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5463,
											"end": 5473,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 5463,
											"end": 5473,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5454,
											"end": 5462,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "219"
										},
										{
											"begin": 5454,
											"end": 5509,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5454,
											"end": 5509,
											"name": "tag",
											"source": 10,
											"value": "218"
										},
										{
											"begin": 5454,
											"end": 5509,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5418,
											"end": 5509,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5418,
											"end": 5509,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5418,
											"end": 5509,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5418,
											"end": 5509,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5527,
											"end": 5538,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5527,
											"end": 5567,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "220"
										},
										{
											"begin": 5527,
											"end": 5567,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3817,
											"end": 3824,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3852,
											"name": "PUSH",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5527,
											"end": 5567,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "222"
										},
										{
											"begin": 5527,
											"end": 5567,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5527,
											"end": 5567,
											"name": "tag",
											"source": 10,
											"value": "220"
										},
										{
											"begin": 5527,
											"end": 5567,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5541,
											"end": 5546,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5527,
											"end": 5567,
											"name": "tag",
											"source": 10,
											"value": "222"
										},
										{
											"begin": 5527,
											"end": 5567,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5520,
											"end": 5567,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 5312,
											"end": 5574,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5312,
											"end": 5574,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3763,
											"end": 3985,
											"name": "tag",
											"source": 5,
											"value": "93"
										},
										{
											"begin": 3763,
											"end": 3985,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1898,
											"end": 1904,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "720"
										},
										{
											"begin": 1881,
											"end": 1904,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1889,
											"end": 1893,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 1881,
											"end": 1904,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "224"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "180"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "181"
										},
										{
											"begin": 1873,
											"end": 1953,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "tag",
											"source": 5,
											"value": "224"
										},
										{
											"begin": 1873,
											"end": 1953,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1995,
											"end": 2001,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "720"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1971,
											"end": 2001,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1971,
											"end": 1991,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "226"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1642,
											"end": 1707,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1642,
											"end": 1707,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1642,
											"end": 1707,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1563,
											"end": 1714,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1971,
											"end": 1991,
											"name": "tag",
											"source": 5,
											"value": "226"
										},
										{
											"begin": 1971,
											"end": 1991,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1971,
											"end": 2001,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1971,
											"end": 2001,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "227"
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "180"
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "186"
										},
										{
											"begin": 1963,
											"end": 2050,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "tag",
											"source": 5,
											"value": "227"
										},
										{
											"begin": 1963,
											"end": 2050,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3880,
											"end": 3916,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "230"
										},
										{
											"begin": 3898,
											"end": 3915,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3880,
											"end": 3897,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "189"
										},
										{
											"begin": 3880,
											"end": 3916,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3880,
											"end": 3916,
											"modifierDepth": 1,
											"name": "tag",
											"source": 5,
											"value": "230"
										},
										{
											"begin": 3880,
											"end": 3916,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3926,
											"end": 3978,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "211"
										},
										{
											"begin": 3948,
											"end": 3965,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3967,
											"end": 3971,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3973,
											"end": 3977,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 3926,
											"end": 3947,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "195"
										},
										{
											"begin": 3926,
											"end": 3978,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "tag",
											"source": 5,
											"value": "96"
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3084,
											"end": 3091,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2324,
											"end": 2328,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2333,
											"end": 2339,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "720"
										},
										{
											"begin": 2316,
											"end": 2339,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2316,
											"end": 2339,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 2308,
											"end": 2400,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "233"
										},
										{
											"begin": 2308,
											"end": 2400,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2308,
											"end": 2400,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2308,
											"end": 2400,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2308,
											"end": 2400,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2308,
											"end": 2400,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5841,
											"end": 5843,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 2308,
											"end": 2400,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2308,
											"end": 2400,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2308,
											"end": 2400,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5823,
											"end": 5844,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 5880,
											"end": 5882,
											"name": "PUSH",
											"source": 19,
											"value": "38"
										},
										{
											"begin": 5860,
											"end": 5878,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 5860,
											"end": 5878,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5860,
											"end": 5878,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5853,
											"end": 5883,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 5919,
											"end": 5953,
											"name": "PUSH",
											"source": 19,
											"value": "555550535570677261646561626C653A206D757374206E6F742062652063616C"
										},
										{
											"begin": 5899,
											"end": 5917,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 5899,
											"end": 5917,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5899,
											"end": 5917,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5892,
											"end": 5954,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 5990,
											"end": 6016,
											"name": "PUSH",
											"source": 19,
											"value": "6C6564207468726F7567682064656C656761746563616C6C0000000000000000"
										},
										{
											"begin": 5970,
											"end": 5988,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 5970,
											"end": 5988,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5970,
											"end": 5988,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5963,
											"end": 6017,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 6034,
											"end": 6053,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 6034,
											"end": 6053,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 2308,
											"end": 2400,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "180"
										},
										{
											"begin": 5639,
											"end": 6059,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2308,
											"end": 2400,
											"name": "tag",
											"source": 5,
											"value": "233"
										},
										{
											"begin": 2308,
											"end": 2400,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3006,
											"end": 3137,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3006,
											"end": 3137,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "tag",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 2071,
											"end": 2172,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "240"
										},
										{
											"begin": 1334,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "204"
										},
										{
											"begin": 1334,
											"end": 1347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "tag",
											"source": 0,
											"value": "240"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2135,
											"end": 2165,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "206"
										},
										{
											"begin": 2162,
											"end": 2163,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2135,
											"end": 2153,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "243"
										},
										{
											"begin": 2135,
											"end": 2165,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "tag",
											"source": 9,
											"value": "114"
										},
										{
											"begin": 1243,
											"end": 1404,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1319,
											"end": 1365,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "245"
										},
										{
											"begin": 1335,
											"end": 1342,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 1358,
											"end": 1364,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1319,
											"end": 1334,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "174"
										},
										{
											"begin": 1319,
											"end": 1365,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1319,
											"end": 1365,
											"name": "tag",
											"source": 9,
											"value": "245"
										},
										{
											"begin": 1319,
											"end": 1365,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1375,
											"end": 1397,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "211"
										},
										{
											"begin": 1381,
											"end": 1388,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1390,
											"end": 1396,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1375,
											"end": 1380,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "216"
										},
										{
											"begin": 1375,
											"end": 1397,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1308,
											"end": 1621,
											"name": "tag",
											"source": 18,
											"value": "117"
										},
										{
											"begin": 1308,
											"end": 1621,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3268,
											"end": 3287,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3291,
											"end": 3304,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 3291,
											"end": 3304,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 3291,
											"end": 3304,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3291,
											"end": 3304,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 3291,
											"end": 3304,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 3291,
											"end": 3304,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3290,
											"end": 3304,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3290,
											"end": 3304,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3336,
											"end": 3370,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3336,
											"end": 3370,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3336,
											"end": 3370,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "249"
										},
										{
											"begin": 3336,
											"end": 3370,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3354,
											"end": 3366,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3354,
											"end": 3366,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 3369,
											"end": 3370,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 3354,
											"end": 3366,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 3354,
											"end": 3366,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3354,
											"end": 3366,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3354,
											"end": 3366,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3354,
											"end": 3370,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 3336,
											"end": 3370,
											"name": "tag",
											"source": 4,
											"value": "249"
										},
										{
											"begin": 3336,
											"end": 3370,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3335,
											"end": 3443,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3335,
											"end": 3443,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "253"
										},
										{
											"begin": 3335,
											"end": 3443,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3415,
											"end": 3419,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 1476,
											"end": 1495,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 1476,
											"end": 1499,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1476,
											"end": 1499,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1476,
											"end": 1499,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3376,
											"end": 3442,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "253"
										},
										{
											"begin": 3376,
											"end": 3442,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3425,
											"end": 3437,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3425,
											"end": 3437,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 3425,
											"end": 3437,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 3425,
											"end": 3437,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3425,
											"end": 3437,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 3425,
											"end": 3442,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 3376,
											"end": 3442,
											"name": "tag",
											"source": 4,
											"value": "253"
										},
										{
											"begin": 3376,
											"end": 3442,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "254"
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6266,
											"end": 6268,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6248,
											"end": 6269,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 6305,
											"end": 6307,
											"name": "PUSH",
											"source": 19,
											"value": "2E"
										},
										{
											"begin": 6285,
											"end": 6303,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 6285,
											"end": 6303,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 6285,
											"end": 6303,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 6278,
											"end": 6308,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 6344,
											"end": 6378,
											"name": "PUSH",
											"source": 19,
											"value": "496E697469616C697A61626C653A20636F6E747261637420697320616C726561"
										},
										{
											"begin": 6324,
											"end": 6342,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 6324,
											"end": 6342,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 6324,
											"end": 6342,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 6317,
											"end": 6379,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "191E481A5B9A5D1A585B1A5E9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6395,
											"end": 6413,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 6395,
											"end": 6413,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 6395,
											"end": 6413,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 6388,
											"end": 6432,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 6449,
											"end": 6468,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 6449,
											"end": 6468,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "180"
										},
										{
											"begin": 6064,
											"end": 6474,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "tag",
											"source": 4,
											"value": "254"
										},
										{
											"begin": 3314,
											"end": 3515,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3525,
											"end": 3537,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3525,
											"end": 3541,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3525,
											"end": 3541,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3525,
											"end": 3541,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3540,
											"end": 3541,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 3525,
											"end": 3541,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 3525,
											"end": 3541,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3525,
											"end": 3541,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 3551,
											"end": 3616,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3551,
											"end": 3616,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3551,
											"end": 3616,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "257"
										},
										{
											"begin": 3551,
											"end": 3616,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3585,
											"end": 3598,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3585,
											"end": 3605,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 3551,
											"end": 3616,
											"name": "tag",
											"source": 4,
											"value": "257"
										},
										{
											"begin": 3551,
											"end": 3616,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "259"
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 18,
											"value": "C"
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "42656172204E6574776F726B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1360,
											"end": 1397,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 18,
											"value": "5"
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "42524E4B43"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1360,
											"end": 1397,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1360,
											"end": 1372,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "260"
										},
										{
											"begin": 1360,
											"end": 1397,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "tag",
											"source": 18,
											"value": "259"
										},
										{
											"begin": 1360,
											"end": 1397,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1408,
											"end": 1430,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "261"
										},
										{
											"begin": 1408,
											"end": 1428,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "262"
										},
										{
											"begin": 1408,
											"end": 1430,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1408,
											"end": 1430,
											"modifierDepth": 1,
											"name": "tag",
											"source": 18,
											"value": "261"
										},
										{
											"begin": 1408,
											"end": 1430,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1441,
											"end": 1463,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "263"
										},
										{
											"begin": 1441,
											"end": 1461,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "262"
										},
										{
											"begin": 1441,
											"end": 1463,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1441,
											"end": 1463,
											"modifierDepth": 1,
											"name": "tag",
											"source": 18,
											"value": "263"
										},
										{
											"begin": 1441,
											"end": 1463,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1474,
											"end": 1490,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "265"
										},
										{
											"begin": 1474,
											"end": 1488,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "266"
										},
										{
											"begin": 1474,
											"end": 1490,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1474,
											"end": 1490,
											"modifierDepth": 1,
											"name": "tag",
											"source": 18,
											"value": "265"
										},
										{
											"begin": 1474,
											"end": 1490,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1501,
											"end": 1518,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "267"
										},
										{
											"begin": 1501,
											"end": 1516,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "268"
										},
										{
											"begin": 1501,
											"end": 1518,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1501,
											"end": 1518,
											"modifierDepth": 1,
											"name": "tag",
											"source": 18,
											"value": "267"
										},
										{
											"begin": 1501,
											"end": 1518,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1529,
											"end": 1553,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "269"
										},
										{
											"begin": 1529,
											"end": 1551,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "262"
										},
										{
											"begin": 1529,
											"end": 1553,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1529,
											"end": 1553,
											"modifierDepth": 1,
											"name": "tag",
											"source": 18,
											"value": "269"
										},
										{
											"begin": 1529,
											"end": 1553,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1566,
											"end": 1613,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "271"
										},
										{
											"begin": 1572,
											"end": 1582,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 18
										},
										{
											"begin": 1596,
											"end": 1612,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "273"
										},
										{
											"begin": 3510,
											"end": 3512,
											"name": "PUSH",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 1596,
											"end": 1598,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 18,
											"value": "A"
										},
										{
											"begin": 1596,
											"end": 1612,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "274"
										},
										{
											"begin": 1596,
											"end": 1612,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1596,
											"end": 1612,
											"modifierDepth": 1,
											"name": "tag",
											"source": 18,
											"value": "273"
										},
										{
											"begin": 1596,
											"end": 1612,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1584,
											"end": 1612,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "275"
										},
										{
											"begin": 1584,
											"end": 1612,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1584,
											"end": 1593,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 18,
											"value": "5F5E100"
										},
										{
											"begin": 1584,
											"end": 1612,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "276"
										},
										{
											"begin": 1584,
											"end": 1612,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1584,
											"end": 1612,
											"modifierDepth": 1,
											"name": "tag",
											"source": 18,
											"value": "275"
										},
										{
											"begin": 1584,
											"end": 1612,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1566,
											"end": 1571,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "212"
										},
										{
											"begin": 1566,
											"end": 1613,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1566,
											"end": 1613,
											"modifierDepth": 1,
											"name": "tag",
											"source": 18,
											"value": "271"
										},
										{
											"begin": 1566,
											"end": 1613,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3640,
											"end": 3654,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3636,
											"end": 3735,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3636,
											"end": 3735,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "190"
										},
										{
											"begin": 3636,
											"end": 3735,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3686,
											"end": 3691,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3670,
											"end": 3691,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3670,
											"end": 3691,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3670,
											"end": 3691,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3670,
											"end": 3691,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3670,
											"end": 3691,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 1956,
											"end": 1992,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1956,
											"end": 1992,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "PUSH",
											"source": 4,
											"value": "7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498"
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1944,
											"end": 1946,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1929,
											"end": 1947,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "LOG1",
											"source": 4
										},
										{
											"begin": 3258,
											"end": 3741,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1308,
											"end": 1621,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1704,
											"end": 1765,
											"name": "tag",
											"source": 18,
											"value": "120"
										},
										{
											"begin": 1704,
											"end": 1765,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "281"
										},
										{
											"begin": 1334,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "204"
										},
										{
											"begin": 1334,
											"end": 1347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "tag",
											"source": 0,
											"value": "281"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1749,
											"end": 1757,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "206"
										},
										{
											"begin": 1749,
											"end": 1755,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "284"
										},
										{
											"begin": 1749,
											"end": 1757,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 2702,
											"end": 2804,
											"name": "tag",
											"source": 7,
											"value": "128"
										},
										{
											"begin": 2702,
											"end": 2804,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2758,
											"end": 2771,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 2790,
											"end": 2797,
											"name": "PUSH",
											"source": 7,
											"value": "37"
										},
										{
											"begin": 2783,
											"end": 2797,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2783,
											"end": 2797,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2783,
											"end": 2797,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "159"
										},
										{
											"begin": 2783,
											"end": 2797,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2783,
											"end": 2797,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "160"
										},
										{
											"begin": 2783,
											"end": 2797,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1629,
											"end": 1696,
											"name": "tag",
											"source": 18,
											"value": "132"
										},
										{
											"begin": 1629,
											"end": 1696,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "293"
										},
										{
											"begin": 1334,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "204"
										},
										{
											"begin": 1334,
											"end": 1347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "tag",
											"source": 0,
											"value": "293"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1677,
											"end": 1688,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "190"
										},
										{
											"begin": 1677,
											"end": 1686,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "296"
										},
										{
											"begin": 1677,
											"end": 1688,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5673,
											"end": 5903,
											"name": "tag",
											"source": 10,
											"value": "136"
										},
										{
											"begin": 5673,
											"end": 5903,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5745,
											"end": 5752,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5765,
											"end": 5781,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5783,
											"end": 5796,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5800,
											"end": 5843,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "298"
										},
										{
											"begin": 5809,
											"end": 5819,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5821,
											"end": 5842,
											"name": "PUSH",
											"source": 10,
											"value": "98"
										},
										{
											"begin": 5800,
											"end": 5808,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "219"
										},
										{
											"begin": 5800,
											"end": 5843,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5800,
											"end": 5843,
											"name": "tag",
											"source": 10,
											"value": "298"
										},
										{
											"begin": 5800,
											"end": 5843,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5764,
											"end": 5843,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5764,
											"end": 5843,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5764,
											"end": 5843,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5764,
											"end": 5843,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5861,
											"end": 5872,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5861,
											"end": 5896,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "299"
										},
										{
											"begin": 5861,
											"end": 5896,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3666,
											"end": 3678,
											"name": "PUSH",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 3666,
											"end": 3678,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5861,
											"end": 5896,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "301"
										},
										{
											"begin": 5861,
											"end": 5896,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5861,
											"end": 5896,
											"name": "tag",
											"source": 10,
											"value": "299"
										},
										{
											"begin": 5861,
											"end": 5896,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5875,
											"end": 5880,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5861,
											"end": 5896,
											"name": "tag",
											"source": 10,
											"value": "301"
										},
										{
											"begin": 5861,
											"end": 5896,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5854,
											"end": 5896,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 5673,
											"end": 5903,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5673,
											"end": 5903,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "tag",
											"source": 7,
											"value": "141"
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7022,
											"end": 7026,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 7022,
											"end": 7026,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7103,
											"end": 7128,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "304"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7120,
											"end": 7127,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 7103,
											"end": 7112,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "152"
										},
										{
											"begin": 7103,
											"end": 7128,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 7103,
											"end": 7128,
											"name": "tag",
											"source": 7,
											"value": "304"
										},
										{
											"begin": 7103,
											"end": 7128,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7076,
											"end": 7128,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7076,
											"end": 7128,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7166,
											"end": 7181,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7146,
											"end": 7162,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7146,
											"end": 7181,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 7146,
											"end": 7181,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "305"
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8436,
											"end": 8438,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8418,
											"end": 8439,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 8475,
											"end": 8477,
											"name": "PUSH",
											"source": 19,
											"value": "25"
										},
										{
											"begin": 8455,
											"end": 8473,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 8455,
											"end": 8473,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 8455,
											"end": 8473,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 8448,
											"end": 8478,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 8514,
											"end": 8548,
											"name": "PUSH",
											"source": 19,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 8494,
											"end": 8512,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 8494,
											"end": 8512,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 8494,
											"end": 8512,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 8487,
											"end": 8549,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8565,
											"end": 8583,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 8565,
											"end": 8583,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 8565,
											"end": 8583,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 8558,
											"end": 8593,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 8610,
											"end": 8629,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 8610,
											"end": 8629,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "180"
										},
										{
											"begin": 8234,
											"end": 8635,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "tag",
											"source": 7,
											"value": "305"
										},
										{
											"begin": 7138,
											"end": 7223,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7257,
											"end": 7317,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "308"
										},
										{
											"begin": 7266,
											"end": 7271,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7273,
											"end": 7280,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 7301,
											"end": 7316,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 7282,
											"end": 7298,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7282,
											"end": 7316,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 7257,
											"end": 7265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "169"
										},
										{
											"begin": 7257,
											"end": 7317,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 7257,
											"end": 7317,
											"name": "tag",
											"source": 7,
											"value": "308"
										},
										{
											"begin": 7257,
											"end": 7317,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7345,
											"end": 7349,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 7345,
											"end": 7349,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 6929,
											"end": 7356,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6929,
											"end": 7356,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "tag",
											"source": 7,
											"value": "146"
										},
										{
											"begin": 4064,
											"end": 4253,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4143,
											"end": 4147,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 4197,
											"end": 4225,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "168"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4214,
											"end": 4216,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4218,
											"end": 4224,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4197,
											"end": 4206,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "176"
										},
										{
											"begin": 4197,
											"end": 4225,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "tag",
											"source": 7,
											"value": "152"
										},
										{
											"begin": 4311,
											"end": 4460,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4400,
											"end": 4407,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4437,
											"name": "PUSH",
											"source": 7,
											"value": "34"
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4444,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 4426,
											"end": 4453,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4311,
											"end": 4460,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "tag",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 2321,
											"end": 2519,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "314"
										},
										{
											"begin": 1334,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "204"
										},
										{
											"begin": 1334,
											"end": 1347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "tag",
											"source": 0,
											"value": "314"
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2409,
											"end": 2431,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2409,
											"end": 2431,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2401,
											"end": 2474,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "316"
										},
										{
											"begin": 2401,
											"end": 2474,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2401,
											"end": 2474,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8842,
											"end": 8844,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 2401,
											"end": 2474,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2401,
											"end": 2474,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2401,
											"end": 2474,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8824,
											"end": 8845,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 8881,
											"end": 8883,
											"name": "PUSH",
											"source": 19,
											"value": "26"
										},
										{
											"begin": 8861,
											"end": 8879,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 8861,
											"end": 8879,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 8861,
											"end": 8879,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 8854,
											"end": 8884,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 8920,
											"end": 8954,
											"name": "PUSH",
											"source": 19,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 8900,
											"end": 8918,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 8900,
											"end": 8918,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 8900,
											"end": 8918,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 8893,
											"end": 8955,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8971,
											"end": 8989,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 8971,
											"end": 8989,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 8971,
											"end": 8989,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 8964,
											"end": 9000,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 9017,
											"end": 9036,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 9017,
											"end": 9036,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 2401,
											"end": 2474,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 8640,
											"end": 9042,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2401,
											"end": 2474,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "316"
										},
										{
											"begin": 2401,
											"end": 2474,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2484,
											"end": 2512,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "190"
										},
										{
											"begin": 2503,
											"end": 2511,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2484,
											"end": 2502,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "243"
										},
										{
											"begin": 2484,
											"end": 2512,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 10841,
											"end": 11211,
											"name": "tag",
											"source": 7,
											"value": "169"
										},
										{
											"begin": 10841,
											"end": 11211,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10972,
											"end": 10991,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 10972,
											"end": 10991,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 10964,
											"end": 11032,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "322"
										},
										{
											"begin": 10964,
											"end": 11032,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 10964,
											"end": 11032,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 10964,
											"end": 11032,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10964,
											"end": 11032,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10964,
											"end": 11032,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9249,
											"end": 9251,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 10964,
											"end": 11032,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 10964,
											"end": 11032,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10964,
											"end": 11032,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9231,
											"end": 9252,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 9288,
											"end": 9290,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 9268,
											"end": 9286,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 9268,
											"end": 9286,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 9268,
											"end": 9286,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 9261,
											"end": 9291,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 9327,
											"end": 9361,
											"name": "PUSH",
											"source": 19,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 9307,
											"end": 9325,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 9307,
											"end": 9325,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 9307,
											"end": 9325,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 9300,
											"end": 9362,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9378,
											"end": 9396,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 9378,
											"end": 9396,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 9378,
											"end": 9396,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 9371,
											"end": 9405,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 9422,
											"end": 9441,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 9422,
											"end": 9441,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 10964,
											"end": 11032,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "180"
										},
										{
											"begin": 9047,
											"end": 9447,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 10964,
											"end": 11032,
											"name": "tag",
											"source": 7,
											"value": "322"
										},
										{
											"begin": 10964,
											"end": 11032,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11050,
											"end": 11071,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11050,
											"end": 11071,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 11042,
											"end": 11110,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "325"
										},
										{
											"begin": 11042,
											"end": 11110,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 11042,
											"end": 11110,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 11042,
											"end": 11110,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11042,
											"end": 11110,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11042,
											"end": 11110,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9654,
											"end": 9656,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 11042,
											"end": 11110,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 11042,
											"end": 11110,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11042,
											"end": 11110,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9636,
											"end": 9657,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 9693,
											"end": 9695,
											"name": "PUSH",
											"source": 19,
											"value": "22"
										},
										{
											"begin": 9673,
											"end": 9691,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 9673,
											"end": 9691,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 9673,
											"end": 9691,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 9666,
											"end": 9696,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 9732,
											"end": 9766,
											"name": "PUSH",
											"source": 19,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 9712,
											"end": 9730,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 9712,
											"end": 9730,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 9712,
											"end": 9730,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 9705,
											"end": 9767,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9783,
											"end": 9801,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 9783,
											"end": 9801,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 9783,
											"end": 9801,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 9776,
											"end": 9808,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 9825,
											"end": 9844,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 9825,
											"end": 9844,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11042,
											"end": 11110,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "180"
										},
										{
											"begin": 9452,
											"end": 9850,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 11042,
											"end": 11110,
											"name": "tag",
											"source": 7,
											"value": "325"
										},
										{
											"begin": 11042,
											"end": 11110,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11132,
											"name": "PUSH",
											"source": 7,
											"value": "34"
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11139,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11148,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11157,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11157,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11121,
											"end": 11157,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 11172,
											"end": 11204,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11172,
											"end": 11204,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1445,
											"end": 1470,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 1445,
											"end": 1470,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1445,
											"end": 1470,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 11172,
											"end": 11204,
											"name": "PUSH",
											"source": 7,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 11172,
											"end": 11204,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1418,
											"end": 1436,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11172,
											"end": 11204,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 11172,
											"end": 11204,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 11172,
											"end": 11204,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 11172,
											"end": 11204,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 11172,
											"end": 11204,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 11172,
											"end": 11204,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11172,
											"end": 11204,
											"name": "LOG3",
											"source": 7
										},
										{
											"begin": 10841,
											"end": 11211,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10841,
											"end": 11211,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10841,
											"end": 11211,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10841,
											"end": 11211,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 11492,
											"end": 11933,
											"name": "tag",
											"source": 7,
											"value": "174"
										},
										{
											"begin": 11492,
											"end": 11933,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11622,
											"end": 11646,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11649,
											"end": 11674,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "330"
										},
										{
											"begin": 11659,
											"end": 11664,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 11666,
											"end": 11673,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 11649,
											"end": 11658,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "152"
										},
										{
											"begin": 11649,
											"end": 11674,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 11649,
											"end": 11674,
											"name": "tag",
											"source": 7,
											"value": "330"
										},
										{
											"begin": 11649,
											"end": 11674,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11622,
											"end": 11674,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11622,
											"end": 11674,
											"name": "POP",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11688,
											"end": 11704,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11688,
											"end": 11725,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 11684,
											"end": 11927,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "335"
										},
										{
											"begin": 11684,
											"end": 11927,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 11769,
											"end": 11775,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11749,
											"end": 11765,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11749,
											"end": 11775,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 11749,
											"end": 11775,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 11741,
											"end": 11809,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "332"
										},
										{
											"begin": 11741,
											"end": 11809,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 11741,
											"end": 11809,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 11741,
											"end": 11809,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11741,
											"end": 11809,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11741,
											"end": 11809,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 10057,
											"end": 10059,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 11741,
											"end": 11809,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 11741,
											"end": 11809,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11741,
											"end": 11809,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10039,
											"end": 10060,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 10096,
											"end": 10098,
											"name": "PUSH",
											"source": 19,
											"value": "1D"
										},
										{
											"begin": 10076,
											"end": 10094,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 10076,
											"end": 10094,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 10076,
											"end": 10094,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 10069,
											"end": 10099,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 10135,
											"end": 10166,
											"name": "PUSH",
											"source": 19,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 10115,
											"end": 10133,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 10115,
											"end": 10133,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 10115,
											"end": 10133,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 10108,
											"end": 10167,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 10184,
											"end": 10202,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 10184,
											"end": 10202,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11741,
											"end": 11809,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "180"
										},
										{
											"begin": 9855,
											"end": 10208,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 11741,
											"end": 11809,
											"name": "tag",
											"source": 7,
											"value": "332"
										},
										{
											"begin": 11741,
											"end": 11809,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11851,
											"end": 11902,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "335"
										},
										{
											"begin": 11860,
											"end": 11865,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 11867,
											"end": 11874,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 11895,
											"end": 11901,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 11876,
											"end": 11892,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 11876,
											"end": 11901,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 11851,
											"end": 11859,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "169"
										},
										{
											"begin": 11851,
											"end": 11902,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 11851,
											"end": 11902,
											"name": "tag",
											"source": 7,
											"value": "335"
										},
										{
											"begin": 11851,
											"end": 11902,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11612,
											"end": 11933,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11492,
											"end": 11933,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11492,
											"end": 11933,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11492,
											"end": 11933,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11492,
											"end": 11933,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 7810,
											"end": 8628,
											"name": "tag",
											"source": 7,
											"value": "176"
										},
										{
											"begin": 7810,
											"end": 8628,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7936,
											"end": 7954,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7936,
											"end": 7954,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 7928,
											"end": 7996,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "337"
										},
										{
											"begin": 7928,
											"end": 7996,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7928,
											"end": 7996,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7928,
											"end": 7996,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7928,
											"end": 7996,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7928,
											"end": 7996,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 10415,
											"end": 10417,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 7928,
											"end": 7996,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 7928,
											"end": 7996,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7928,
											"end": 7996,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10397,
											"end": 10418,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 10454,
											"end": 10456,
											"name": "PUSH",
											"source": 19,
											"value": "25"
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 10434,
											"end": 10452,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 10427,
											"end": 10457,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 10493,
											"end": 10527,
											"name": "PUSH",
											"source": 19,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 10473,
											"end": 10491,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 10473,
											"end": 10491,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 10473,
											"end": 10491,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 10466,
											"end": 10528,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10544,
											"end": 10562,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 10544,
											"end": 10562,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 10544,
											"end": 10562,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 10537,
											"end": 10572,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 10589,
											"end": 10608,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 10589,
											"end": 10608,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7928,
											"end": 7996,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "180"
										},
										{
											"begin": 10213,
											"end": 10614,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 7928,
											"end": 7996,
											"name": "tag",
											"source": 7,
											"value": "337"
										},
										{
											"begin": 7928,
											"end": 7996,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8014,
											"end": 8030,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8014,
											"end": 8030,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 8006,
											"end": 8070,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "340"
										},
										{
											"begin": 8006,
											"end": 8070,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 8006,
											"end": 8070,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 8006,
											"end": 8070,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8006,
											"end": 8070,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8006,
											"end": 8070,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 10821,
											"end": 10823,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 8006,
											"end": 8070,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 8006,
											"end": 8070,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8006,
											"end": 8070,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10803,
											"end": 10824,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 10860,
											"end": 10862,
											"name": "PUSH",
											"source": 19,
											"value": "23"
										},
										{
											"begin": 10840,
											"end": 10858,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 10840,
											"end": 10858,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 10840,
											"end": 10858,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 10833,
											"end": 10863,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 10899,
											"end": 10933,
											"name": "PUSH",
											"source": 19,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 10879,
											"end": 10897,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 10879,
											"end": 10897,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 10879,
											"end": 10897,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 10872,
											"end": 10934,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10950,
											"end": 10968,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 10950,
											"end": 10968,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 10950,
											"end": 10968,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 10943,
											"end": 10976,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 10993,
											"end": 11012,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 10993,
											"end": 11012,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 8006,
											"end": 8070,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "180"
										},
										{
											"begin": 10619,
											"end": 11018,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 8006,
											"end": 8070,
											"name": "tag",
											"source": 7,
											"value": "340"
										},
										{
											"begin": 8006,
											"end": 8070,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8081,
											"end": 8119,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "343"
										},
										{
											"begin": 8102,
											"end": 8106,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8108,
											"end": 8110,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8112,
											"end": 8118,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8081,
											"end": 8101,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "344"
										},
										{
											"begin": 8081,
											"end": 8119,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 8081,
											"end": 8119,
											"name": "tag",
											"source": 7,
											"value": "343"
										},
										{
											"begin": 8081,
											"end": 8119,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8152,
											"end": 8167,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8152,
											"end": 8167,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 8130,
											"end": 8149,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8152,
											"end": 8167,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8152,
											"end": 8167,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8152,
											"end": 8167,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8152,
											"end": 8161,
											"name": "PUSH",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 8152,
											"end": 8167,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8152,
											"end": 8167,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8152,
											"end": 8167,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 8152,
											"end": 8167,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8152,
											"end": 8167,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 8152,
											"end": 8167,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 8185,
											"end": 8206,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8185,
											"end": 8206,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8185,
											"end": 8206,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 8185,
											"end": 8206,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 8177,
											"end": 8249,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "345"
										},
										{
											"begin": 8177,
											"end": 8249,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 8177,
											"end": 8249,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 8177,
											"end": 8249,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8177,
											"end": 8249,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8177,
											"end": 8249,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11225,
											"end": 11227,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 8177,
											"end": 8249,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 8177,
											"end": 8249,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8177,
											"end": 8249,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11207,
											"end": 11228,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 11264,
											"end": 11266,
											"name": "PUSH",
											"source": 19,
											"value": "26"
										},
										{
											"begin": 11244,
											"end": 11262,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 11244,
											"end": 11262,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 11244,
											"end": 11262,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11237,
											"end": 11267,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 11303,
											"end": 11337,
											"name": "PUSH",
											"source": 19,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 11283,
											"end": 11301,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 11283,
											"end": 11301,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 11283,
											"end": 11301,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11276,
											"end": 11338,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11354,
											"end": 11372,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 11354,
											"end": 11372,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 11354,
											"end": 11372,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11347,
											"end": 11383,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 11400,
											"end": 11419,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 11400,
											"end": 11419,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 8177,
											"end": 8249,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "180"
										},
										{
											"begin": 11023,
											"end": 11425,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 8177,
											"end": 8249,
											"name": "tag",
											"source": 7,
											"value": "345"
										},
										{
											"begin": 8177,
											"end": 8249,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8283,
											"end": 8292,
											"name": "PUSH",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8283,
											"end": 8298,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 8301,
											"end": 8321,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 8301,
											"end": 8321,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 8301,
											"end": 8321,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 8283,
											"end": 8321,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8283,
											"end": 8321,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8511,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8511,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8511,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8511,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8511,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8511,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8511,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8511,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8511,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8511,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8521,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8521,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8521,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8521,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8521,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8498,
											"end": 8521,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "PUSH",
											"source": 7,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "348"
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8315,
											"end": 8321,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1445,
											"end": 1470,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1445,
											"end": 1470,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 1433,
											"end": 1435,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1418,
											"end": 1436,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1418,
											"end": 1436,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 1299,
											"end": 1476,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "tag",
											"source": 7,
											"value": "348"
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8547,
											"end": 8573,
											"name": "LOG3",
											"source": 7
										},
										{
											"begin": 8584,
											"end": 8621,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "335"
										},
										{
											"begin": 2938,
											"end": 3912,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2200,
											"end": 2316,
											"name": "tag",
											"source": 18,
											"value": "189"
										},
										{
											"begin": 2200,
											"end": 2316,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1334,
											"end": 1347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "190"
										},
										{
											"begin": 1334,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "204"
										},
										{
											"begin": 1334,
											"end": 1347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2938,
											"end": 3912,
											"name": "tag",
											"source": 2,
											"value": "195"
										},
										{
											"begin": 2938,
											"end": 3912,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 951,
											"end": 1017,
											"name": "PUSH",
											"source": 2,
											"value": "4910FDFA16FED3260ED0E7147F7CC6DA11A60208B5B9406D12A635614FFD9143"
										},
										{
											"begin": 3384,
											"end": 3443,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3384,
											"end": 3443,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 3384,
											"end": 3443,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3380,
											"end": 3906,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3380,
											"end": 3906,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "360"
										},
										{
											"begin": 3380,
											"end": 3906,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3459,
											"end": 3496,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "361"
										},
										{
											"begin": 3478,
											"end": 3495,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3459,
											"end": 3477,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "362"
										},
										{
											"begin": 3459,
											"end": 3496,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3459,
											"end": 3496,
											"name": "tag",
											"source": 2,
											"value": "361"
										},
										{
											"begin": 3459,
											"end": 3496,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2938,
											"end": 3912,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2938,
											"end": 3912,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2938,
											"end": 3912,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2938,
											"end": 3912,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3380,
											"end": 3906,
											"name": "tag",
											"source": 2,
											"value": "360"
										},
										{
											"begin": 3380,
											"end": 3906,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3560,
											"end": 3577,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3531,
											"end": 3592,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3592,
											"name": "PUSH",
											"source": 2,
											"value": "52D1902D"
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "364"
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "365"
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "366"
										},
										{
											"begin": 3531,
											"end": 3594,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "tag",
											"source": 2,
											"value": "365"
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "tag",
											"source": 2,
											"value": "364"
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3527,
											"end": 3829,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "367"
										},
										{
											"begin": 3527,
											"end": 3829,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3814,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3758,
											"end": 3814,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3758,
											"end": 3814,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3814,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11821,
											"end": 11823,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 3758,
											"end": 3814,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3758,
											"end": 3814,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3758,
											"end": 3814,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11803,
											"end": 11824,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 11860,
											"end": 11862,
											"name": "PUSH",
											"source": 19,
											"value": "2E"
										},
										{
											"begin": 11840,
											"end": 11858,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 11840,
											"end": 11858,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 11840,
											"end": 11858,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11833,
											"end": 11863,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 11899,
											"end": 11933,
											"name": "PUSH",
											"source": 19,
											"value": "45524331393637557067726164653A206E657720696D706C656D656E74617469"
										},
										{
											"begin": 11879,
											"end": 11897,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 11879,
											"end": 11897,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 11879,
											"end": 11897,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11872,
											"end": 11934,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6F6E206973206E6F742055555053"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11950,
											"end": 11968,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 11950,
											"end": 11968,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 11950,
											"end": 11968,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 11943,
											"end": 11987,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 12004,
											"end": 12023,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 12004,
											"end": 12023,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3758,
											"end": 3814,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 11619,
											"end": 12029,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3527,
											"end": 3829,
											"name": "tag",
											"source": 2,
											"value": "367"
										},
										{
											"begin": 3527,
											"end": 3829,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3644,
											"end": 3672,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3644,
											"end": 3672,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 3636,
											"end": 3718,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "374"
										},
										{
											"begin": 3636,
											"end": 3718,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3636,
											"end": 3718,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3636,
											"end": 3718,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3636,
											"end": 3718,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3636,
											"end": 3718,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12236,
											"end": 12238,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 3636,
											"end": 3718,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3636,
											"end": 3718,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3636,
											"end": 3718,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12218,
											"end": 12239,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 12275,
											"end": 12277,
											"name": "PUSH",
											"source": 19,
											"value": "29"
										},
										{
											"begin": 12255,
											"end": 12273,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 12255,
											"end": 12273,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 12255,
											"end": 12273,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 12248,
											"end": 12278,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 12314,
											"end": 12348,
											"name": "PUSH",
											"source": 19,
											"value": "45524331393637557067726164653A20756E737570706F727465642070726F78"
										},
										{
											"begin": 12294,
											"end": 12312,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 12294,
											"end": 12312,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 12294,
											"end": 12312,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 12287,
											"end": 12349,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1A58589B1955555251"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "BA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12365,
											"end": 12383,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 12365,
											"end": 12383,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 12365,
											"end": 12383,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 12358,
											"end": 12397,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 12414,
											"end": 12433,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 12414,
											"end": 12433,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3636,
											"end": 3718,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 12034,
											"end": 12439,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3636,
											"end": 3718,
											"name": "tag",
											"source": 2,
											"value": "374"
										},
										{
											"begin": 3636,
											"end": 3718,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3595,
											"end": 3733,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3842,
											"end": 3895,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "361"
										},
										{
											"begin": 3860,
											"end": 3877,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3879,
											"end": 3883,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3885,
											"end": 3894,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3842,
											"end": 3859,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "378"
										},
										{
											"begin": 3842,
											"end": 3895,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1599,
											"end": 1729,
											"name": "tag",
											"source": 0,
											"value": "204"
										},
										{
											"begin": 1599,
											"end": 1729,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "PUSH",
											"source": 0,
											"value": "C9"
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1513,
											"end": 1519,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 1662,
											"end": 1685,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "206"
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12646,
											"end": 12648,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12628,
											"end": 12649,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 12628,
											"end": 12649,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 12628,
											"end": 12649,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 12665,
											"end": 12683,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 12665,
											"end": 12683,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 12665,
											"end": 12683,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 12658,
											"end": 12688,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 12724,
											"end": 12758,
											"name": "PUSH",
											"source": 19,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 12704,
											"end": 12722,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 12704,
											"end": 12722,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 12704,
											"end": 12722,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 12697,
											"end": 12759,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 12776,
											"end": 12794,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 12776,
											"end": 12794,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1654,
											"end": 1722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 12444,
											"end": 12800,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2676,
											"end": 2793,
											"name": "tag",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 2676,
											"end": 2793,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1729,
											"end": 1745,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "386"
										},
										{
											"begin": 1729,
											"end": 1743,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "387"
										},
										{
											"begin": 1729,
											"end": 1745,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1729,
											"end": 1745,
											"name": "tag",
											"source": 6,
											"value": "386"
										},
										{
											"begin": 1729,
											"end": 1745,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2734,
											"end": 2741,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "FB"
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2734,
											"end": 2749,
											"modifierDepth": 1,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2734,
											"end": 2749,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 2764,
											"end": 2786,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 2773,
											"end": 2785,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "389"
										},
										{
											"begin": 2773,
											"end": 2785,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2764,
											"end": 2786,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2764,
											"end": 2786,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3857,
											"end": 3889,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 3857,
											"end": 3889,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 3857,
											"end": 3889,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 3839,
											"end": 3890,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 3839,
											"end": 3890,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3827,
											"end": 3829,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 3812,
											"end": 3830,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 2764,
											"end": 2786,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2764,
											"end": 2786,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2764,
											"end": 2786,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2764,
											"end": 2786,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2764,
											"end": 2786,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2764,
											"end": 2786,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2764,
											"end": 2786,
											"modifierDepth": 1,
											"name": "LOG1",
											"source": 6
										},
										{
											"begin": 2676,
											"end": 2793,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8904,
											"end": 9439,
											"name": "tag",
											"source": 7,
											"value": "212"
										},
										{
											"begin": 8904,
											"end": 9439,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8987,
											"end": 9008,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8987,
											"end": 9008,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 8979,
											"end": 9044,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "392"
										},
										{
											"begin": 8979,
											"end": 9044,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 8979,
											"end": 9044,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 8979,
											"end": 9044,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8979,
											"end": 9044,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8979,
											"end": 9044,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13007,
											"end": 13009,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 8979,
											"end": 9044,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 8979,
											"end": 9044,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8979,
											"end": 9044,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12989,
											"end": 13010,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 13046,
											"end": 13048,
											"name": "PUSH",
											"source": 19,
											"value": "1F"
										},
										{
											"begin": 13026,
											"end": 13044,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 13026,
											"end": 13044,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 13026,
											"end": 13044,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 13019,
											"end": 13049,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 13085,
											"end": 13118,
											"name": "PUSH",
											"source": 19,
											"value": "45524332303A206D696E7420746F20746865207A65726F206164647265737300"
										},
										{
											"begin": 13065,
											"end": 13083,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 13065,
											"end": 13083,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 13065,
											"end": 13083,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 13058,
											"end": 13119,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 13136,
											"end": 13154,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 13136,
											"end": 13154,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 8979,
											"end": 9044,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "180"
										},
										{
											"begin": 12805,
											"end": 13160,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 8979,
											"end": 9044,
											"name": "tag",
											"source": 7,
											"value": "392"
										},
										{
											"begin": 8979,
											"end": 9044,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9055,
											"end": 9104,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "395"
										},
										{
											"begin": 9084,
											"end": 9085,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9088,
											"end": 9095,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 9097,
											"end": 9103,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 9055,
											"end": 9075,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "344"
										},
										{
											"begin": 9055,
											"end": 9104,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 9055,
											"end": 9104,
											"name": "tag",
											"source": 7,
											"value": "395"
										},
										{
											"begin": 9055,
											"end": 9104,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9131,
											"end": 9137,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 9115,
											"end": 9127,
											"name": "PUSH",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 9115,
											"end": 9127,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9115,
											"end": 9137,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9115,
											"end": 9137,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9115,
											"end": 9137,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 9115,
											"end": 9137,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "396"
										},
										{
											"begin": 9115,
											"end": 9137,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9115,
											"end": 9137,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9115,
											"end": 9137,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "201"
										},
										{
											"begin": 9115,
											"end": 9137,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 9115,
											"end": 9137,
											"name": "tag",
											"source": 7,
											"value": "396"
										},
										{
											"begin": 9115,
											"end": 9137,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9115,
											"end": 9137,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9115,
											"end": 9137,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9115,
											"end": 9137,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9283,
											"end": 9301,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9283,
											"end": 9301,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 9283,
											"end": 9301,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9283,
											"end": 9301,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9283,
											"end": 9301,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9283,
											"end": 9301,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9283,
											"end": 9292,
											"name": "PUSH",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 9283,
											"end": 9301,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9283,
											"end": 9301,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9283,
											"end": 9301,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9283,
											"end": 9301,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9283,
											"end": 9301,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 9283,
											"end": 9301,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 9283,
											"end": 9301,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 9283,
											"end": 9301,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 9283,
											"end": 9311,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 9283,
											"end": 9311,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 9283,
											"end": 9311,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 9283,
											"end": 9311,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9283,
											"end": 9311,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9283,
											"end": 9311,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 9336,
											"end": 9373,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1445,
											"end": 1470,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 1445,
											"end": 1470,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1445,
											"end": 1470,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 9336,
											"end": 9373,
											"name": "PUSH",
											"source": 7,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 9336,
											"end": 9373,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1418,
											"end": 1436,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 9336,
											"end": 9373,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 9336,
											"end": 9373,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 9336,
											"end": 9373,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 9336,
											"end": 9373,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9336,
											"end": 9373,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 9336,
											"end": 9373,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9336,
											"end": 9373,
											"name": "LOG3",
											"source": 7
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1846,
											"end": 1941,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1846,
											"end": 1941,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 9759,
											"end": 10418,
											"name": "tag",
											"source": 7,
											"value": "216"
										},
										{
											"begin": 9759,
											"end": 10418,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9842,
											"end": 9863,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9842,
											"end": 9863,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 9834,
											"end": 9901,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "400"
										},
										{
											"begin": 9834,
											"end": 9901,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 9834,
											"end": 9901,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 9834,
											"end": 9901,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9834,
											"end": 9901,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9834,
											"end": 9901,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13367,
											"end": 13369,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 9834,
											"end": 9901,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 9834,
											"end": 9901,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9834,
											"end": 9901,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13349,
											"end": 13370,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 13406,
											"end": 13408,
											"name": "PUSH",
											"source": 19,
											"value": "21"
										},
										{
											"begin": 13386,
											"end": 13404,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 13386,
											"end": 13404,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 13386,
											"end": 13404,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 13379,
											"end": 13409,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 13445,
											"end": 13479,
											"name": "PUSH",
											"source": 19,
											"value": "45524332303A206275726E2066726F6D20746865207A65726F20616464726573"
										},
										{
											"begin": 13425,
											"end": 13443,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 13425,
											"end": 13443,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 13425,
											"end": 13443,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 13418,
											"end": 13480,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "73"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13496,
											"end": 13514,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 13496,
											"end": 13514,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 13496,
											"end": 13514,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 13489,
											"end": 13520,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 13537,
											"end": 13556,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 13537,
											"end": 13556,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 9834,
											"end": 9901,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "180"
										},
										{
											"begin": 13165,
											"end": 13562,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 9834,
											"end": 9901,
											"name": "tag",
											"source": 7,
											"value": "400"
										},
										{
											"begin": 9834,
											"end": 9901,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9912,
											"end": 9961,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "403"
										},
										{
											"begin": 9933,
											"end": 9940,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9950,
											"end": 9951,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9954,
											"end": 9960,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 9912,
											"end": 9932,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "344"
										},
										{
											"begin": 9912,
											"end": 9961,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 9912,
											"end": 9961,
											"name": "tag",
											"source": 7,
											"value": "403"
										},
										{
											"begin": 9912,
											"end": 9961,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9997,
											"end": 10015,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9997,
											"end": 10015,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 9972,
											"end": 9994,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9997,
											"end": 10015,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9997,
											"end": 10015,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9997,
											"end": 10015,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9997,
											"end": 10006,
											"name": "PUSH",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 9997,
											"end": 10015,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9997,
											"end": 10015,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9997,
											"end": 10015,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 9997,
											"end": 10015,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9997,
											"end": 10015,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 9997,
											"end": 10015,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 10033,
											"end": 10057,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10033,
											"end": 10057,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10033,
											"end": 10057,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 10033,
											"end": 10057,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 10025,
											"end": 10096,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "404"
										},
										{
											"begin": 10025,
											"end": 10096,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 10025,
											"end": 10096,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 10025,
											"end": 10096,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10025,
											"end": 10096,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10025,
											"end": 10096,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13769,
											"end": 13771,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 10025,
											"end": 10096,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 10025,
											"end": 10096,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10025,
											"end": 10096,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13751,
											"end": 13772,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 13808,
											"end": 13810,
											"name": "PUSH",
											"source": 19,
											"value": "22"
										},
										{
											"begin": 13788,
											"end": 13806,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 13788,
											"end": 13806,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 13788,
											"end": 13806,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 13781,
											"end": 13811,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 13847,
											"end": 13881,
											"name": "PUSH",
											"source": 19,
											"value": "45524332303A206275726E20616D6F756E7420657863656564732062616C616E"
										},
										{
											"begin": 13827,
											"end": 13845,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 13827,
											"end": 13845,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 13827,
											"end": 13845,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 13820,
											"end": 13882,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13898,
											"end": 13916,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 13898,
											"end": 13916,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 13898,
											"end": 13916,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 13891,
											"end": 13923,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 13940,
											"end": 13959,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 13940,
											"end": 13959,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 10025,
											"end": 10096,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "180"
										},
										{
											"begin": 13567,
											"end": 13965,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 10025,
											"end": 10096,
											"name": "tag",
											"source": 7,
											"value": "404"
										},
										{
											"begin": 10025,
											"end": 10096,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10130,
											"end": 10148,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 10130,
											"end": 10148,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 10130,
											"end": 10148,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 10130,
											"end": 10148,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10130,
											"end": 10148,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10130,
											"end": 10148,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 10130,
											"end": 10139,
											"name": "PUSH",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 10130,
											"end": 10148,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 10130,
											"end": 10148,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10130,
											"end": 10148,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10130,
											"end": 10148,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 10130,
											"end": 10148,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 10130,
											"end": 10148,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10130,
											"end": 10148,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 10130,
											"end": 10148,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 10151,
											"end": 10174,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 10151,
											"end": 10174,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 10151,
											"end": 10174,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 10130,
											"end": 10174,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10130,
											"end": 10174,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 10267,
											"end": 10279,
											"name": "PUSH",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 10267,
											"end": 10289,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10267,
											"end": 10289,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 10267,
											"end": 10289,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 10267,
											"end": 10289,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10267,
											"end": 10289,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 10267,
											"end": 10289,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10267,
											"end": 10289,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 10315,
											"end": 10352,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1445,
											"end": 1470,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 1445,
											"end": 1470,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1445,
											"end": 1470,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 10130,
											"end": 10148,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10130,
											"end": 10148,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 10130,
											"end": 10148,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10315,
											"end": 10352,
											"name": "PUSH",
											"source": 7,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 10315,
											"end": 10352,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1418,
											"end": 1436,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 10315,
											"end": 10352,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 10315,
											"end": 10352,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 10315,
											"end": 10352,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10315,
											"end": 10352,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10315,
											"end": 10352,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 10315,
											"end": 10352,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10315,
											"end": 10352,
											"name": "LOG3",
											"source": 7
										},
										{
											"begin": 2938,
											"end": 3912,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2938,
											"end": 3912,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2938,
											"end": 3912,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2938,
											"end": 3912,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6724,
											"end": 8318,
											"name": "tag",
											"source": 10,
											"value": "219"
										},
										{
											"begin": 6724,
											"end": 8318,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6813,
											"end": 6817,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6819,
											"end": 6826,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6859,
											"end": 6860,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6846,
											"end": 6856,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6846,
											"end": 6860,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 6838,
											"end": 6887,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "410"
										},
										{
											"begin": 6838,
											"end": 6887,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 6838,
											"end": 6887,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6838,
											"end": 6887,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6838,
											"end": 6887,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6838,
											"end": 6887,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 14172,
											"end": 14174,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 6838,
											"end": 6887,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 6838,
											"end": 6887,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6838,
											"end": 6887,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 14154,
											"end": 14175,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 14211,
											"end": 14213,
											"name": "PUSH",
											"source": 19,
											"value": "16"
										},
										{
											"begin": 14191,
											"end": 14209,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 14191,
											"end": 14209,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 14191,
											"end": 14209,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 14184,
											"end": 14214,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4552433230536E617073686F743A206964206973203"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "54"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14230,
											"end": 14248,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 14230,
											"end": 14248,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 14230,
											"end": 14248,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 14223,
											"end": 14275,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 14292,
											"end": 14310,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 14292,
											"end": 14310,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 6838,
											"end": 6887,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 13970,
											"end": 14316,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 6838,
											"end": 6887,
											"name": "tag",
											"source": 10,
											"value": "410"
										},
										{
											"begin": 6838,
											"end": 6887,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6919,
											"end": 6942,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "413"
										},
										{
											"begin": 6919,
											"end": 6940,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "414"
										},
										{
											"begin": 6919,
											"end": 6942,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6919,
											"end": 6942,
											"name": "tag",
											"source": 10,
											"value": "413"
										},
										{
											"begin": 6919,
											"end": 6942,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6905,
											"end": 6915,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6905,
											"end": 6942,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 6905,
											"end": 6942,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 6897,
											"end": 6976,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "415"
										},
										{
											"begin": 6897,
											"end": 6976,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 6897,
											"end": 6976,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6897,
											"end": 6976,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6897,
											"end": 6976,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6897,
											"end": 6976,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 14523,
											"end": 14525,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 6897,
											"end": 6976,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 6897,
											"end": 6976,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6897,
											"end": 6976,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 14505,
											"end": 14526,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 14562,
											"end": 14564,
											"name": "PUSH",
											"source": 19,
											"value": "1D"
										},
										{
											"begin": 14542,
											"end": 14560,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 14542,
											"end": 14560,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 14542,
											"end": 14560,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 14535,
											"end": 14565,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 14601,
											"end": 14632,
											"name": "PUSH",
											"source": 19,
											"value": "4552433230536E617073686F743A206E6F6E6578697374656E74206964000000"
										},
										{
											"begin": 14581,
											"end": 14599,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 14581,
											"end": 14599,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 14581,
											"end": 14599,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 14574,
											"end": 14633,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 14650,
											"end": 14668,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 14650,
											"end": 14668,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 6897,
											"end": 6976,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 14321,
											"end": 14674,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 6897,
											"end": 6976,
											"name": "tag",
											"source": 10,
											"value": "415"
										},
										{
											"begin": 6897,
											"end": 6976,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8099,
											"end": 8112,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8115,
											"end": 8155,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "418"
										},
										{
											"begin": 8115,
											"end": 8124,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 8144,
											"end": 8154,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 8115,
											"end": 8143,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "419"
										},
										{
											"begin": 8115,
											"end": 8155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8115,
											"end": 8155,
											"name": "tag",
											"source": 10,
											"value": "418"
										},
										{
											"begin": 8115,
											"end": 8155,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8179,
											"end": 8199,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 8179,
											"end": 8199,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 8099,
											"end": 8155,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8099,
											"end": 8155,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8170,
											"end": 8199,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8170,
											"end": 8199,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 8166,
											"end": 8312,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "420"
										},
										{
											"begin": 8166,
											"end": 8312,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8223,
											"end": 8228,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8230,
											"end": 8231,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8215,
											"end": 8232,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 8215,
											"end": 8232,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8215,
											"end": 8232,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 8215,
											"end": 8232,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8215,
											"end": 8232,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8215,
											"end": 8232,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "409"
										},
										{
											"begin": 8215,
											"end": 8232,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8166,
											"end": 8312,
											"name": "tag",
											"source": 10,
											"value": "420"
										},
										{
											"begin": 8166,
											"end": 8312,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8271,
											"end": 8275,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 8277,
											"end": 8286,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 8277,
											"end": 8293,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 8277,
											"end": 8293,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8294,
											"end": 8299,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8277,
											"end": 8300,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8277,
											"end": 8300,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 8277,
											"end": 8300,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8277,
											"end": 8300,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 8277,
											"end": 8300,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "423"
										},
										{
											"begin": 8277,
											"end": 8300,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8277,
											"end": 8300,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "423"
										},
										{
											"begin": 8277,
											"end": 8300,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "424"
										},
										{
											"begin": 8277,
											"end": 8300,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8277,
											"end": 8300,
											"name": "tag",
											"source": 10,
											"value": "423"
										},
										{
											"begin": 8277,
											"end": 8300,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8277,
											"end": 8300,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8277,
											"end": 8300,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8277,
											"end": 8300,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8277,
											"end": 8300,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8277,
											"end": 8300,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8277,
											"end": 8300,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 8277,
											"end": 8300,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8277,
											"end": 8300,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 8263,
											"end": 8301,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 8263,
											"end": 8301,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8263,
											"end": 8301,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 8263,
											"end": 8301,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8263,
											"end": 8301,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8263,
											"end": 8301,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "409"
										},
										{
											"begin": 8263,
											"end": 8301,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8166,
											"end": 8312,
											"name": "tag",
											"source": 10,
											"value": "421"
										},
										{
											"begin": 8166,
											"end": 8312,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6828,
											"end": 8318,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6724,
											"end": 8318,
											"name": "tag",
											"source": 10,
											"value": "409"
										},
										{
											"begin": 6724,
											"end": 8318,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6724,
											"end": 8318,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6724,
											"end": 8318,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6724,
											"end": 8318,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6724,
											"end": 8318,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6724,
											"end": 8318,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6724,
											"end": 8318,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2673,
											"end": 2860,
											"name": "tag",
											"source": 0,
											"value": "243"
										},
										{
											"begin": 2673,
											"end": 2860,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "PUSH",
											"source": 0,
											"value": "C9"
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2813,
											"end": 2853,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2813,
											"end": 2853,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2781,
											"end": 2798,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2813,
											"end": 2853,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2813,
											"end": 2853,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2746,
											"end": 2762,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2746,
											"end": 2762,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2813,
											"end": 2853,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2736,
											"end": 2860,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2673,
											"end": 2860,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2673,
											"end": 2860,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2114,
											"end": 2261,
											"name": "tag",
											"source": 7,
											"value": "260"
										},
										{
											"begin": 2114,
											"end": 2261,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "429"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "180"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "431"
										},
										{
											"begin": 5355,
											"end": 5424,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "tag",
											"source": 4,
											"value": "429"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2216,
											"end": 2254,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "211"
										},
										{
											"begin": 2239,
											"end": 2244,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2246,
											"end": 2253,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2216,
											"end": 2238,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "434"
										},
										{
											"begin": 2216,
											"end": 2254,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 594,
											"end": 659,
											"name": "tag",
											"source": 9,
											"value": "262"
										},
										{
											"begin": 594,
											"end": 659,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "206"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "180"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "431"
										},
										{
											"begin": 5355,
											"end": 5424,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1003,
											"end": 1098,
											"name": "tag",
											"source": 0,
											"value": "266"
										},
										{
											"begin": 1003,
											"end": 1098,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "444"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "180"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "431"
										},
										{
											"begin": 5355,
											"end": 5424,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "tag",
											"source": 4,
											"value": "444"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1065,
											"end": 1091,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "206"
										},
										{
											"begin": 1065,
											"end": 1089,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "448"
										},
										{
											"begin": 1065,
											"end": 1091,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1063,
											"end": 1160,
											"name": "tag",
											"source": 6,
											"value": "268"
										},
										{
											"begin": 1063,
											"end": 1160,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "450"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "180"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "431"
										},
										{
											"begin": 5355,
											"end": 5424,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "tag",
											"source": 4,
											"value": "450"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1126,
											"end": 1153,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "206"
										},
										{
											"begin": 1126,
											"end": 1151,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "454"
										},
										{
											"begin": 1126,
											"end": 1153,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2429,
											"end": 2544,
											"name": "tag",
											"source": 6,
											"value": "284"
										},
										{
											"begin": 2429,
											"end": 2544,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1482,
											"end": 1501,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "460"
										},
										{
											"begin": 1482,
											"end": 1499,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "461"
										},
										{
											"begin": 1482,
											"end": 1501,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1482,
											"end": 1501,
											"name": "tag",
											"source": 6,
											"value": "460"
										},
										{
											"begin": 1482,
											"end": 1501,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2488,
											"end": 2495,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "FB"
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2488,
											"end": 2502,
											"modifierDepth": 1,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2498,
											"end": 2502,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 2488,
											"end": 2502,
											"modifierDepth": 1,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2488,
											"end": 2502,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 2517,
											"end": 2537,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258"
										},
										{
											"begin": 2524,
											"end": 2536,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "389"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 929,
											"end": 939,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 850,
											"end": 946,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4802,
											"end": 5019,
											"name": "tag",
											"source": 10,
											"value": "296"
										},
										{
											"begin": 4802,
											"end": 5019,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4849,
											"end": 4856,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4868,
											"end": 4898,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "466"
										},
										{
											"begin": 4868,
											"end": 4886,
											"name": "PUSH",
											"source": 10,
											"value": "9A"
										},
										{
											"begin": 1043,
											"end": 1062,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 1043,
											"end": 1062,
											"name": "SLOAD",
											"source": 15
										},
										{
											"begin": 1061,
											"end": 1062,
											"name": "PUSH",
											"source": 15,
											"value": "1"
										},
										{
											"begin": 1043,
											"end": 1062,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 1043,
											"end": 1062,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 1043,
											"end": 1062,
											"name": "SSTORE",
											"source": 15
										},
										{
											"begin": 956,
											"end": 1079,
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 4868,
											"end": 4898,
											"name": "tag",
											"source": 10,
											"value": "466"
										},
										{
											"begin": 4868,
											"end": 4898,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4909,
											"end": 4926,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4929,
											"end": 4952,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "468"
										},
										{
											"begin": 4929,
											"end": 4950,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "414"
										},
										{
											"begin": 4929,
											"end": 4952,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4929,
											"end": 4952,
											"name": "tag",
											"source": 10,
											"value": "468"
										},
										{
											"begin": 4929,
											"end": 4952,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4909,
											"end": 4952,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4909,
											"end": 4952,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4967,
											"end": 4986,
											"name": "PUSH",
											"source": 10,
											"value": "8030E83B04D87BEF53480E26263266D6CA66863AA8506ACA6F2559D18AA1CB67"
										},
										{
											"begin": 4976,
											"end": 4985,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4967,
											"end": 4986,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4967,
											"end": 4986,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 4967,
											"end": 4986,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "469"
										},
										{
											"begin": 4967,
											"end": 4986,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1445,
											"end": 1470,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1445,
											"end": 1470,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 1433,
											"end": 1435,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1418,
											"end": 1436,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1418,
											"end": 1436,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 1299,
											"end": 1476,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 4967,
											"end": 4986,
											"name": "tag",
											"source": 10,
											"value": "469"
										},
										{
											"begin": 4967,
											"end": 4986,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4967,
											"end": 4986,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4967,
											"end": 4986,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 4967,
											"end": 4986,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4967,
											"end": 4986,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4967,
											"end": 4986,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 4967,
											"end": 4986,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4967,
											"end": 4986,
											"name": "LOG1",
											"source": 10
										},
										{
											"begin": 5003,
											"end": 5012,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4802,
											"end": 5019,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4802,
											"end": 5019,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1949,
											"end": 2192,
											"name": "tag",
											"source": 18,
											"value": "344"
										},
										{
											"begin": 1949,
											"end": 2192,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1482,
											"end": 1501,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "471"
										},
										{
											"begin": 1482,
											"end": 1499,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "461"
										},
										{
											"begin": 1482,
											"end": 1501,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1482,
											"end": 1501,
											"name": "tag",
											"source": 6,
											"value": "471"
										},
										{
											"begin": 1482,
											"end": 1501,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2140,
											"end": 2184,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "361"
										},
										{
											"begin": 2167,
											"end": 2171,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2173,
											"end": 2175,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2177,
											"end": 2183,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 2140,
											"end": 2166,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "474"
										},
										{
											"begin": 2140,
											"end": 2184,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1805,
											"end": 2086,
											"name": "tag",
											"source": 2,
											"value": "362"
										},
										{
											"begin": 1805,
											"end": 2086,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1476,
											"end": 1495,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1476,
											"end": 1495,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1476,
											"end": 1495,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 1878,
											"end": 1984,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "480"
										},
										{
											"begin": 1878,
											"end": 1984,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1878,
											"end": 1984,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1878,
											"end": 1984,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1878,
											"end": 1984,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1878,
											"end": 1984,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 15425,
											"end": 15427,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1878,
											"end": 1984,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1878,
											"end": 1984,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1878,
											"end": 1984,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 15407,
											"end": 15428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 15464,
											"end": 15466,
											"name": "PUSH",
											"source": 19,
											"value": "2D"
										},
										{
											"begin": 15444,
											"end": 15462,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 15444,
											"end": 15462,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 15444,
											"end": 15462,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 15437,
											"end": 15467,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 15503,
											"end": 15537,
											"name": "PUSH",
											"source": 19,
											"value": "455243313936373A206E657720696D706C656D656E746174696F6E206973206E"
										},
										{
											"begin": 15483,
											"end": 15501,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 15483,
											"end": 15501,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 15483,
											"end": 15501,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 15476,
											"end": 15538,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1BDD08184818DBDB9D1C9858DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "9A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15554,
											"end": 15572,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 15554,
											"end": 15572,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 15554,
											"end": 15572,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 15547,
											"end": 15590,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 15607,
											"end": 15626,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 15607,
											"end": 15626,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1878,
											"end": 1984,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 15223,
											"end": 15632,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1878,
											"end": 1984,
											"name": "tag",
											"source": 2,
											"value": "480"
										},
										{
											"begin": 1878,
											"end": 1984,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1994,
											"end": 2079,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1994,
											"end": 2079,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1994,
											"end": 2079,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1994,
											"end": 2079,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1994,
											"end": 2079,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1994,
											"end": 2079,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1994,
											"end": 2079,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1994,
											"end": 2079,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1994,
											"end": 2079,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1994,
											"end": 2079,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1994,
											"end": 2079,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 1994,
											"end": 2079,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1994,
											"end": 2079,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 1805,
											"end": 2086,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2478,
											"end": 2766,
											"name": "tag",
											"source": 2,
											"value": "378"
										},
										{
											"begin": 2478,
											"end": 2766,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2616,
											"end": 2645,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "485"
										},
										{
											"begin": 2627,
											"end": 2644,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2616,
											"end": 2626,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "486"
										},
										{
											"begin": 2616,
											"end": 2645,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2616,
											"end": 2645,
											"name": "tag",
											"source": 2,
											"value": "485"
										},
										{
											"begin": 2616,
											"end": 2645,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2673,
											"end": 2674,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2659,
											"end": 2663,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2659,
											"end": 2670,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2659,
											"end": 2674,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2659,
											"end": 2687,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2659,
											"end": 2687,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "487"
										},
										{
											"begin": 2659,
											"end": 2687,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2659,
											"end": 2687,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2678,
											"end": 2687,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2659,
											"end": 2687,
											"name": "tag",
											"source": 2,
											"value": "487"
										},
										{
											"begin": 2659,
											"end": 2687,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2655,
											"end": 2760,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2655,
											"end": 2760,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "361"
										},
										{
											"begin": 2655,
											"end": 2760,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2703,
											"end": 2749,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "335"
										},
										{
											"begin": 2725,
											"end": 2742,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2744,
											"end": 2748,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2703,
											"end": 2724,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "490"
										},
										{
											"begin": 2703,
											"end": 2749,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2188,
											"end": 2294,
											"name": "tag",
											"source": 6,
											"value": "387"
										},
										{
											"begin": 2188,
											"end": 2294,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "PUSH",
											"source": 6,
											"value": "FB"
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "206"
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 15839,
											"end": 15841,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 15821,
											"end": 15842,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 15878,
											"end": 15880,
											"name": "PUSH",
											"source": 19,
											"value": "14"
										},
										{
											"begin": 15858,
											"end": 15876,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 15858,
											"end": 15876,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 15858,
											"end": 15876,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 15851,
											"end": 15881,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "14185D5CD8589B194E881B9BDD081C185D5CD959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "62"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15897,
											"end": 15915,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 15897,
											"end": 15915,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 15897,
											"end": 15915,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 15890,
											"end": 15940,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 15957,
											"end": 15975,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 15957,
											"end": 15975,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 2246,
											"end": 2287,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "180"
										},
										{
											"begin": 15637,
											"end": 15981,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 5080,
											"end": 5205,
											"name": "tag",
											"source": 10,
											"value": "414"
										},
										{
											"begin": 5080,
											"end": 5205,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5144,
											"end": 5151,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5170,
											"end": 5198,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "497"
										},
										{
											"begin": 5170,
											"end": 5188,
											"name": "PUSH",
											"source": 10,
											"value": "9A"
										},
										{
											"begin": 929,
											"end": 943,
											"name": "SLOAD",
											"source": 15
										},
										{
											"begin": 929,
											"end": 943,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 838,
											"end": 950,
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 5170,
											"end": 5198,
											"name": "tag",
											"source": 10,
											"value": "497"
										},
										{
											"begin": 5170,
											"end": 5198,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5163,
											"end": 5198,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5163,
											"end": 5198,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5080,
											"end": 5205,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5080,
											"end": 5205,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 757,
											"end": 1700,
											"name": "tag",
											"source": 13,
											"value": "419"
										},
										{
											"begin": 757,
											"end": 1700,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 869,
											"end": 881,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 869,
											"end": 881,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 846,
											"end": 853,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 846,
											"end": 853,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 869,
											"end": 886,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 869,
											"end": 886,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 865,
											"end": 921,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "500"
										},
										{
											"begin": 865,
											"end": 921,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 909,
											"end": 910,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 902,
											"end": 910,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "165"
										},
										{
											"begin": 902,
											"end": 910,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 865,
											"end": 921,
											"name": "tag",
											"source": 13,
											"value": "500"
										},
										{
											"begin": 865,
											"end": 921,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 971,
											"end": 983,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 971,
											"end": 983,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 931,
											"end": 942,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 931,
											"end": 942,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 994,
											"end": 1439,
											"name": "tag",
											"source": 13,
											"value": "501"
										},
										{
											"begin": 994,
											"end": 1439,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1007,
											"end": 1011,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1001,
											"end": 1004,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1001,
											"end": 1011,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 994,
											"end": 1439,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 994,
											"end": 1439,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "502"
										},
										{
											"begin": 994,
											"end": 1439,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1027,
											"end": 1038,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1041,
											"end": 1075,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "503"
										},
										{
											"begin": 1065,
											"end": 1068,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1070,
											"end": 1074,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1041,
											"end": 1064,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "504"
										},
										{
											"begin": 1041,
											"end": 1075,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1041,
											"end": 1075,
											"name": "tag",
											"source": 13,
											"value": "503"
										},
										{
											"begin": 1041,
											"end": 1075,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3077,
											"end": 3119,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3219,
											"end": 3238,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 3219,
											"end": 3238,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3219,
											"end": 3238,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3276,
											"end": 3280,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3263,
											"end": 3281,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3263,
											"end": 3281,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 1027,
											"end": 1075,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1027,
											"end": 1075,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1325,
											"end": 1332,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 1325,
											"end": 1332,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3259,
											"end": 3287,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3259,
											"end": 3287,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1292,
											"end": 1322,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 1292,
											"end": 1332,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 1288,
											"end": 1429,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1288,
											"end": 1429,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "507"
										},
										{
											"begin": 1288,
											"end": 1429,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1359,
											"end": 1362,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1352,
											"end": 1362,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1352,
											"end": 1362,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1288,
											"end": 1429,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "508"
										},
										{
											"begin": 1288,
											"end": 1429,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1288,
											"end": 1429,
											"name": "tag",
											"source": 13,
											"value": "507"
										},
										{
											"begin": 1288,
											"end": 1429,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1407,
											"end": 1414,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "509"
										},
										{
											"begin": 1407,
											"end": 1410,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1413,
											"end": 1414,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 1407,
											"end": 1414,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "201"
										},
										{
											"begin": 1407,
											"end": 1414,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1407,
											"end": 1414,
											"name": "tag",
											"source": 13,
											"value": "509"
										},
										{
											"begin": 1407,
											"end": 1414,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1401,
											"end": 1414,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1401,
											"end": 1414,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1288,
											"end": 1429,
											"name": "tag",
											"source": 13,
											"value": "508"
										},
										{
											"begin": 1288,
											"end": 1429,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1013,
											"end": 1439,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 994,
											"end": 1439,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "501"
										},
										{
											"begin": 994,
											"end": 1439,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 994,
											"end": 1439,
											"name": "tag",
											"source": 13,
											"value": "502"
										},
										{
											"begin": 994,
											"end": 1439,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1562,
											"end": 1563,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1556,
											"end": 1559,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1556,
											"end": 1563,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 1556,
											"end": 1612,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1556,
											"end": 1612,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1556,
											"end": 1612,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "510"
										},
										{
											"begin": 1556,
											"end": 1612,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1605,
											"end": 1612,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1567,
											"end": 1595,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "511"
										},
										{
											"begin": 1580,
											"end": 1585,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 1587,
											"end": 1594,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "512"
										},
										{
											"begin": 1593,
											"end": 1594,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 1587,
											"end": 1590,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 1587,
											"end": 1594,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "513"
										},
										{
											"begin": 1587,
											"end": 1594,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1587,
											"end": 1594,
											"name": "tag",
											"source": 13,
											"value": "512"
										},
										{
											"begin": 1587,
											"end": 1594,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3077,
											"end": 3119,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3219,
											"end": 3238,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3219,
											"end": 3238,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3219,
											"end": 3238,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3276,
											"end": 3280,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3263,
											"end": 3281,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3263,
											"end": 3281,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3263,
											"end": 3281,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 3259,
											"end": 3287,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3259,
											"end": 3287,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2996,
											"end": 3341,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1567,
											"end": 1595,
											"name": "tag",
											"source": 13,
											"value": "511"
										},
										{
											"begin": 1567,
											"end": 1595,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1567,
											"end": 1601,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 1567,
											"end": 1612,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 1556,
											"end": 1612,
											"name": "tag",
											"source": 13,
											"value": "510"
										},
										{
											"begin": 1556,
											"end": 1612,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1552,
											"end": 1694,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1552,
											"end": 1694,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "514"
										},
										{
											"begin": 1552,
											"end": 1694,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1635,
											"end": 1642,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "515"
										},
										{
											"begin": 1641,
											"end": 1642,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 1635,
											"end": 1638,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1635,
											"end": 1642,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "513"
										},
										{
											"begin": 1635,
											"end": 1642,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1635,
											"end": 1642,
											"name": "tag",
											"source": 13,
											"value": "515"
										},
										{
											"begin": 1635,
											"end": 1642,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1628,
											"end": 1642,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1628,
											"end": 1642,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1628,
											"end": 1642,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1628,
											"end": 1642,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1628,
											"end": 1642,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "165"
										},
										{
											"begin": 1628,
											"end": 1642,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1552,
											"end": 1694,
											"name": "tag",
											"source": 13,
											"value": "514"
										},
										{
											"begin": 1552,
											"end": 1694,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1680,
											"end": 1683,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1673,
											"end": 1683,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "165"
										},
										{
											"begin": 1673,
											"end": 1683,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2267,
											"end": 2426,
											"name": "tag",
											"source": 7,
											"value": "434"
										},
										{
											"begin": 2267,
											"end": 2426,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "518"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "180"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "431"
										},
										{
											"begin": 5355,
											"end": 5424,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "tag",
											"source": 4,
											"value": "518"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2379,
											"end": 2384,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 2379,
											"end": 2392,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "521"
										},
										{
											"begin": 2387,
											"end": 2392,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2379,
											"end": 2384,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2379,
											"end": 2392,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "522"
										},
										{
											"begin": 2379,
											"end": 2392,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2379,
											"end": 2392,
											"modifierDepth": 1,
											"name": "tag",
											"source": 7,
											"value": "521"
										},
										{
											"begin": 2379,
											"end": 2392,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2402,
											"end": 2409,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 7,
											"value": "37"
										},
										{
											"begin": 2402,
											"end": 2419,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "361"
										},
										{
											"begin": 2412,
											"end": 2419,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2402,
											"end": 2409,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2402,
											"end": 2419,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "522"
										},
										{
											"begin": 2402,
											"end": 2419,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1104,
											"end": 1215,
											"name": "tag",
											"source": 0,
											"value": "448"
										},
										{
											"begin": 1104,
											"end": 1215,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "525"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "180"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "431"
										},
										{
											"begin": 5355,
											"end": 5424,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "tag",
											"source": 4,
											"value": "525"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1176,
											"end": 1208,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "206"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 14
										},
										{
											"begin": 1176,
											"end": 1194,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "243"
										},
										{
											"begin": 1176,
											"end": 1208,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1166,
											"end": 1261,
											"name": "tag",
											"source": 6,
											"value": "454"
										},
										{
											"begin": 1166,
											"end": 1261,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 5363,
											"end": 5376,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "531"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "180"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "431"
										},
										{
											"begin": 5355,
											"end": 5424,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "tag",
											"source": 4,
											"value": "531"
										},
										{
											"begin": 5355,
											"end": 5424,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1239,
											"end": 1246,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 6,
											"value": "FB"
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1239,
											"end": 1254,
											"modifierDepth": 1,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1239,
											"end": 1254,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 1166,
											"end": 1261,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2010,
											"end": 2116,
											"name": "tag",
											"source": 6,
											"value": "461"
										},
										{
											"begin": 2010,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "PUSH",
											"source": 6,
											"value": "FB"
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 1928,
											"end": 1935,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2079,
											"end": 2088,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "206"
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 18525,
											"end": 18527,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 18507,
											"end": 18528,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 18564,
											"end": 18566,
											"name": "PUSH",
											"source": 19,
											"value": "10"
										},
										{
											"begin": 18544,
											"end": 18562,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 18544,
											"end": 18562,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 18544,
											"end": 18562,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 18537,
											"end": 18567,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "14185D5CD8589B194E881C185D5CD959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "82"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 18583,
											"end": 18601,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 18583,
											"end": 18601,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 18583,
											"end": 18601,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 18576,
											"end": 18622,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 18639,
											"end": 18657,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 18639,
											"end": 18657,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 2071,
											"end": 2109,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "180"
										},
										{
											"begin": 18323,
											"end": 18663,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 6116,
											"end": 6718,
											"name": "tag",
											"source": 10,
											"value": "474"
										},
										{
											"begin": 6116,
											"end": 6718,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6313,
											"end": 6331,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6313,
											"end": 6331,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 6309,
											"end": 6712,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "543"
										},
										{
											"begin": 6309,
											"end": 6712,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 6367,
											"end": 6393,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "544"
										},
										{
											"begin": 6390,
											"end": 6392,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6367,
											"end": 6389,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "545"
										},
										{
											"begin": 6367,
											"end": 6393,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6367,
											"end": 6393,
											"name": "tag",
											"source": 10,
											"value": "544"
										},
										{
											"begin": 6367,
											"end": 6393,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6407,
											"end": 6435,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "361"
										},
										{
											"begin": 6407,
											"end": 6433,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "547"
										},
										{
											"begin": 6407,
											"end": 6435,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6309,
											"end": 6712,
											"name": "tag",
											"source": 10,
											"value": "543"
										},
										{
											"begin": 6309,
											"end": 6712,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6456,
											"end": 6472,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6456,
											"end": 6472,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 6452,
											"end": 6712,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "549"
										},
										{
											"begin": 6452,
											"end": 6712,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 6508,
											"end": 6536,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "544"
										},
										{
											"begin": 6531,
											"end": 6535,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6508,
											"end": 6530,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "545"
										},
										{
											"begin": 6508,
											"end": 6536,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6452,
											"end": 6712,
											"name": "tag",
											"source": 10,
											"value": "549"
										},
										{
											"begin": 6452,
											"end": 6712,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6633,
											"end": 6661,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "553"
										},
										{
											"begin": 6656,
											"end": 6660,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6633,
											"end": 6655,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "545"
										},
										{
											"begin": 6633,
											"end": 6661,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6633,
											"end": 6661,
											"name": "tag",
											"source": 10,
											"value": "553"
										},
										{
											"begin": 6633,
											"end": 6661,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6675,
											"end": 6701,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "361"
										},
										{
											"begin": 6698,
											"end": 6700,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6675,
											"end": 6697,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "545"
										},
										{
											"begin": 6675,
											"end": 6701,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2192,
											"end": 2344,
											"name": "tag",
											"source": 2,
											"value": "486"
										},
										{
											"begin": 2192,
											"end": 2344,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2258,
											"end": 2295,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "556"
										},
										{
											"begin": 2277,
											"end": 2294,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2258,
											"end": 2276,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "362"
										},
										{
											"begin": 2258,
											"end": 2295,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2258,
											"end": 2295,
											"name": "tag",
											"source": 2,
											"value": "556"
										},
										{
											"begin": 2258,
											"end": 2295,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2310,
											"end": 2337,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2310,
											"end": 2337,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2310,
											"end": 2337,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2310,
											"end": 2337,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2310,
											"end": 2337,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2310,
											"end": 2337,
											"name": "PUSH",
											"source": 2,
											"value": "BC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B"
										},
										{
											"begin": 2310,
											"end": 2337,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2310,
											"end": 2337,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2310,
											"end": 2337,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2310,
											"end": 2337,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": 2192,
											"end": 2344,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2192,
											"end": 2344,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7088,
											"end": 7543,
											"name": "tag",
											"source": 2,
											"value": "490"
										},
										{
											"begin": 7088,
											"end": 7543,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7171,
											"end": 7183,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1476,
											"end": 1495,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1476,
											"end": 1495,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1476,
											"end": 1495,
											"name": "EXTCODESIZE",
											"source": 12
										},
										{
											"begin": 7195,
											"end": 7283,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "559"
										},
										{
											"begin": 7195,
											"end": 7283,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7195,
											"end": 7283,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7195,
											"end": 7283,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7195,
											"end": 7283,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7195,
											"end": 7283,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 18870,
											"end": 18872,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 7195,
											"end": 7283,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7195,
											"end": 7283,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7195,
											"end": 7283,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 18852,
											"end": 18873,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 18909,
											"end": 18911,
											"name": "PUSH",
											"source": 19,
											"value": "26"
										},
										{
											"begin": 18889,
											"end": 18907,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 18889,
											"end": 18907,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 18889,
											"end": 18907,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 18882,
											"end": 18912,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 18948,
											"end": 18982,
											"name": "PUSH",
											"source": 19,
											"value": "416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F"
										},
										{
											"begin": 18928,
											"end": 18946,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 18928,
											"end": 18946,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 18928,
											"end": 18946,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 18921,
											"end": 18983,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1B9D1C9858DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 18999,
											"end": 19017,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 18999,
											"end": 19017,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 18999,
											"end": 19017,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 18992,
											"end": 19028,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 19045,
											"end": 19064,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 19045,
											"end": 19064,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 7195,
											"end": 7283,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 18668,
											"end": 19070,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 7195,
											"end": 7283,
											"name": "tag",
											"source": 2,
											"value": "559"
										},
										{
											"begin": 7195,
											"end": 7283,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7354,
											"end": 7366,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7368,
											"end": 7391,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7401,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7395,
											"end": 7414,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7415,
											"end": 7419,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "562"
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "563"
										},
										{
											"begin": 7395,
											"end": 7420,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "tag",
											"source": 2,
											"value": "562"
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "DELEGATECALL",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "566"
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "PUSH",
											"source": 2,
											"value": "3F"
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "565"
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "tag",
											"source": 2,
											"value": "566"
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "tag",
											"source": 2,
											"value": "565"
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7395,
											"end": 7420,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7420,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7420,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7420,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7353,
											"end": 7420,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7437,
											"end": 7536,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "222"
										},
										{
											"begin": 7473,
											"end": 7480,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7482,
											"end": 7492,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7437,
											"end": 7536,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7437,
											"end": 7536,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7437,
											"end": 7536,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7437,
											"end": 7536,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 7437,
											"end": 7536,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7437,
											"end": 7536,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7437,
											"end": 7536,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7437,
											"end": 7536,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7437,
											"end": 7536,
											"name": "PUSH",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 7437,
											"end": 7536,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7437,
											"end": 7536,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7437,
											"end": 7536,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7437,
											"end": 7536,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7437,
											"end": 7536,
											"name": "PUSH data",
											"source": 2,
											"value": "9FDCD12E4B726339B32A442B0A448365D5D85C96B2D2CFF917B4F66C63110398"
										},
										{
											"begin": 7437,
											"end": 7536,
											"name": "PUSH",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 7437,
											"end": 7536,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7437,
											"end": 7536,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 7437,
											"end": 7472,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "568"
										},
										{
											"begin": 7437,
											"end": 7536,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 816,
											"end": 969,
											"name": "tag",
											"source": 17,
											"value": "504"
										},
										{
											"begin": 816,
											"end": 969,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 878,
											"end": 885,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 951,
											"end": 962,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "571"
										},
										{
											"begin": 961,
											"end": 962,
											"name": "PUSH",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 952,
											"end": 957,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 952,
											"end": 957,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 952,
											"end": 957,
											"name": "XOR",
											"source": 17
										},
										{
											"begin": 951,
											"end": 962,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "572"
										},
										{
											"begin": 951,
											"end": 962,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 951,
											"end": 962,
											"name": "tag",
											"source": 17,
											"value": "571"
										},
										{
											"begin": 951,
											"end": 962,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 941,
											"end": 962,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "171"
										},
										{
											"begin": 941,
											"end": 962,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 942,
											"end": 947,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 942,
											"end": 947,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 942,
											"end": 947,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 941,
											"end": 962,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "201"
										},
										{
											"begin": 941,
											"end": 962,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 8324,
											"end": 8468,
											"name": "tag",
											"source": 10,
											"value": "545"
										},
										{
											"begin": 8324,
											"end": 8468,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8407,
											"end": 8440,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8407,
											"end": 8440,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 8407,
											"end": 8440,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8407,
											"end": 8440,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8407,
											"end": 8440,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8407,
											"end": 8440,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8407,
											"end": 8431,
											"name": "PUSH",
											"source": 10,
											"value": "97"
										},
										{
											"begin": 8407,
											"end": 8440,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8407,
											"end": 8440,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8407,
											"end": 8440,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8407,
											"end": 8440,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8407,
											"end": 8440,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8407,
											"end": 8440,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8407,
											"end": 8440,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8407,
											"end": 8440,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 3843,
											"end": 3852,
											"name": "PUSH",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3843,
											"end": 3861,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 8391,
											"end": 8461,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "190"
										},
										{
											"begin": 8391,
											"end": 8461,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8407,
											"end": 8440,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8391,
											"end": 8406,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "581"
										},
										{
											"begin": 8391,
											"end": 8461,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8442,
											"end": 8460,
											"name": "tag",
											"source": 10,
											"value": "580"
										},
										{
											"begin": 8442,
											"end": 8460,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8391,
											"end": 8406,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "581"
										},
										{
											"begin": 8391,
											"end": 8461,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8474,
											"end": 8590,
											"name": "tag",
											"source": 10,
											"value": "547"
										},
										{
											"begin": 8474,
											"end": 8590,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8530,
											"end": 8583,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "206"
										},
										{
											"begin": 8546,
											"end": 8567,
											"name": "PUSH",
											"source": 10,
											"value": "98"
										},
										{
											"begin": 8569,
											"end": 8582,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "580"
										},
										{
											"begin": 3666,
											"end": 3678,
											"name": "PUSH",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 3666,
											"end": 3678,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3666,
											"end": 3678,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3579,
											"end": 3685,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 7438,
											"end": 7733,
											"name": "tag",
											"source": 12,
											"value": "568"
										},
										{
											"begin": 7438,
											"end": 7733,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7584,
											"end": 7596,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 7612,
											"end": 7619,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7608,
											"end": 7727,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7608,
											"end": 7727,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "586"
										},
										{
											"begin": 7608,
											"end": 7727,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7642,
											"end": 7652,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7635,
											"end": 7652,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "171"
										},
										{
											"begin": 7635,
											"end": 7652,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7608,
											"end": 7727,
											"name": "tag",
											"source": 12,
											"value": "586"
										},
										{
											"begin": 7608,
											"end": 7727,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7683,
											"end": 7716,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "171"
										},
										{
											"begin": 7691,
											"end": 7701,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7703,
											"end": 7715,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 7683,
											"end": 7690,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "589"
										},
										{
											"begin": 7683,
											"end": 7716,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8596,
											"end": 8900,
											"name": "tag",
											"source": 10,
											"value": "581"
										},
										{
											"begin": 8596,
											"end": 8900,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8690,
											"end": 8707,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8710,
											"end": 8733,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "592"
										},
										{
											"begin": 8710,
											"end": 8731,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "414"
										},
										{
											"begin": 8710,
											"end": 8733,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8710,
											"end": 8733,
											"name": "tag",
											"source": 10,
											"value": "592"
										},
										{
											"begin": 8710,
											"end": 8733,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8690,
											"end": 8733,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8690,
											"end": 8733,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8747,
											"end": 8777,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "593"
										},
										{
											"begin": 8763,
											"end": 8772,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 8747,
											"end": 8762,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "594"
										},
										{
											"begin": 8747,
											"end": 8777,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8747,
											"end": 8777,
											"name": "tag",
											"source": 10,
											"value": "593"
										},
										{
											"begin": 8747,
											"end": 8777,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8747,
											"end": 8789,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 8743,
											"end": 8894,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8743,
											"end": 8894,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "361"
										},
										{
											"begin": 8743,
											"end": 8894,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8805,
											"end": 8834,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8805,
											"end": 8834,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 8805,
											"end": 8834,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 8805,
											"end": 8834,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8805,
											"end": 8834,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8805,
											"end": 8834,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8805,
											"end": 8834,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 8805,
											"end": 8834,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 8805,
											"end": 8834,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 8805,
											"end": 8834,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8805,
											"end": 8834,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8805,
											"end": 8834,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8805,
											"end": 8834,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8805,
											"end": 8834,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8805,
											"end": 8834,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 8805,
											"end": 8834,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8805,
											"end": 8834,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 8805,
											"end": 8834,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8805,
											"end": 8834,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 8805,
											"end": 8834,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8805,
											"end": 8834,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 8805,
											"end": 8834,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 8848,
											"end": 8864,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 8848,
											"end": 8864,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 8848,
											"end": 8864,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8848,
											"end": 8883,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8848,
											"end": 8883,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 8848,
											"end": 8883,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 8848,
											"end": 8883,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 8848,
											"end": 8883,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8848,
											"end": 8883,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8848,
											"end": 8883,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 8848,
											"end": 8883,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8848,
											"end": 8883,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8848,
											"end": 8883,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8848,
											"end": 8883,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 8848,
											"end": 8883,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8848,
											"end": 8883,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8848,
											"end": 8883,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8848,
											"end": 8883,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 8596,
											"end": 8900,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7739,
											"end": 8279,
											"name": "tag",
											"source": 12,
											"value": "589"
										},
										{
											"begin": 7739,
											"end": 8279,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7898,
											"end": 7915,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7898,
											"end": 7915,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 7898,
											"end": 7919,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7894,
											"end": 8273,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "599"
										},
										{
											"begin": 7894,
											"end": 8273,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8126,
											"end": 8136,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8120,
											"end": 8137,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 8182,
											"end": 8197,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8169,
											"end": 8179,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8165,
											"end": 8167,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8161,
											"end": 8180,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8154,
											"end": 8198,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7894,
											"end": 8273,
											"name": "tag",
											"source": 12,
											"value": "599"
										},
										{
											"begin": 7894,
											"end": 8273,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8249,
											"end": 8261,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 8242,
											"end": 8262,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 8242,
											"end": 8262,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8242,
											"end": 8262,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8242,
											"end": 8262,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8242,
											"end": 8262,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 8242,
											"end": 8262,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8242,
											"end": 8262,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "180"
										},
										{
											"begin": 8242,
											"end": 8262,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8242,
											"end": 8262,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8242,
											"end": 8262,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "39"
										},
										{
											"begin": 8242,
											"end": 8262,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 8906,
											"end": 9112,
											"name": "tag",
											"source": 10,
											"value": "594"
										},
										{
											"begin": 8906,
											"end": 9112,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8999,
											"end": 9009,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8999,
											"end": 9009,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 8976,
											"end": 8983,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8976,
											"end": 8983,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8999,
											"end": 9014,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8999,
											"end": 9014,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 8995,
											"end": 9106,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "603"
										},
										{
											"begin": 8995,
											"end": 9106,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9037,
											"end": 9038,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9037,
											"end": 9038,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8906,
											"end": 9112,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8906,
											"end": 9112,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8995,
											"end": 9106,
											"name": "tag",
											"source": 10,
											"value": "603"
										},
										{
											"begin": 8995,
											"end": 9106,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9080,
											"end": 9090,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9080,
											"end": 9090,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 9076,
											"end": 9079,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9076,
											"end": 9079,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9080,
											"end": 9094,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "605"
										},
										{
											"begin": 9080,
											"end": 9094,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9093,
											"end": 9094,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 9093,
											"end": 9094,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9080,
											"end": 9094,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "513"
										},
										{
											"begin": 9080,
											"end": 9094,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9080,
											"end": 9094,
											"name": "tag",
											"source": 10,
											"value": "605"
										},
										{
											"begin": 9080,
											"end": 9094,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9076,
											"end": 9095,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9076,
											"end": 9095,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 9076,
											"end": 9095,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9076,
											"end": 9095,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 9076,
											"end": 9095,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "607"
										},
										{
											"begin": 9076,
											"end": 9095,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 9076,
											"end": 9095,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "607"
										},
										{
											"begin": 9076,
											"end": 9095,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "424"
										},
										{
											"begin": 9076,
											"end": 9095,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9076,
											"end": 9095,
											"name": "tag",
											"source": 10,
											"value": "607"
										},
										{
											"begin": 9076,
											"end": 9095,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9076,
											"end": 9095,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9076,
											"end": 9095,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9076,
											"end": 9095,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9076,
											"end": 9095,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9076,
											"end": 9095,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9076,
											"end": 9095,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 9076,
											"end": 9095,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9076,
											"end": 9095,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 9069,
											"end": 9095,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9069,
											"end": 9095,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8906,
											"end": 9112,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8906,
											"end": 9112,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8906,
											"end": 9112,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8906,
											"end": 9112,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8995,
											"end": 9106,
											"name": "tag",
											"source": 10,
											"value": "604"
										},
										{
											"begin": 8995,
											"end": 9106,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8906,
											"end": 9112,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8906,
											"end": 9112,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8906,
											"end": 9112,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8906,
											"end": 9112,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 14,
											"end": 264,
											"name": "tag",
											"source": 19,
											"value": "609"
										},
										{
											"begin": 14,
											"end": 264,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 99,
											"end": 100,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 109,
											"end": 222,
											"name": "tag",
											"source": 19,
											"value": "619"
										},
										{
											"begin": 109,
											"end": 222,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 123,
											"end": 129,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 120,
											"end": 121,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 117,
											"end": 130,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 109,
											"end": 222,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 109,
											"end": 222,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "621"
										},
										{
											"begin": 109,
											"end": 222,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 199,
											"end": 210,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 199,
											"end": 210,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 199,
											"end": 210,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 193,
											"end": 211,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 180,
											"end": 191,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 180,
											"end": 191,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 180,
											"end": 191,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 173,
											"end": 212,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 145,
											"end": 147,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 138,
											"end": 148,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 109,
											"end": 222,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "619"
										},
										{
											"begin": 109,
											"end": 222,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 109,
											"end": 222,
											"name": "tag",
											"source": 19,
											"value": "621"
										},
										{
											"begin": 109,
											"end": 222,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 256,
											"end": 257,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 238,
											"end": 254,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 238,
											"end": 254,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 231,
											"end": 258,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 14,
											"end": 264,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 269,
											"end": 665,
											"name": "tag",
											"source": 19,
											"value": "39"
										},
										{
											"begin": 269,
											"end": 665,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 418,
											"end": 420,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 407,
											"end": 416,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 400,
											"end": 421,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 381,
											"end": 385,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 450,
											"end": 456,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 444,
											"end": 457,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 493,
											"end": 499,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 488,
											"end": 490,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 477,
											"end": 486,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 473,
											"end": 491,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 466,
											"end": 500,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 509,
											"end": 588,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "623"
										},
										{
											"begin": 581,
											"end": 587,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 576,
											"end": 578,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 565,
											"end": 574,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 561,
											"end": 579,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 556,
											"end": 558,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 548,
											"end": 554,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 544,
											"end": 559,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 509,
											"end": 588,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "609"
										},
										{
											"begin": 509,
											"end": 588,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 509,
											"end": 588,
											"name": "tag",
											"source": 19,
											"value": "623"
										},
										{
											"begin": 509,
											"end": 588,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 649,
											"end": 651,
											"name": "PUSH",
											"source": 19,
											"value": "1F"
										},
										{
											"begin": 628,
											"end": 643,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 624,
											"end": 653,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 609,
											"end": 654,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 609,
											"end": 654,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 609,
											"end": 654,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 609,
											"end": 654,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 656,
											"end": 658,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 605,
											"end": 659,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 605,
											"end": 659,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 269,
											"end": 665,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 269,
											"end": 665,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 670,
											"end": 843,
											"name": "tag",
											"source": 19,
											"value": "610"
										},
										{
											"begin": 670,
											"end": 843,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 738,
											"end": 758,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 738,
											"end": 758,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 787,
											"end": 818,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 787,
											"end": 818,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 777,
											"end": 819,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 777,
											"end": 819,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 767,
											"end": 837,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "604"
										},
										{
											"begin": 767,
											"end": 837,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 833,
											"end": 834,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 830,
											"end": 831,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 823,
											"end": 835,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 848,
											"end": 1102,
											"name": "tag",
											"source": 19,
											"value": "43"
										},
										{
											"begin": 848,
											"end": 1102,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 916,
											"end": 922,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 924,
											"end": 930,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 977,
											"end": 979,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 965,
											"end": 974,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 956,
											"end": 963,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 952,
											"end": 975,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 948,
											"end": 980,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 945,
											"end": 997,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 945,
											"end": 997,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "627"
										},
										{
											"begin": 945,
											"end": 997,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 993,
											"end": 994,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 990,
											"end": 991,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 983,
											"end": 995,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 945,
											"end": 997,
											"name": "tag",
											"source": 19,
											"value": "627"
										},
										{
											"begin": 945,
											"end": 997,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1016,
											"end": 1045,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "628"
										},
										{
											"begin": 1035,
											"end": 1044,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 1016,
											"end": 1045,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "610"
										},
										{
											"begin": 1016,
											"end": 1045,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1016,
											"end": 1045,
											"name": "tag",
											"source": 19,
											"value": "628"
										},
										{
											"begin": 1016,
											"end": 1045,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1006,
											"end": 1045,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": 1092,
											"end": 1094,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1077,
											"end": 1095,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 1077,
											"end": 1095,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 1077,
											"end": 1095,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 1077,
											"end": 1095,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1064,
											"end": 1096,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 1064,
											"end": 1096,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 848,
											"end": 1102,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1481,
											"end": 1809,
											"name": "tag",
											"source": 19,
											"value": "55"
										},
										{
											"begin": 1481,
											"end": 1809,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1558,
											"end": 1564,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1566,
											"end": 1572,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1574,
											"end": 1580,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1627,
											"end": 1629,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 1615,
											"end": 1624,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 1606,
											"end": 1613,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 1602,
											"end": 1625,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 1598,
											"end": 1630,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 1595,
											"end": 1647,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1595,
											"end": 1647,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "632"
										},
										{
											"begin": 1595,
											"end": 1647,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 1643,
											"end": 1644,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 1640,
											"end": 1641,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 1633,
											"end": 1645,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 1595,
											"end": 1647,
											"name": "tag",
											"source": 19,
											"value": "632"
										},
										{
											"begin": 1595,
											"end": 1647,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1666,
											"end": 1695,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "633"
										},
										{
											"begin": 1685,
											"end": 1694,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 1666,
											"end": 1695,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "610"
										},
										{
											"begin": 1666,
											"end": 1695,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1666,
											"end": 1695,
											"name": "tag",
											"source": 19,
											"value": "633"
										},
										{
											"begin": 1666,
											"end": 1695,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1656,
											"end": 1695,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 1656,
											"end": 1695,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1714,
											"end": 1752,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "634"
										},
										{
											"begin": 1748,
											"end": 1750,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1737,
											"end": 1746,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 1733,
											"end": 1751,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1714,
											"end": 1752,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "610"
										},
										{
											"begin": 1714,
											"end": 1752,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1714,
											"end": 1752,
											"name": "tag",
											"source": 19,
											"value": "634"
										},
										{
											"begin": 1714,
											"end": 1752,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1704,
											"end": 1752,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 1704,
											"end": 1752,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1799,
											"end": 1801,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 1788,
											"end": 1797,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 1784,
											"end": 1802,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1771,
											"end": 1803,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 1761,
											"end": 1803,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 1761,
											"end": 1803,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1481,
											"end": 1809,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 1481,
											"end": 1809,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1481,
											"end": 1809,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 1481,
											"end": 1809,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1481,
											"end": 1809,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 1481,
											"end": 1809,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2003,
											"end": 2189,
											"name": "tag",
											"source": 19,
											"value": "66"
										},
										{
											"begin": 2003,
											"end": 2189,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2062,
											"end": 2068,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2115,
											"end": 2117,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 2103,
											"end": 2112,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 2094,
											"end": 2101,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 2090,
											"end": 2113,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 2086,
											"end": 2118,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 2083,
											"end": 2135,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 2083,
											"end": 2135,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "637"
										},
										{
											"begin": 2083,
											"end": 2135,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 2131,
											"end": 2132,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2128,
											"end": 2129,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2121,
											"end": 2133,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 2083,
											"end": 2135,
											"name": "tag",
											"source": 19,
											"value": "637"
										},
										{
											"begin": 2083,
											"end": 2135,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2154,
											"end": 2183,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "171"
										},
										{
											"begin": 2173,
											"end": 2182,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 2154,
											"end": 2183,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "610"
										},
										{
											"begin": 2154,
											"end": 2183,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2194,
											"end": 2374,
											"name": "tag",
											"source": 19,
											"value": "83"
										},
										{
											"begin": 2194,
											"end": 2374,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2253,
											"end": 2259,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2306,
											"end": 2308,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 2294,
											"end": 2303,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 2285,
											"end": 2292,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 2281,
											"end": 2304,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 2277,
											"end": 2309,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 2274,
											"end": 2326,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 2274,
											"end": 2326,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "640"
										},
										{
											"begin": 2274,
											"end": 2326,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 2322,
											"end": 2323,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2319,
											"end": 2320,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2312,
											"end": 2324,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 2274,
											"end": 2326,
											"name": "tag",
											"source": 19,
											"value": "640"
										},
										{
											"begin": 2274,
											"end": 2326,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2345,
											"end": 2368,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 2345,
											"end": 2368,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 2194,
											"end": 2374,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2194,
											"end": 2374,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2379,
											"end": 2506,
											"name": "tag",
											"source": 19,
											"value": "193"
										},
										{
											"begin": 2379,
											"end": 2506,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2440,
											"end": 2450,
											"name": "PUSH",
											"source": 19,
											"value": "4E487B71"
										},
										{
											"begin": 2435,
											"end": 2438,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 2431,
											"end": 2451,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 2428,
											"end": 2429,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2421,
											"end": 2452,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 2471,
											"end": 2475,
											"name": "PUSH",
											"source": 19,
											"value": "41"
										},
										{
											"begin": 2468,
											"end": 2469,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 2461,
											"end": 2476,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 2495,
											"end": 2499,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 2492,
											"end": 2493,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2485,
											"end": 2500,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 2511,
											"end": 3506,
											"name": "tag",
											"source": 19,
											"value": "92"
										},
										{
											"begin": 2511,
											"end": 3506,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2588,
											"end": 2594,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2596,
											"end": 2602,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2649,
											"end": 2651,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 2637,
											"end": 2646,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 2628,
											"end": 2635,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 2624,
											"end": 2647,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 2620,
											"end": 2652,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 2617,
											"end": 2669,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 2617,
											"end": 2669,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "643"
										},
										{
											"begin": 2617,
											"end": 2669,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 2665,
											"end": 2666,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2662,
											"end": 2663,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2655,
											"end": 2667,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 2617,
											"end": 2669,
											"name": "tag",
											"source": 19,
											"value": "643"
										},
										{
											"begin": 2617,
											"end": 2669,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2688,
											"end": 2717,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "644"
										},
										{
											"begin": 2707,
											"end": 2716,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 2688,
											"end": 2717,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "610"
										},
										{
											"begin": 2688,
											"end": 2717,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2688,
											"end": 2717,
											"name": "tag",
											"source": 19,
											"value": "644"
										},
										{
											"begin": 2688,
											"end": 2717,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2678,
											"end": 2717,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 2678,
											"end": 2717,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2768,
											"end": 2770,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 2757,
											"end": 2766,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 2753,
											"end": 2771,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 2740,
											"end": 2772,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 2791,
											"end": 2809,
											"name": "PUSH",
											"source": 19,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2832,
											"end": 2834,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2824,
											"end": 2830,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 2821,
											"end": 2835,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 2818,
											"end": 2852,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 2818,
											"end": 2852,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "645"
										},
										{
											"begin": 2818,
											"end": 2852,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 2848,
											"end": 2849,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2845,
											"end": 2846,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2838,
											"end": 2850,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 2818,
											"end": 2852,
											"name": "tag",
											"source": 19,
											"value": "645"
										},
										{
											"begin": 2818,
											"end": 2852,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2886,
											"end": 2892,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 2875,
											"end": 2884,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 2871,
											"end": 2893,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 2861,
											"end": 2893,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 2861,
											"end": 2893,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2931,
											"end": 2938,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 2924,
											"end": 2928,
											"name": "PUSH",
											"source": 19,
											"value": "1F"
										},
										{
											"begin": 2920,
											"end": 2922,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 2916,
											"end": 2929,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 2912,
											"end": 2939,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 2902,
											"end": 2957,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "646"
										},
										{
											"begin": 2902,
											"end": 2957,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 2953,
											"end": 2954,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2950,
											"end": 2951,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2943,
											"end": 2955,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 2902,
											"end": 2957,
											"name": "tag",
											"source": 19,
											"value": "646"
										},
										{
											"begin": 2902,
											"end": 2957,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2989,
											"end": 2991,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 2976,
											"end": 2992,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 3011,
											"end": 3013,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 3007,
											"end": 3009,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 3004,
											"end": 3014,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 3001,
											"end": 3037,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 3001,
											"end": 3037,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "648"
										},
										{
											"begin": 3001,
											"end": 3037,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 3017,
											"end": 3035,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "648"
										},
										{
											"begin": 3017,
											"end": 3035,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "193"
										},
										{
											"begin": 3017,
											"end": 3035,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3017,
											"end": 3035,
											"name": "tag",
											"source": 19,
											"value": "648"
										},
										{
											"begin": 3017,
											"end": 3035,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3092,
											"end": 3094,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 3086,
											"end": 3095,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 3060,
											"end": 3062,
											"name": "PUSH",
											"source": 19,
											"value": "1F"
										},
										{
											"begin": 3146,
											"end": 3159,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3146,
											"end": 3159,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3142,
											"end": 3164,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 3142,
											"end": 3164,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 3142,
											"end": 3164,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 3166,
											"end": 3168,
											"name": "PUSH",
											"source": 19,
											"value": "3F"
										},
										{
											"begin": 3138,
											"end": 3169,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3134,
											"end": 3174,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 3122,
											"end": 3175,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 3122,
											"end": 3175,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3122,
											"end": 3175,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 3190,
											"end": 3208,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 3190,
											"end": 3208,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3190,
											"end": 3208,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 3210,
											"end": 3232,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 3210,
											"end": 3232,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 3210,
											"end": 3232,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 3187,
											"end": 3233,
											"name": "OR",
											"source": 19
										},
										{
											"begin": 3184,
											"end": 3256,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 3184,
											"end": 3256,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "650"
										},
										{
											"begin": 3184,
											"end": 3256,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 3236,
											"end": 3254,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "650"
										},
										{
											"begin": 3236,
											"end": 3254,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "193"
										},
										{
											"begin": 3236,
											"end": 3254,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3236,
											"end": 3254,
											"name": "tag",
											"source": 19,
											"value": "650"
										},
										{
											"begin": 3236,
											"end": 3254,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3276,
											"end": 3286,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 3272,
											"end": 3274,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 3265,
											"end": 3287,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3311,
											"end": 3313,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3303,
											"end": 3309,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 3296,
											"end": 3314,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3351,
											"end": 3358,
											"name": "DUP9",
											"source": 19
										},
										{
											"begin": 3346,
											"end": 3348,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 3341,
											"end": 3343,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 3337,
											"end": 3339,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 3333,
											"end": 3344,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3329,
											"end": 3349,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3326,
											"end": 3359,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 3323,
											"end": 3376,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 3323,
											"end": 3376,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "651"
										},
										{
											"begin": 3323,
											"end": 3376,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 3372,
											"end": 3373,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 3369,
											"end": 3370,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 3362,
											"end": 3374,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 3323,
											"end": 3376,
											"name": "tag",
											"source": 19,
											"value": "651"
										},
										{
											"begin": 3323,
											"end": 3376,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3428,
											"end": 3430,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3423,
											"end": 3425,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 3419,
											"end": 3421,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 3415,
											"end": 3426,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3410,
											"end": 3412,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 3402,
											"end": 3408,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 3398,
											"end": 3413,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3385,
											"end": 3431,
											"name": "CALLDATACOPY",
											"source": 19
										},
										{
											"begin": 3473,
											"end": 3474,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 3468,
											"end": 3470,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 3463,
											"end": 3465,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 3455,
											"end": 3461,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 3451,
											"end": 3466,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3447,
											"end": 3471,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3440,
											"end": 3475,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3494,
											"end": 3500,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 3484,
											"end": 3500,
											"name": "SWAP6",
											"source": 19
										},
										{
											"begin": 3484,
											"end": 3500,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3484,
											"end": 3500,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3484,
											"end": 3500,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3484,
											"end": 3500,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3484,
											"end": 3500,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3484,
											"end": 3500,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2511,
											"end": 3506,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 2511,
											"end": 3506,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2511,
											"end": 3506,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 2511,
											"end": 3506,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 2511,
											"end": 3506,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 2511,
											"end": 3506,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3901,
											"end": 4161,
											"name": "tag",
											"source": 19,
											"value": "151"
										},
										{
											"begin": 3901,
											"end": 4161,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3969,
											"end": 3975,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 3977,
											"end": 3983,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 4030,
											"end": 4032,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 4018,
											"end": 4027,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 4009,
											"end": 4016,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 4005,
											"end": 4028,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 4001,
											"end": 4033,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 3998,
											"end": 4050,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 3998,
											"end": 4050,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "655"
										},
										{
											"begin": 3998,
											"end": 4050,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 4046,
											"end": 4047,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 4043,
											"end": 4044,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 4036,
											"end": 4048,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 3998,
											"end": 4050,
											"name": "tag",
											"source": 19,
											"value": "655"
										},
										{
											"begin": 3998,
											"end": 4050,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 4069,
											"end": 4098,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "656"
										},
										{
											"begin": 4088,
											"end": 4097,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 4069,
											"end": 4098,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "610"
										},
										{
											"begin": 4069,
											"end": 4098,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 4069,
											"end": 4098,
											"name": "tag",
											"source": 19,
											"value": "656"
										},
										{
											"begin": 4069,
											"end": 4098,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 4059,
											"end": 4098,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 4059,
											"end": 4098,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 4117,
											"end": 4155,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "657"
										},
										{
											"begin": 4151,
											"end": 4153,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 4140,
											"end": 4149,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 4136,
											"end": 4154,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4117,
											"end": 4155,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "610"
										},
										{
											"begin": 4117,
											"end": 4155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 4117,
											"end": 4155,
											"name": "tag",
											"source": 19,
											"value": "657"
										},
										{
											"begin": 4117,
											"end": 4155,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 4107,
											"end": 4155,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 4107,
											"end": 4155,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3901,
											"end": 4161,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 3901,
											"end": 4161,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3901,
											"end": 4161,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 3901,
											"end": 4161,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 3901,
											"end": 4161,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3901,
											"end": 4161,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 4166,
											"end": 4546,
											"name": "tag",
											"source": 19,
											"value": "160"
										},
										{
											"begin": 4166,
											"end": 4546,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 4245,
											"end": 4246,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 4241,
											"end": 4253,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 4241,
											"end": 4253,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 4241,
											"end": 4253,
											"name": "SHR",
											"source": 19
										},
										{
											"begin": 4241,
											"end": 4253,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 4288,
											"end": 4300,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 4288,
											"end": 4300,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 4288,
											"end": 4300,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 4309,
											"end": 4370,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "659"
										},
										{
											"begin": 4309,
											"end": 4370,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 4363,
											"end": 4367,
											"name": "PUSH",
											"source": 19,
											"value": "7F"
										},
										{
											"begin": 4355,
											"end": 4361,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 4351,
											"end": 4368,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 4341,
											"end": 4368,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 4341,
											"end": 4368,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 4309,
											"end": 4370,
											"name": "tag",
											"source": 19,
											"value": "659"
										},
										{
											"begin": 4309,
											"end": 4370,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 4416,
											"end": 4418,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 4408,
											"end": 4414,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 4405,
											"end": 4419,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 4385,
											"end": 4403,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 4382,
											"end": 4420,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 4379,
											"end": 4540,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "660"
										},
										{
											"begin": 4379,
											"end": 4540,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 4462,
											"end": 4472,
											"name": "PUSH",
											"source": 19,
											"value": "4E487B71"
										},
										{
											"begin": 4457,
											"end": 4460,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 4453,
											"end": 4473,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 4450,
											"end": 4451,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 4443,
											"end": 4474,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 4497,
											"end": 4501,
											"name": "PUSH",
											"source": 19,
											"value": "22"
										},
										{
											"begin": 4494,
											"end": 4495,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 4487,
											"end": 4502,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 4525,
											"end": 4529,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 4522,
											"end": 4523,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 4515,
											"end": 4530,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 4379,
											"end": 4540,
											"name": "tag",
											"source": 19,
											"value": "660"
										},
										{
											"begin": 4379,
											"end": 4540,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 4379,
											"end": 4540,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 4166,
											"end": 4546,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 4166,
											"end": 4546,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 4166,
											"end": 4546,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 4166,
											"end": 4546,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 4551,
											"end": 4959,
											"name": "tag",
											"source": 19,
											"value": "181"
										},
										{
											"begin": 4551,
											"end": 4959,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 4753,
											"end": 4755,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 4735,
											"end": 4756,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 4735,
											"end": 4756,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 4735,
											"end": 4756,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 4792,
											"end": 4794,
											"name": "PUSH",
											"source": 19,
											"value": "2C"
										},
										{
											"begin": 4772,
											"end": 4790,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 4772,
											"end": 4790,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 4772,
											"end": 4790,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4765,
											"end": 4795,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 4831,
											"end": 4865,
											"name": "PUSH",
											"source": 19,
											"value": "46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820"
										},
										{
											"begin": 4826,
											"end": 4828,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 4811,
											"end": 4829,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 4811,
											"end": 4829,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4804,
											"end": 4866,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "19195B1959D85D1958D85B1B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4897,
											"end": 4899,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 4882,
											"end": 4900,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 4882,
											"end": 4900,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4875,
											"end": 4917,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 4949,
											"end": 4952,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 4934,
											"end": 4953,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 4934,
											"end": 4953,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 4551,
											"end": 4959,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 4964,
											"end": 5372,
											"name": "tag",
											"source": 19,
											"value": "186"
										},
										{
											"begin": 4964,
											"end": 5372,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 5166,
											"end": 5168,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 5148,
											"end": 5169,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 5148,
											"end": 5169,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5148,
											"end": 5169,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 5205,
											"end": 5207,
											"name": "PUSH",
											"source": 19,
											"value": "2C"
										},
										{
											"begin": 5185,
											"end": 5203,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 5185,
											"end": 5203,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5185,
											"end": 5203,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5178,
											"end": 5208,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 5244,
											"end": 5278,
											"name": "PUSH",
											"source": 19,
											"value": "46756E6374696F6E206D7573742062652063616C6C6564207468726F75676820"
										},
										{
											"begin": 5239,
											"end": 5241,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 5224,
											"end": 5242,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5224,
											"end": 5242,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5217,
											"end": 5279,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6163746976652070726F7879"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5310,
											"end": 5312,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 5295,
											"end": 5313,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5295,
											"end": 5313,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5288,
											"end": 5330,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 5362,
											"end": 5365,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 5347,
											"end": 5366,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5347,
											"end": 5366,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 4964,
											"end": 5372,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 5377,
											"end": 5504,
											"name": "tag",
											"source": 19,
											"value": "611"
										},
										{
											"begin": 5377,
											"end": 5504,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 5438,
											"end": 5448,
											"name": "PUSH",
											"source": 19,
											"value": "4E487B71"
										},
										{
											"begin": 5433,
											"end": 5436,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 5429,
											"end": 5449,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 5426,
											"end": 5427,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 5419,
											"end": 5450,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 5469,
											"end": 5473,
											"name": "PUSH",
											"source": 19,
											"value": "11"
										},
										{
											"begin": 5466,
											"end": 5467,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 5459,
											"end": 5474,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 5493,
											"end": 5497,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 5490,
											"end": 5491,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 5483,
											"end": 5498,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 5509,
											"end": 5634,
											"name": "tag",
											"source": 19,
											"value": "201"
										},
										{
											"begin": 5509,
											"end": 5634,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 5574,
											"end": 5583,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 5574,
											"end": 5583,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5574,
											"end": 5583,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 5595,
											"end": 5605,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 5595,
											"end": 5605,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 5595,
											"end": 5605,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 5592,
											"end": 5628,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 5592,
											"end": 5628,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "165"
										},
										{
											"begin": 5592,
											"end": 5628,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 5608,
											"end": 5626,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "165"
										},
										{
											"begin": 5608,
											"end": 5626,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "611"
										},
										{
											"begin": 5608,
											"end": 5626,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 6479,
											"end": 6901,
											"name": "tag",
											"source": 19,
											"value": "612"
										},
										{
											"begin": 6479,
											"end": 6901,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 6568,
											"end": 6569,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 6611,
											"end": 6616,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 6568,
											"end": 6569,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 6625,
											"end": 6895,
											"name": "tag",
											"source": 19,
											"value": "670"
										},
										{
											"begin": 6625,
											"end": 6895,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 6646,
											"end": 6653,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 6636,
											"end": 6644,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 6633,
											"end": 6654,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 6625,
											"end": 6895,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 6625,
											"end": 6895,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "421"
										},
										{
											"begin": 6625,
											"end": 6895,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 6705,
											"end": 6709,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 6701,
											"end": 6702,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 6697,
											"end": 6703,
											"name": "NOT",
											"source": 19
										},
										{
											"begin": 6693,
											"end": 6710,
											"name": "DIV",
											"source": 19
										},
										{
											"begin": 6687,
											"end": 6691,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 6684,
											"end": 6711,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 6681,
											"end": 6734,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 6681,
											"end": 6734,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "674"
										},
										{
											"begin": 6681,
											"end": 6734,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 6714,
											"end": 6732,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "674"
										},
										{
											"begin": 6714,
											"end": 6732,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "611"
										},
										{
											"begin": 6714,
											"end": 6732,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 6714,
											"end": 6732,
											"name": "tag",
											"source": 19,
											"value": "674"
										},
										{
											"begin": 6714,
											"end": 6732,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 6764,
											"end": 6771,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 6754,
											"end": 6762,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 6750,
											"end": 6772,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 6747,
											"end": 6802,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 6747,
											"end": 6802,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "675"
										},
										{
											"begin": 6747,
											"end": 6802,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 6784,
											"end": 6800,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 6784,
											"end": 6800,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 6784,
											"end": 6800,
											"name": "MUL",
											"source": 19
										},
										{
											"begin": 6784,
											"end": 6800,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 6747,
											"end": 6802,
											"name": "tag",
											"source": 19,
											"value": "675"
										},
										{
											"begin": 6747,
											"end": 6802,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 6863,
											"end": 6885,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 6863,
											"end": 6885,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 6863,
											"end": 6885,
											"name": "SHR",
											"source": 19
										},
										{
											"begin": 6863,
											"end": 6885,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 6823,
											"end": 6838,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 6823,
											"end": 6838,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 6823,
											"end": 6838,
											"name": "MUL",
											"source": 19
										},
										{
											"begin": 6823,
											"end": 6838,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 6625,
											"end": 6895,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "670"
										},
										{
											"begin": 6625,
											"end": 6895,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 6906,
											"end": 7712,
											"name": "tag",
											"source": 19,
											"value": "613"
										},
										{
											"begin": 6906,
											"end": 7712,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 6955,
											"end": 6960,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 6985,
											"end": 6993,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 6975,
											"end": 7055,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "677"
										},
										{
											"begin": 6975,
											"end": 7055,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7026,
											"end": 7027,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 7040,
											"end": 7045,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "165"
										},
										{
											"begin": 7040,
											"end": 7045,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 6975,
											"end": 7055,
											"name": "tag",
											"source": 19,
											"value": "677"
										},
										{
											"begin": 6975,
											"end": 7055,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 7074,
											"end": 7078,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 7064,
											"end": 7140,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "678"
										},
										{
											"begin": 7064,
											"end": 7140,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7111,
											"end": 7112,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 7125,
											"end": 7130,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "165"
										},
										{
											"begin": 7125,
											"end": 7130,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 7064,
											"end": 7140,
											"name": "tag",
											"source": 19,
											"value": "678"
										},
										{
											"begin": 7064,
											"end": 7140,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 7156,
											"end": 7160,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 7174,
											"end": 7175,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 7169,
											"end": 7228,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 7169,
											"end": 7228,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 7169,
											"end": 7228,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "680"
										},
										{
											"begin": 7169,
											"end": 7228,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 7242,
											"end": 7243,
											"name": "PUSH",
											"source": 19,
											"value": "2"
										},
										{
											"begin": 7237,
											"end": 7367,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 7237,
											"end": 7367,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 7237,
											"end": 7367,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "681"
										},
										{
											"begin": 7237,
											"end": 7367,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 7149,
											"end": 7367,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "679"
										},
										{
											"begin": 7149,
											"end": 7367,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 7169,
											"end": 7228,
											"name": "tag",
											"source": 19,
											"value": "680"
										},
										{
											"begin": 7169,
											"end": 7228,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 7199,
											"end": 7200,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 7190,
											"end": 7200,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 7190,
											"end": 7200,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 7213,
											"end": 7218,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 7213,
											"end": 7218,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "165"
										},
										{
											"begin": 7213,
											"end": 7218,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 7237,
											"end": 7367,
											"name": "tag",
											"source": 19,
											"value": "681"
										},
										{
											"begin": 7237,
											"end": 7367,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 7274,
											"end": 7277,
											"name": "PUSH",
											"source": 19,
											"value": "FF"
										},
										{
											"begin": 7264,
											"end": 7272,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 7261,
											"end": 7278,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 7258,
											"end": 7301,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 7258,
											"end": 7301,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "683"
										},
										{
											"begin": 7258,
											"end": 7301,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 7281,
											"end": 7299,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "683"
										},
										{
											"begin": 7281,
											"end": 7299,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "611"
										},
										{
											"begin": 7281,
											"end": 7299,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 7281,
											"end": 7299,
											"name": "tag",
											"source": 19,
											"value": "683"
										},
										{
											"begin": 7281,
											"end": 7299,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7337,
											"end": 7338,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 7323,
											"end": 7339,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7323,
											"end": 7339,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 7352,
											"end": 7357,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "165"
										},
										{
											"begin": 7352,
											"end": 7357,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 7149,
											"end": 7367,
											"name": "tag",
											"source": 19,
											"value": "679"
										},
										{
											"begin": 7149,
											"end": 7367,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 7149,
											"end": 7367,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 7451,
											"end": 7453,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 7441,
											"end": 7449,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 7438,
											"end": 7454,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 7432,
											"end": 7435,
											"name": "PUSH",
											"source": 19,
											"value": "133"
										},
										{
											"begin": 7426,
											"end": 7430,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 7423,
											"end": 7436,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 7419,
											"end": 7455,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 7413,
											"end": 7415,
											"name": "PUSH",
											"source": 19,
											"value": "4E"
										},
										{
											"begin": 7403,
											"end": 7411,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 7400,
											"end": 7416,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 7395,
											"end": 7397,
											"name": "PUSH",
											"source": 19,
											"value": "B"
										},
										{
											"begin": 7389,
											"end": 7393,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 7386,
											"end": 7398,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 7382,
											"end": 7417,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 7379,
											"end": 7456,
											"name": "OR",
											"source": 19
										},
										{
											"begin": 7376,
											"end": 7535,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 7376,
											"end": 7535,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "684"
										},
										{
											"begin": 7376,
											"end": 7535,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7488,
											"end": 7507,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 7488,
											"end": 7507,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 7488,
											"end": 7507,
											"name": "EXP",
											"source": 19
										},
										{
											"begin": 7520,
											"end": 7525,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "165"
										},
										{
											"begin": 7520,
											"end": 7525,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 7376,
											"end": 7535,
											"name": "tag",
											"source": 19,
											"value": "684"
										},
										{
											"begin": 7376,
											"end": 7535,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 7567,
											"end": 7601,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "685"
										},
										{
											"begin": 7592,
											"end": 7600,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 7586,
											"end": 7590,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 7567,
											"end": 7601,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "612"
										},
										{
											"begin": 7567,
											"end": 7601,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 7567,
											"end": 7601,
											"name": "tag",
											"source": 19,
											"value": "685"
										},
										{
											"begin": 7567,
											"end": 7601,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 7637,
											"end": 7643,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 7633,
											"end": 7634,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 7629,
											"end": 7635,
											"name": "NOT",
											"source": 19
										},
										{
											"begin": 7625,
											"end": 7644,
											"name": "DIV",
											"source": 19
										},
										{
											"begin": 7616,
											"end": 7623,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7613,
											"end": 7645,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 7610,
											"end": 7668,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 7610,
											"end": 7668,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "687"
										},
										{
											"begin": 7610,
											"end": 7668,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 7648,
											"end": 7666,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "687"
										},
										{
											"begin": 7648,
											"end": 7666,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "611"
										},
										{
											"begin": 7648,
											"end": 7666,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 7648,
											"end": 7666,
											"name": "tag",
											"source": 19,
											"value": "687"
										},
										{
											"begin": 7648,
											"end": 7666,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 7686,
											"end": 7706,
											"name": "MUL",
											"source": 19
										},
										{
											"begin": 7686,
											"end": 7706,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 6906,
											"end": 7712,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6906,
											"end": 7712,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 7717,
											"end": 7857,
											"name": "tag",
											"source": 19,
											"value": "274"
										},
										{
											"begin": 7717,
											"end": 7857,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 7775,
											"end": 7780,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 7804,
											"end": 7851,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "171"
										},
										{
											"begin": 7845,
											"end": 7849,
											"name": "PUSH",
											"source": 19,
											"value": "FF"
										},
										{
											"begin": 7835,
											"end": 7843,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 7831,
											"end": 7850,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 7825,
											"end": 7829,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 7804,
											"end": 7851,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "613"
										},
										{
											"begin": 7804,
											"end": 7851,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 7862,
											"end": 8030,
											"name": "tag",
											"source": 19,
											"value": "276"
										},
										{
											"begin": 7862,
											"end": 8030,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 7935,
											"end": 7944,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 7935,
											"end": 7944,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7935,
											"end": 7944,
											"name": "MUL",
											"source": 19
										},
										{
											"begin": 7966,
											"end": 7975,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 7966,
											"end": 7975,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 7983,
											"end": 7998,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7983,
											"end": 7998,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7983,
											"end": 7998,
											"name": "DIV",
											"source": 19
										},
										{
											"begin": 7977,
											"end": 7999,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 7977,
											"end": 7999,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 7963,
											"end": 8000,
											"name": "OR",
											"source": 19
										},
										{
											"begin": 7953,
											"end": 8024,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "165"
										},
										{
											"begin": 7953,
											"end": 8024,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 8004,
											"end": 8022,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "165"
										},
										{
											"begin": 8004,
											"end": 8022,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "611"
										},
										{
											"begin": 8004,
											"end": 8022,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 11430,
											"end": 11614,
											"name": "tag",
											"source": 19,
											"value": "366"
										},
										{
											"begin": 11430,
											"end": 11614,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 11500,
											"end": 11506,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 11553,
											"end": 11555,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 11541,
											"end": 11550,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 11532,
											"end": 11539,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 11528,
											"end": 11551,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 11524,
											"end": 11556,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 11521,
											"end": 11573,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 11521,
											"end": 11573,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "703"
										},
										{
											"begin": 11521,
											"end": 11573,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 11569,
											"end": 11570,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 11566,
											"end": 11567,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 11559,
											"end": 11571,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 11521,
											"end": 11573,
											"name": "tag",
											"source": 19,
											"value": "703"
										},
										{
											"begin": 11521,
											"end": 11573,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11592,
											"end": 11608,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 11592,
											"end": 11608,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 11430,
											"end": 11614,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11430,
											"end": 11614,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 14679,
											"end": 14806,
											"name": "tag",
											"source": 19,
											"value": "424"
										},
										{
											"begin": 14679,
											"end": 14806,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 14740,
											"end": 14750,
											"name": "PUSH",
											"source": 19,
											"value": "4E487B71"
										},
										{
											"begin": 14735,
											"end": 14738,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 14731,
											"end": 14751,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 14728,
											"end": 14729,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 14721,
											"end": 14752,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 14771,
											"end": 14775,
											"name": "PUSH",
											"source": 19,
											"value": "32"
										},
										{
											"begin": 14768,
											"end": 14769,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 14761,
											"end": 14776,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 14795,
											"end": 14799,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 14792,
											"end": 14793,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 14785,
											"end": 14800,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 14811,
											"end": 15218,
											"name": "tag",
											"source": 19,
											"value": "431"
										},
										{
											"begin": 14811,
											"end": 15218,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 15013,
											"end": 15015,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 14995,
											"end": 15016,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 14995,
											"end": 15016,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 14995,
											"end": 15016,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 15052,
											"end": 15054,
											"name": "PUSH",
											"source": 19,
											"value": "2B"
										},
										{
											"begin": 15032,
											"end": 15050,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 15032,
											"end": 15050,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 15032,
											"end": 15050,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 15025,
											"end": 15055,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 15091,
											"end": 15125,
											"name": "PUSH",
											"source": 19,
											"value": "496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069"
										},
										{
											"begin": 15086,
											"end": 15088,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 15071,
											"end": 15089,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 15071,
											"end": 15089,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 15064,
											"end": 15126,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6E697469616C697A696E67"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15157,
											"end": 15159,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 15142,
											"end": 15160,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 15142,
											"end": 15160,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 15135,
											"end": 15176,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 15208,
											"end": 15211,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 15193,
											"end": 15212,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 15193,
											"end": 15212,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 14811,
											"end": 15218,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 15986,
											"end": 16114,
											"name": "tag",
											"source": 19,
											"value": "513"
										},
										{
											"begin": 15986,
											"end": 16114,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 16053,
											"end": 16062,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 16053,
											"end": 16062,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 16053,
											"end": 16062,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 16074,
											"end": 16085,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 16074,
											"end": 16085,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 16074,
											"end": 16085,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 16071,
											"end": 16108,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 16071,
											"end": 16108,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "165"
										},
										{
											"begin": 16071,
											"end": 16108,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 16088,
											"end": 16106,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "165"
										},
										{
											"begin": 16088,
											"end": 16106,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "611"
										},
										{
											"begin": 16088,
											"end": 16106,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 16245,
											"end": 16790,
											"name": "tag",
											"source": 19,
											"value": "615"
										},
										{
											"begin": 16245,
											"end": 16790,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 16347,
											"end": 16349,
											"name": "PUSH",
											"source": 19,
											"value": "1F"
										},
										{
											"begin": 16342,
											"end": 16345,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 16339,
											"end": 16350,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 16336,
											"end": 16784,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 16336,
											"end": 16784,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "361"
										},
										{
											"begin": 16336,
											"end": 16784,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 16383,
											"end": 16384,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 16408,
											"end": 16413,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 16404,
											"end": 16406,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 16397,
											"end": 16414,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 16453,
											"end": 16457,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 16449,
											"end": 16451,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 16439,
											"end": 16458,
											"name": "KECCAK256",
											"source": 19
										},
										{
											"begin": 16523,
											"end": 16525,
											"name": "PUSH",
											"source": 19,
											"value": "1F"
										},
										{
											"begin": 16511,
											"end": 16521,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 16507,
											"end": 16526,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 16504,
											"end": 16505,
											"name": "PUSH",
											"source": 19,
											"value": "5"
										},
										{
											"begin": 16500,
											"end": 16527,
											"name": "SHR",
											"source": 19
										},
										{
											"begin": 16494,
											"end": 16498,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 16490,
											"end": 16528,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 16559,
											"end": 16563,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 16547,
											"end": 16557,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 16544,
											"end": 16564,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 16541,
											"end": 16588,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 16541,
											"end": 16588,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "722"
										},
										{
											"begin": 16541,
											"end": 16588,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 16582,
											"end": 16586,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 16541,
											"end": 16588,
											"name": "tag",
											"source": 19,
											"value": "722"
										},
										{
											"begin": 16541,
											"end": 16588,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 16637,
											"end": 16639,
											"name": "PUSH",
											"source": 19,
											"value": "1F"
										},
										{
											"begin": 16632,
											"end": 16635,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 16628,
											"end": 16640,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 16625,
											"end": 16626,
											"name": "PUSH",
											"source": 19,
											"value": "5"
										},
										{
											"begin": 16621,
											"end": 16641,
											"name": "SHR",
											"source": 19
										},
										{
											"begin": 16615,
											"end": 16619,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 16611,
											"end": 16642,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 16601,
											"end": 16642,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 16601,
											"end": 16642,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 16692,
											"end": 16774,
											"name": "tag",
											"source": 19,
											"value": "723"
										},
										{
											"begin": 16692,
											"end": 16774,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 16710,
											"end": 16712,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 16703,
											"end": 16708,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 16700,
											"end": 16713,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 16692,
											"end": 16774,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 16692,
											"end": 16774,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "725"
										},
										{
											"begin": 16692,
											"end": 16774,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 16755,
											"end": 16772,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 16755,
											"end": 16772,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 16755,
											"end": 16772,
											"name": "SSTORE",
											"source": 19
										},
										{
											"begin": 16736,
											"end": 16737,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 16725,
											"end": 16738,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 16692,
											"end": 16774,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "723"
										},
										{
											"begin": 16692,
											"end": 16774,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 16692,
											"end": 16774,
											"name": "tag",
											"source": 19,
											"value": "725"
										},
										{
											"begin": 16692,
											"end": 16774,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 16696,
											"end": 16699,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 16696,
											"end": 16699,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 16696,
											"end": 16699,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 16245,
											"end": 16790,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 16245,
											"end": 16790,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 16245,
											"end": 16790,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 16245,
											"end": 16790,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 16966,
											"end": 18318,
											"name": "tag",
											"source": 19,
											"value": "522"
										},
										{
											"begin": 16966,
											"end": 18318,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 17092,
											"end": 17095,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 17086,
											"end": 17096,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 17119,
											"end": 17137,
											"name": "PUSH",
											"source": 19,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 17111,
											"end": 17117,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 17108,
											"end": 17138,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 17105,
											"end": 17161,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 17105,
											"end": 17161,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "729"
										},
										{
											"begin": 17105,
											"end": 17161,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 17141,
											"end": 17159,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "729"
										},
										{
											"begin": 17141,
											"end": 17159,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "193"
										},
										{
											"begin": 17141,
											"end": 17159,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 17141,
											"end": 17159,
											"name": "tag",
											"source": 19,
											"value": "729"
										},
										{
											"begin": 17141,
											"end": 17159,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 17170,
											"end": 17267,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "730"
										},
										{
											"begin": 17260,
											"end": 17266,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 17220,
											"end": 17258,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "731"
										},
										{
											"begin": 17252,
											"end": 17256,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 17246,
											"end": 17257,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 17220,
											"end": 17258,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "160"
										},
										{
											"begin": 17220,
											"end": 17258,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 17220,
											"end": 17258,
											"name": "tag",
											"source": 19,
											"value": "731"
										},
										{
											"begin": 17220,
											"end": 17258,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 17214,
											"end": 17218,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 17170,
											"end": 17267,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "615"
										},
										{
											"begin": 17170,
											"end": 17267,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 17170,
											"end": 17267,
											"name": "tag",
											"source": 19,
											"value": "730"
										},
										{
											"begin": 17170,
											"end": 17267,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 17322,
											"end": 17326,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 17322,
											"end": 17326,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 17386,
											"end": 17388,
											"name": "PUSH",
											"source": 19,
											"value": "1F"
										},
										{
											"begin": 17375,
											"end": 17389,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 17375,
											"end": 17389,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 17403,
											"end": 17404,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 17398,
											"end": 18061,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 17398,
											"end": 18061,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 17398,
											"end": 18061,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "733"
										},
										{
											"begin": 17398,
											"end": 18061,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 18105,
											"end": 18106,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 18122,
											"end": 18128,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 18119,
											"end": 18208,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 18119,
											"end": 18208,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "734"
										},
										{
											"begin": 18119,
											"end": 18208,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 18174,
											"end": 18193,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 18174,
											"end": 18193,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 18174,
											"end": 18193,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 18168,
											"end": 18194,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 18119,
											"end": 18208,
											"name": "tag",
											"source": 19,
											"value": "734"
										},
										{
											"begin": 18119,
											"end": 18208,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 16923,
											"end": 16924,
											"name": "PUSH",
											"source": 19,
											"value": "3"
										},
										{
											"begin": 16919,
											"end": 16930,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 16919,
											"end": 16930,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 16919,
											"end": 16930,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 16915,
											"end": 16939,
											"name": "SHR",
											"source": 19
										},
										{
											"begin": 16911,
											"end": 16940,
											"name": "NOT",
											"source": 19
										},
										{
											"begin": 16901,
											"end": 16941,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 16947,
											"end": 16948,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 16943,
											"end": 16954,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 16943,
											"end": 16954,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 16943,
											"end": 16954,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 16898,
											"end": 16955,
											"name": "OR",
											"source": 19
										},
										{
											"begin": 18221,
											"end": 18302,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 18221,
											"end": 18302,
											"name": "SSTORE",
											"source": 19
										},
										{
											"begin": 17368,
											"end": 18312,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "725"
										},
										{
											"begin": 17368,
											"end": 18312,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 17398,
											"end": 18061,
											"name": "tag",
											"source": 19,
											"value": "733"
										},
										{
											"begin": 17398,
											"end": 18061,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 16192,
											"end": 16193,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 16185,
											"end": 16199,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 16185,
											"end": 16199,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 16185,
											"end": 16199,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 16229,
											"end": 16233,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 16216,
											"end": 16234,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 16216,
											"end": 16234,
											"name": "KECCAK256",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 17434,
											"end": 17454,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 17434,
											"end": 17454,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 17434,
											"end": 17454,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 17552,
											"end": 17788,
											"name": "tag",
											"source": 19,
											"value": "737"
										},
										{
											"begin": 17552,
											"end": 17788,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 17566,
											"end": 17573,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 17563,
											"end": 17564,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 17560,
											"end": 17574,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 17552,
											"end": 17788,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 17552,
											"end": 17788,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "739"
										},
										{
											"begin": 17552,
											"end": 17788,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 17655,
											"end": 17674,
											"name": "DUP9",
											"source": 19
										},
										{
											"begin": 17655,
											"end": 17674,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 17655,
											"end": 17674,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 17649,
											"end": 17675,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 17634,
											"end": 17676,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 17634,
											"end": 17676,
											"name": "SSTORE",
											"source": 19
										},
										{
											"begin": 17747,
											"end": 17774,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": 17747,
											"end": 17774,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 17747,
											"end": 17774,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 17747,
											"end": 17774,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": 17715,
											"end": 17716,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 17703,
											"end": 17717,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 17703,
											"end": 17717,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 17703,
											"end": 17717,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 17703,
											"end": 17717,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 17582,
											"end": 17601,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 17582,
											"end": 17601,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 17552,
											"end": 17788,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "737"
										},
										{
											"begin": 17552,
											"end": 17788,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 17552,
											"end": 17788,
											"name": "tag",
											"source": 19,
											"value": "739"
										},
										{
											"begin": 17552,
											"end": 17788,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 17556,
											"end": 17559,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 17816,
											"end": 17822,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 17807,
											"end": 17814,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 17804,
											"end": 17823,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 17801,
											"end": 18002,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 17801,
											"end": 18002,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "740"
										},
										{
											"begin": 17801,
											"end": 18002,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 17877,
											"end": 17896,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 17877,
											"end": 17896,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 17877,
											"end": 17896,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 17871,
											"end": 17897,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 17960,
											"end": 17961,
											"name": "PUSH",
											"source": 19,
											"value": "3"
										},
										{
											"begin": 17956,
											"end": 17970,
											"name": "DUP9",
											"source": 19
										},
										{
											"begin": 17956,
											"end": 17970,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 17956,
											"end": 17970,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 17972,
											"end": 17975,
											"name": "PUSH",
											"source": 19,
											"value": "F8"
										},
										{
											"begin": 17952,
											"end": 17976,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 17948,
											"end": 17985,
											"name": "SHR",
											"source": 19
										},
										{
											"begin": 17944,
											"end": 17986,
											"name": "NOT",
											"source": 19
										},
										{
											"begin": 17929,
											"end": 17987,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 17914,
											"end": 17988,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 17914,
											"end": 17988,
											"name": "SSTORE",
											"source": 19
										},
										{
											"begin": 17801,
											"end": 18002,
											"name": "tag",
											"source": 19,
											"value": "740"
										},
										{
											"begin": 17801,
											"end": 18002,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 18048,
											"end": 18049,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 18032,
											"end": 18046,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 18032,
											"end": 18046,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 18032,
											"end": 18046,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 18028,
											"end": 18050,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 18015,
											"end": 18051,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 18015,
											"end": 18051,
											"name": "SSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 16966,
											"end": 18318,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 19075,
											"end": 19362,
											"name": "tag",
											"source": 19,
											"value": "563"
										},
										{
											"begin": 19075,
											"end": 19362,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 19204,
											"end": 19207,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 19242,
											"end": 19248,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 19236,
											"end": 19249,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 19258,
											"end": 19324,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "744"
										},
										{
											"begin": 19317,
											"end": 19323,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 19312,
											"end": 19315,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 19305,
											"end": 19309,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 19297,
											"end": 19303,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 19293,
											"end": 19310,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 19258,
											"end": 19324,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "609"
										},
										{
											"begin": 19258,
											"end": 19324,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 19258,
											"end": 19324,
											"name": "tag",
											"source": 19,
											"value": "744"
										},
										{
											"begin": 19258,
											"end": 19324,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 19340,
											"end": 19356,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 19340,
											"end": 19356,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 19340,
											"end": 19356,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 19340,
											"end": 19356,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 19340,
											"end": 19356,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 19075,
											"end": 19362,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 19075,
											"end": 19362,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 19367,
											"end": 19584,
											"name": "tag",
											"source": 19,
											"value": "572"
										},
										{
											"begin": 19367,
											"end": 19584,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 19407,
											"end": 19408,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 19433,
											"end": 19434,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 19423,
											"end": 19555,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "746"
										},
										{
											"begin": 19423,
											"end": 19555,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 19477,
											"end": 19487,
											"name": "PUSH",
											"source": 19,
											"value": "4E487B71"
										},
										{
											"begin": 19472,
											"end": 19475,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 19468,
											"end": 19488,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 19465,
											"end": 19466,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 19458,
											"end": 19489,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 19512,
											"end": 19516,
											"name": "PUSH",
											"source": 19,
											"value": "12"
										},
										{
											"begin": 19509,
											"end": 19510,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 19502,
											"end": 19517,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 19540,
											"end": 19544,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 19537,
											"end": 19538,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 19530,
											"end": 19545,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 19423,
											"end": 19555,
											"name": "tag",
											"source": 19,
											"value": "746"
										},
										{
											"begin": 19423,
											"end": 19555,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 19569,
											"end": 19578,
											"name": "DIV",
											"source": 19
										},
										{
											"begin": 19569,
											"end": 19578,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 19367,
											"end": 19584,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										}
									],
									".data": {
										"75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D": "360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc",
										"9FDCD12E4B726339B32A442B0A448365D5D85C96B2D2CFF917B4F66C63110398": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564"
									}
								}
							},
							"sourceList": [
								"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/interfaces/draft-IERC1822Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/beacon/IBeaconUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/IERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/CountersUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/StorageSlotUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol",
								"contracts/BRNKC.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"balanceOfAt(address,uint256)": "4ee2cd7e",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"initialize()": "8129fc1c",
							"mint(address,uint256)": "40c10f19",
							"name()": "06fdde03",
							"owner()": "8da5cb5b",
							"pause()": "8456cb59",
							"paused()": "5c975abb",
							"proxiableUUID()": "52d1902d",
							"renounceOwnership()": "715018a6",
							"snapshot()": "9711715a",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"totalSupplyAt(uint256)": "981b24d0",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b",
							"unpause()": "3f4ba83a",
							"upgradeTo(address)": "3659cfe6",
							"upgradeToAndCall(address,bytes)": "4f1ef286"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Snapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"bnkt@bearnetwork.net\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"balanceOfAt(address,uint256)\":{\"details\":\"Retrieves the balance of `account` at the time `snapshotId` was created.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"totalSupplyAt(uint256)\":{\"details\":\"Retrieves the total supply at the time `snapshotId` was created.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BRNKC.sol\":\"BearNetwork\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d7fc8396619de513c96b6e00301b88dd790e83542aab918425633a5f7297a15a\",\"dweb:/ipfs/QmXbP4kiZyp7guuS7xe8KaybnwkRPGrBc2Kbi3vhcTfpxb\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/interfaces/draft-IERC1822Upgradeable.sol\":{\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://496bd9b3df2455d571018c09f0c6badd29713fdeb907c6aa09d8d28cb603f053\",\"dweb:/ipfs/QmXdJDyYs6WMwMh21dez2BYPxhSUaUYFMDtVNcn2cgFR79\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29dda00da6d269685b555e710e4abf1c3eb6d00c15b888a7880a2f8dd3c4fdc2\",\"dweb:/ipfs/QmSqcjtdECygtT1Gy7uEo42x8542srpgGEeKKHfcnQqXgn\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/proxy/beacon/IBeaconUpgradeable.sol\":{\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4dbfe1a3b3b3fb64294ce41fd2ad362e7b7012208117864f42c1a67620a6d5c1\",\"dweb:/ipfs/QmVMU5tWt7zBQMmf5cpMX8UMHV86T3kFeTxBTBjFqVWfoJ\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://899f850f7df5a270bccfb765d70069959ca1c20d3a7381c1c3bda8a3ffee1935\",\"dweb:/ipfs/QmVdnAqwyX2L3nX2HDA5WKGtVBFyH1nKE9A1k7fZnPBkhP\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol\":{\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40e60cbf0e2efede4d9c169e66336a64615af7b719a896ef1f37ae8cd4614ec1\",\"dweb:/ipfs/QmYNiwY22ifhfa8yK6mLCEKfj39caYUHLqe2VBtzDnvdsV\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol\":{\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9c7d1f5e15633ab912b74c2f57e24559e66b03232300d4b27ff0f25bc452ecad\",\"dweb:/ipfs/QmYTJkc1cntYkKQ1Tu11nBcJLakiy93Tjytc4XHELo4GmR\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7c39b800e55781c0f7a644ec9cc615664dbe2f009198e537e6acaad3086ba093\",\"dweb:/ipfs/Qmaugq2wsB1ASX8Kv29NwXqYhZY8HRNqcdvmBe9UUNEq2V\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3483370aa549810a946ace621a225616bb6d0b9ed22c3a99bbcf80dc4866ec39\",\"dweb:/ipfs/QmdgFnm6X2oQ574eJFLghVXVckwyC3SbiAUxXs934N1qvf\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\":{\"keccak256\":\"0x42da8099f59958af496f6c8f0d9c1ce0a929151e02f877e4be23aca4cc440cbe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://781b129c8102160319aeaf01b4760e50291bbe1e4ae12b97fbdb79bda38c0d3f\",\"dweb:/ipfs/QmNPDyvAPLaVBE5mS6fZJbqW4zZ93osaYdZEz2CPYRYtPU\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol\":{\"keccak256\":\"0xc3821e9d41b2b19b612238b308dcc8f4ab46afcd0f6b3bd174e89789bbf59e26\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e31dc401f4ddf373f106ddbab972d14eee74305c8fe358a4a6eedac7b934569a\",\"dweb:/ipfs/QmQ8zCXY1UkGLkRnA346kjSqAnfj1iWWH2Q4pE4qivqW3p\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/CountersUpgradeable.sol\":{\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c41e8a7a906b8f362c8b760a44edadc61782008ea2ecf377ac5b5325bf6c3912\",\"dweb:/ipfs/QmcXr19zuH3YLzD6RZNE6UTzvsKSckdxZQnagPoDGkCHu2\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/StorageSlotUpgradeable.sol\":{\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://aedb48081190fa828d243529ce25c708202c7d4ccfe99f0e4ecd6bc0cfcd03f3\",\"dweb:/ipfs/QmWyiDQHPZA56iqsAwTmiJoxvNeRQLUVr4gTfzpdpXivpo\"]},\"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol\":{\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://056027a78e6f4b78a39be530983551651ee5a052e786ca2c1c6a3bb1222b03b4\",\"dweb:/ipfs/QmXRUpywAqNwAfXS89vrtiE2THRM9dX9pQ4QxAkV1Wx9kt\"]},\"contracts/BRNKC.sol\":{\"keccak256\":\"0x212d345340e5b97accb03e3223df323fa1c3230f623e45f99b041e6a167eb3e3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0676dd8111d6c5579e7d2a4ba56a0d56c4ab7f9b7215457c7cf5351c00a9f597\",\"dweb:/ipfs/QmWcv7VHh66coAWur1M5NRNcPjrkQe4Ldv2gch3RNqMoMe\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 527,
								"contract": "contracts/BRNKC.sol:BearNetwork",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 530,
								"contract": "contracts/BRNKC.sol:BearNetwork",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 2560,
								"contract": "contracts/BRNKC.sol:BearNetwork",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 971,
								"contract": "contracts/BRNKC.sol:BearNetwork",
								"label": "_balances",
								"offset": 0,
								"slot": "51",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 977,
								"contract": "contracts/BRNKC.sol:BearNetwork",
								"label": "_allowances",
								"offset": 0,
								"slot": "52",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 979,
								"contract": "contracts/BRNKC.sol:BearNetwork",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "53",
								"type": "t_uint256"
							},
							{
								"astId": 981,
								"contract": "contracts/BRNKC.sol:BearNetwork",
								"label": "_name",
								"offset": 0,
								"slot": "54",
								"type": "t_string_storage"
							},
							{
								"astId": 983,
								"contract": "contracts/BRNKC.sol:BearNetwork",
								"label": "_symbol",
								"offset": 0,
								"slot": "55",
								"type": "t_string_storage"
							},
							{
								"astId": 1563,
								"contract": "contracts/BRNKC.sol:BearNetwork",
								"label": "__gap",
								"offset": 0,
								"slot": "56",
								"type": "t_array(t_uint256)45_storage"
							},
							{
								"astId": 1705,
								"contract": "contracts/BRNKC.sol:BearNetwork",
								"label": "__gap",
								"offset": 0,
								"slot": "101",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 1749,
								"contract": "contracts/BRNKC.sol:BearNetwork",
								"label": "_accountBalanceSnapshots",
								"offset": 0,
								"slot": "151",
								"type": "t_mapping(t_address,t_struct(Snapshots)1744_storage)"
							},
							{
								"astId": 1752,
								"contract": "contracts/BRNKC.sol:BearNetwork",
								"label": "_totalSupplySnapshots",
								"offset": 0,
								"slot": "152",
								"type": "t_struct(Snapshots)1744_storage"
							},
							{
								"astId": 1755,
								"contract": "contracts/BRNKC.sol:BearNetwork",
								"label": "_currentSnapshotId",
								"offset": 0,
								"slot": "154",
								"type": "t_struct(Counter)2567_storage"
							},
							{
								"astId": 2053,
								"contract": "contracts/BRNKC.sol:BearNetwork",
								"label": "__gap",
								"offset": 0,
								"slot": "155",
								"type": "t_array(t_uint256)46_storage"
							},
							{
								"astId": 10,
								"contract": "contracts/BRNKC.sol:BearNetwork",
								"label": "_owner",
								"offset": 0,
								"slot": "201",
								"type": "t_address"
							},
							{
								"astId": 130,
								"contract": "contracts/BRNKC.sol:BearNetwork",
								"label": "__gap",
								"offset": 0,
								"slot": "202",
								"type": "t_array(t_uint256)49_storage"
							},
							{
								"astId": 846,
								"contract": "contracts/BRNKC.sol:BearNetwork",
								"label": "_paused",
								"offset": 0,
								"slot": "251",
								"type": "t_bool"
							},
							{
								"astId": 951,
								"contract": "contracts/BRNKC.sol:BearNetwork",
								"label": "__gap",
								"offset": 0,
								"slot": "252",
								"type": "t_array(t_uint256)49_storage"
							},
							{
								"astId": 509,
								"contract": "contracts/BRNKC.sol:BearNetwork",
								"label": "__gap",
								"offset": 0,
								"slot": "301",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 824,
								"contract": "contracts/BRNKC.sol:BearNetwork",
								"label": "__gap",
								"offset": 0,
								"slot": "351",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)45_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[45]",
								"numberOfBytes": "1440"
							},
							"t_array(t_uint256)46_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[46]",
								"numberOfBytes": "1472"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_array(t_uint256)dyn_storage": {
								"base": "t_uint256",
								"encoding": "dynamic_array",
								"label": "uint256[]",
								"numberOfBytes": "32"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_struct(Snapshots)1744_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct ERC20SnapshotUpgradeable.Snapshots)",
								"numberOfBytes": "32",
								"value": "t_struct(Snapshots)1744_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(Counter)2567_storage": {
								"encoding": "inplace",
								"label": "struct CountersUpgradeable.Counter",
								"members": [
									{
										"astId": 2566,
										"contract": "contracts/BRNKC.sol:BearNetwork",
										"label": "_value",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "32"
							},
							"t_struct(Snapshots)1744_storage": {
								"encoding": "inplace",
								"label": "struct ERC20SnapshotUpgradeable.Snapshots",
								"members": [
									{
										"astId": 1740,
										"contract": "contracts/BRNKC.sol:BearNetwork",
										"label": "ids",
										"offset": 0,
										"slot": "0",
										"type": "t_array(t_uint256)dyn_storage"
									},
									{
										"astId": 1743,
										"contract": "contracts/BRNKC.sol:BearNetwork",
										"label": "values",
										"offset": 0,
										"slot": "1",
										"type": "t_array(t_uint256)dyn_storage"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2363
						],
						"ContextUpgradeable": [
							2561
						],
						"Initializable": [
							689
						],
						"OwnableUpgradeable": [
							131
						]
					},
					"id": 132,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 132,
							"sourceUnit": 2562,
							"src": "127:41:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 132,
							"sourceUnit": 690,
							"src": "169:42:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Initializable",
										"nameLocations": [
											"748:13:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 689,
										"src": "748:13:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "748:13:0"
								},
								{
									"baseName": {
										"id": 7,
										"name": "ContextUpgradeable",
										"nameLocations": [
											"763:18:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2561,
										"src": "763:18:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "763:18:0"
								}
							],
							"canonicalName": "OwnableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "213:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 131,
							"linearizedBaseContracts": [
								131,
								2561,
								689
							],
							"name": "OwnableUpgradeable",
							"nameLocation": "726:18:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 10,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "804:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 131,
									"src": "788:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 9,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "788:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 16,
									"name": "OwnershipTransferred",
									"nameLocation": "823:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "860:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "844:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 11,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "844:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "891:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "875:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "875:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:57:0"
									},
									"src": "817:84:0"
								},
								{
									"body": {
										"id": 25,
										"nodeType": "Block",
										"src": "1055:43:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 22,
														"name": "__Ownable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 37,
														"src": "1065:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 23,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1065:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 24,
												"nodeType": "ExpressionStatement",
												"src": "1065:26:0"
											}
										]
									},
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "907:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 26,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 20,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 19,
												"name": "onlyInitializing",
												"nameLocations": [
													"1038:16:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 634,
												"src": "1038:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1038:16:0"
										}
									],
									"name": "__Ownable_init",
									"nameLocation": "1012:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1026:2:0"
									},
									"returnParameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1055:0:0"
									},
									"scope": 131,
									"src": "1003:95:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 36,
										"nodeType": "Block",
										"src": "1166:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 32,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2546,
																"src": "1195:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 33,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1195:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 31,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 125,
														"src": "1176:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 34,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1176:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 35,
												"nodeType": "ExpressionStatement",
												"src": "1176:32:0"
											}
										]
									},
									"id": 37,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 29,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 28,
												"name": "onlyInitializing",
												"nameLocations": [
													"1149:16:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 634,
												"src": "1149:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1149:16:0"
										}
									],
									"name": "__Ownable_init_unchained",
									"nameLocation": "1113:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 27,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1137:2:0"
									},
									"returnParameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1166:0:0"
									},
									"scope": 131,
									"src": "1104:111:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 44,
										"nodeType": "Block",
										"src": "1324:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 40,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 68,
														"src": "1334:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 41,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1334:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 42,
												"nodeType": "ExpressionStatement",
												"src": "1334:13:0"
											},
											{
												"id": 43,
												"nodeType": "PlaceholderStatement",
												"src": "1357:1:0"
											}
										]
									},
									"documentation": {
										"id": 38,
										"nodeType": "StructuredDocumentation",
										"src": "1221:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 45,
									"name": "onlyOwner",
									"nameLocation": "1312:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1321:2:0"
									},
									"src": "1303:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1496:30:0",
										"statements": [
											{
												"expression": {
													"id": 51,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 10,
													"src": "1513:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 50,
												"id": 52,
												"nodeType": "Return",
												"src": "1506:13:0"
											}
										]
									},
									"documentation": {
										"id": 46,
										"nodeType": "StructuredDocumentation",
										"src": "1371:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1450:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 47,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1455:2:0"
									},
									"returnParameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1487:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1487:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1486:9:0"
									},
									"scope": 131,
									"src": "1441:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1644:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 63,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 59,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 54,
																	"src": "1662:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 60,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1662:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 61,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2546,
																	"src": "1673:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1673:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1662:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1687:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 58,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1654:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1654:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1654:68:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1532:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1608:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1619:2:0"
									},
									"returnParameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1644:0:0"
									},
									"scope": 131,
									"src": "1599:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 81,
										"nodeType": "Block",
										"src": "2125:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 77,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2162:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 76,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2154:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 75,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2154:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 78,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2154:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 74,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 125,
														"src": "2135:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 79,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2135:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 80,
												"nodeType": "ExpressionStatement",
												"src": "2135:30:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1735:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 82,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 72,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 71,
												"name": "onlyOwner",
												"nameLocations": [
													"2115:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 45,
												"src": "2115:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2115:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2080:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2097:2:0"
									},
									"returnParameters": {
										"id": 73,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2125:0:0"
									},
									"scope": 131,
									"src": "2071:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 104,
										"nodeType": "Block",
										"src": "2391:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 96,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 91,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 85,
																"src": "2409:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 94,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2429:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2421:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 92,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2421:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 95,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2421:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2409:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 97,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2433:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 90,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2401:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 98,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2401:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 99,
												"nodeType": "ExpressionStatement",
												"src": "2401:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 101,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 85,
															"src": "2503:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 100,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 125,
														"src": "2484:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2484:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 103,
												"nodeType": "ExpressionStatement",
												"src": "2484:28:0"
											}
										]
									},
									"documentation": {
										"id": 83,
										"nodeType": "StructuredDocumentation",
										"src": "2178:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 105,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 88,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 87,
												"name": "onlyOwner",
												"nameLocations": [
													"2381:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 45,
												"src": "2381:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2381:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2330:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2356:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 105,
												"src": "2348:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 84,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2348:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2347:18:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2391:0:0"
									},
									"scope": 131,
									"src": "2321:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 124,
										"nodeType": "Block",
										"src": "2736:124:0",
										"statements": [
											{
												"assignments": [
													112
												],
												"declarations": [
													{
														"constant": false,
														"id": 112,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2754:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 124,
														"src": "2746:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 111,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2746:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 114,
												"initialValue": {
													"id": 113,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 10,
													"src": "2765:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2746:25:0"
											},
											{
												"expression": {
													"id": 117,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 115,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "2781:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 116,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 108,
														"src": "2790:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2781:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 118,
												"nodeType": "ExpressionStatement",
												"src": "2781:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 120,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 112,
															"src": "2834:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 121,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 108,
															"src": "2844:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 119,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 16,
														"src": "2813:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2813:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 123,
												"nodeType": "EmitStatement",
												"src": "2808:45:0"
											}
										]
									},
									"documentation": {
										"id": 106,
										"nodeType": "StructuredDocumentation",
										"src": "2525:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 125,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2682:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 108,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2709:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 125,
												"src": "2701:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 107,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2700:18:0"
									},
									"returnParameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2736:0:0"
									},
									"scope": 131,
									"src": "2673:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 126,
										"nodeType": "StructuredDocumentation",
										"src": "2866:254:0",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 130,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "3145:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 131,
									"src": "3125:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 127,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "3125:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 129,
										"length": {
											"hexValue": "3439",
											"id": 128,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "3133:2:0",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "3125:11:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 132,
							"src": "708:2445:0",
							"usedErrors": []
						}
					],
					"src": "102:3052:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/interfaces/draft-IERC1822Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/interfaces/draft-IERC1822Upgradeable.sol",
					"exportedSymbols": {
						"IERC1822ProxiableUpgradeable": [
							141
						]
					},
					"id": 142,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 133,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1822ProxiableUpgradeable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 134,
								"nodeType": "StructuredDocumentation",
								"src": "138:203:1",
								"text": " @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n proxy whose upgrades are fully controlled by the current implementation."
							},
							"fullyImplemented": false,
							"id": 141,
							"linearizedBaseContracts": [
								141
							],
							"name": "IERC1822ProxiableUpgradeable",
							"nameLocation": "352:28:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 135,
										"nodeType": "StructuredDocumentation",
										"src": "387:438:1",
										"text": " @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n address.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy."
									},
									"functionSelector": "52d1902d",
									"id": 140,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "proxiableUUID",
									"nameLocation": "839:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 136,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "852:2:1"
									},
									"returnParameters": {
										"id": 139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 138,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "878:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 137,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "878:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "877:9:1"
									},
									"scope": 141,
									"src": "830:57:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 142,
							"src": "342:547:1",
							"usedErrors": []
						}
					],
					"src": "113:777:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2363
						],
						"ERC1967UpgradeUpgradeable": [
							510
						],
						"IBeaconUpgradeable": [
							520
						],
						"IERC1822ProxiableUpgradeable": [
							141
						],
						"Initializable": [
							689
						],
						"StorageSlotUpgradeable": [
							2695
						]
					},
					"id": 511,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 143,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "116:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/beacon/IBeaconUpgradeable.sol",
							"file": "../beacon/IBeaconUpgradeable.sol",
							"id": 144,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 511,
							"sourceUnit": 521,
							"src": "141:42:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/interfaces/draft-IERC1822Upgradeable.sol",
							"file": "../../interfaces/draft-IERC1822Upgradeable.sol",
							"id": 145,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 511,
							"sourceUnit": 142,
							"src": "184:56:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol",
							"file": "../../utils/AddressUpgradeable.sol",
							"id": 146,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 511,
							"sourceUnit": 2364,
							"src": "241:44:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/utils/StorageSlotUpgradeable.sol",
							"file": "../../utils/StorageSlotUpgradeable.sol",
							"id": 147,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 511,
							"sourceUnit": 2696,
							"src": "286:48:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol",
							"file": "../utils/Initializable.sol",
							"id": 148,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 511,
							"sourceUnit": 690,
							"src": "335:36:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 150,
										"name": "Initializable",
										"nameLocations": [
											"657:13:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 689,
										"src": "657:13:2"
									},
									"id": 151,
									"nodeType": "InheritanceSpecifier",
									"src": "657:13:2"
								}
							],
							"canonicalName": "ERC1967UpgradeUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 149,
								"nodeType": "StructuredDocumentation",
								"src": "373:236:2",
								"text": " @dev This abstract contract provides getters and event emitting update functions for\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n _Available since v4.1._\n @custom:oz-upgrades-unsafe-allow delegatecall"
							},
							"fullyImplemented": true,
							"id": 510,
							"linearizedBaseContracts": [
								510,
								689
							],
							"name": "ERC1967UpgradeUpgradeable",
							"nameLocation": "628:25:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 156,
										"nodeType": "Block",
										"src": "736:7:2",
										"statements": []
									},
									"id": 157,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 154,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 153,
												"name": "onlyInitializing",
												"nameLocations": [
													"719:16:2"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 634,
												"src": "719:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "719:16:2"
										}
									],
									"name": "__ERC1967Upgrade_init",
									"nameLocation": "686:21:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "707:2:2"
									},
									"returnParameters": {
										"id": 155,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "736:0:2"
									},
									"scope": 510,
									"src": "677:66:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 162,
										"nodeType": "Block",
										"src": "818:7:2",
										"statements": []
									},
									"id": 163,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 160,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 159,
												"name": "onlyInitializing",
												"nameLocations": [
													"801:16:2"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 634,
												"src": "801:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "801:16:2"
										}
									],
									"name": "__ERC1967Upgrade_init_unchained",
									"nameLocation": "758:31:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "789:2:2"
									},
									"returnParameters": {
										"id": 161,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "818:0:2"
									},
									"scope": 510,
									"src": "749:76:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 166,
									"mutability": "constant",
									"name": "_ROLLBACK_SLOT",
									"nameLocation": "934:14:2",
									"nodeType": "VariableDeclaration",
									"scope": 510,
									"src": "909:108:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 164,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "909:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307834393130666466613136666564333236306564306537313437663763633664613131613630323038623562393430366431326136333536313466666439313433",
										"id": 165,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "951:66:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_33048860383849004559742813297059419343339852917517107368639918720169455489347_by_1",
											"typeString": "int_const 3304...(69 digits omitted)...9347"
										},
										"value": "0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"documentation": {
										"id": 167,
										"nodeType": "StructuredDocumentation",
										"src": "1024:214:2",
										"text": " @dev Storage slot with the address of the current implementation.\n This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n validated in the constructor."
									},
									"id": 170,
									"mutability": "constant",
									"name": "_IMPLEMENTATION_SLOT",
									"nameLocation": "1269:20:2",
									"nodeType": "VariableDeclaration",
									"scope": 510,
									"src": "1243:115:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 168,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1243:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263",
										"id": 169,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1292:66:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1",
											"typeString": "int_const 2444...(69 digits omitted)...5612"
										},
										"value": "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"
									},
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 171,
										"nodeType": "StructuredDocumentation",
										"src": "1365:68:2",
										"text": " @dev Emitted when the implementation is upgraded."
									},
									"eventSelector": "bc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b",
									"id": 175,
									"name": "Upgraded",
									"nameLocation": "1444:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 173,
												"indexed": true,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "1469:14:2",
												"nodeType": "VariableDeclaration",
												"scope": 175,
												"src": "1453:30:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 172,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1453:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1452:32:2"
									},
									"src": "1438:47:2"
								},
								{
									"body": {
										"id": 187,
										"nodeType": "Block",
										"src": "1625:89:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"id": 183,
																"name": "_IMPLEMENTATION_SLOT",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 170,
																"src": "1680:20:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"expression": {
																"id": 181,
																"name": "StorageSlotUpgradeable",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2695,
																"src": "1642:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_StorageSlotUpgradeable_$2695_$",
																	"typeString": "type(library StorageSlotUpgradeable)"
																}
															},
															"id": 182,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1665:14:2",
															"memberName": "getAddressSlot",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2661,
															"src": "1642:37:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2641_storage_ptr_$",
																"typeString": "function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"
															}
														},
														"id": 184,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1642:59:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_AddressSlot_$2641_storage_ptr",
															"typeString": "struct StorageSlotUpgradeable.AddressSlot storage pointer"
														}
													},
													"id": 185,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1702:5:2",
													"memberName": "value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2640,
													"src": "1642:65:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 180,
												"id": 186,
												"nodeType": "Return",
												"src": "1635:72:2"
											}
										]
									},
									"documentation": {
										"id": 176,
										"nodeType": "StructuredDocumentation",
										"src": "1491:67:2",
										"text": " @dev Returns the current implementation address."
									},
									"id": 188,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getImplementation",
									"nameLocation": "1572:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1590:2:2"
									},
									"returnParameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "1616:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 178,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1616:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1615:9:2"
									},
									"scope": 510,
									"src": "1563:151:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 211,
										"nodeType": "Block",
										"src": "1868:218:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 197,
																	"name": "newImplementation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 191,
																	"src": "1916:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 195,
																	"name": "AddressUpgradeable",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2363,
																	"src": "1886:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$2363_$",
																		"typeString": "type(library AddressUpgradeable)"
																	}
																},
																"id": 196,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1905:10:2",
																"memberName": "isContract",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2097,
																"src": "1886:29:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 198,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1886:48:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374",
															"id": 199,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1936:47:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65",
																"typeString": "literal_string \"ERC1967: new implementation is not a contract\""
															},
															"value": "ERC1967: new implementation is not a contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65",
																"typeString": "literal_string \"ERC1967: new implementation is not a contract\""
															}
														],
														"id": 194,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1878:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 200,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1878:106:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 201,
												"nodeType": "ExpressionStatement",
												"src": "1878:106:2"
											},
											{
												"expression": {
													"id": 209,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"arguments": [
																{
																	"id": 205,
																	"name": "_IMPLEMENTATION_SLOT",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 170,
																	"src": "2032:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 202,
																	"name": "StorageSlotUpgradeable",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2695,
																	"src": "1994:22:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_StorageSlotUpgradeable_$2695_$",
																		"typeString": "type(library StorageSlotUpgradeable)"
																	}
																},
																"id": 204,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2017:14:2",
																"memberName": "getAddressSlot",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2661,
																"src": "1994:37:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2641_storage_ptr_$",
																	"typeString": "function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"
																}
															},
															"id": 206,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1994:59:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressSlot_$2641_storage_ptr",
																"typeString": "struct StorageSlotUpgradeable.AddressSlot storage pointer"
															}
														},
														"id": 207,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "2054:5:2",
														"memberName": "value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2640,
														"src": "1994:65:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 208,
														"name": "newImplementation",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 191,
														"src": "2062:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1994:85:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 210,
												"nodeType": "ExpressionStatement",
												"src": "1994:85:2"
											}
										]
									},
									"documentation": {
										"id": 189,
										"nodeType": "StructuredDocumentation",
										"src": "1720:80:2",
										"text": " @dev Stores a new address in the EIP1967 implementation slot."
									},
									"id": 212,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setImplementation",
									"nameLocation": "1814:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 192,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 191,
												"mutability": "mutable",
												"name": "newImplementation",
												"nameLocation": "1841:17:2",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "1833:25:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 190,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1833:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1832:27:2"
									},
									"returnParameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1868:0:2"
									},
									"scope": 510,
									"src": "1805:281:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 226,
										"nodeType": "Block",
										"src": "2248:96:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 219,
															"name": "newImplementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 215,
															"src": "2277:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 218,
														"name": "_setImplementation",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 212,
														"src": "2258:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 220,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2258:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 221,
												"nodeType": "ExpressionStatement",
												"src": "2258:37:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 223,
															"name": "newImplementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 215,
															"src": "2319:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 222,
														"name": "Upgraded",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 175,
														"src": "2310:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 224,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2310:27:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 225,
												"nodeType": "EmitStatement",
												"src": "2305:32:2"
											}
										]
									},
									"documentation": {
										"id": 213,
										"nodeType": "StructuredDocumentation",
										"src": "2092:95:2",
										"text": " @dev Perform implementation upgrade\n Emits an {Upgraded} event."
									},
									"id": 227,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_upgradeTo",
									"nameLocation": "2201:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 216,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "newImplementation",
												"nameLocation": "2220:17:2",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "2212:25:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 214,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2212:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2211:27:2"
									},
									"returnParameters": {
										"id": 217,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2248:0:2"
									},
									"scope": 510,
									"src": "2192:152:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 254,
										"nodeType": "Block",
										"src": "2606:160:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 238,
															"name": "newImplementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 230,
															"src": "2627:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 237,
														"name": "_upgradeTo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 227,
														"src": "2616:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 239,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2616:29:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 240,
												"nodeType": "ExpressionStatement",
												"src": "2616:29:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 246,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 244,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 241,
																"name": "data",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 232,
																"src": "2659:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 242,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2664:6:2",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "2659:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 243,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2673:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "2659:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"id": 245,
														"name": "forceCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 234,
														"src": "2678:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2659:28:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 253,
												"nodeType": "IfStatement",
												"src": "2655:105:2",
												"trueBody": {
													"id": 252,
													"nodeType": "Block",
													"src": "2689:71:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 248,
																		"name": "newImplementation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 230,
																		"src": "2725:17:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 249,
																		"name": "data",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 232,
																		"src": "2744:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 247,
																	"name": "_functionDelegateCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 504,
																	"src": "2703:21:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function (address,bytes memory) returns (bytes memory)"
																	}
																},
																"id": 250,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2703:46:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 251,
															"nodeType": "ExpressionStatement",
															"src": "2703:46:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 228,
										"nodeType": "StructuredDocumentation",
										"src": "2350:123:2",
										"text": " @dev Perform implementation upgrade with additional setup call.\n Emits an {Upgraded} event."
									},
									"id": 255,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_upgradeToAndCall",
									"nameLocation": "2487:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 230,
												"mutability": "mutable",
												"name": "newImplementation",
												"nameLocation": "2522:17:2",
												"nodeType": "VariableDeclaration",
												"scope": 255,
												"src": "2514:25:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 229,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2514:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 232,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2562:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 255,
												"src": "2549:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 231,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2549:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "forceCall",
												"nameLocation": "2581:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 255,
												"src": "2576:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 233,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2576:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2504:92:2"
									},
									"returnParameters": {
										"id": 236,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2606:0:2"
									},
									"scope": 510,
									"src": "2478:288:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 307,
										"nodeType": "Block",
										"src": "3070:842:2",
										"statements": [
											{
												"condition": {
													"expression": {
														"arguments": [
															{
																"id": 267,
																"name": "_ROLLBACK_SLOT",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 166,
																"src": "3422:14:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"expression": {
																"id": 265,
																"name": "StorageSlotUpgradeable",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2695,
																"src": "3384:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_StorageSlotUpgradeable_$2695_$",
																	"typeString": "type(library StorageSlotUpgradeable)"
																}
															},
															"id": 266,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3407:14:2",
															"memberName": "getBooleanSlot",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2672,
															"src": "3384:37:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_BooleanSlot_$2644_storage_ptr_$",
																"typeString": "function (bytes32) pure returns (struct StorageSlotUpgradeable.BooleanSlot storage pointer)"
															}
														},
														"id": 268,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3384:53:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_BooleanSlot_$2644_storage_ptr",
															"typeString": "struct StorageSlotUpgradeable.BooleanSlot storage pointer"
														}
													},
													"id": 269,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3438:5:2",
													"memberName": "value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2643,
													"src": "3384:59:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 305,
													"nodeType": "Block",
													"src": "3513:393:2",
													"statements": [
														{
															"clauses": [
																{
																	"block": {
																		"id": 290,
																		"nodeType": "Block",
																		"src": "3618:115:2",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							},
																							"id": 286,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"id": 284,
																								"name": "slot",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 281,
																								"src": "3644:4:2",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "==",
																							"rightExpression": {
																								"id": 285,
																								"name": "_IMPLEMENTATION_SLOT",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 170,
																								"src": "3652:20:2",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								}
																							},
																							"src": "3644:28:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bool",
																								"typeString": "bool"
																							}
																						},
																						{
																							"hexValue": "45524331393637557067726164653a20756e737570706f727465642070726f786961626c6555554944",
																							"id": 287,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "string",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "3674:43:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c",
																								"typeString": "literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""
																							},
																							"value": "ERC1967Upgrade: unsupported proxiableUUID"
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_bool",
																								"typeString": "bool"
																							},
																							{
																								"typeIdentifier": "t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c",
																								"typeString": "literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""
																							}
																						],
																						"id": 283,
																						"name": "require",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [
																							4294967278,
																							4294967278
																						],
																						"referencedDeclaration": 4294967278,
																						"src": "3636:7:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																							"typeString": "function (bool,string memory) pure"
																						}
																					},
																					"id": 288,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "3636:82:2",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_tuple$__$",
																						"typeString": "tuple()"
																					}
																				},
																				"id": 289,
																				"nodeType": "ExpressionStatement",
																				"src": "3636:82:2"
																			}
																		]
																	},
																	"errorName": "",
																	"id": 291,
																	"nodeType": "TryCatchClause",
																	"parameters": {
																		"id": 282,
																		"nodeType": "ParameterList",
																		"parameters": [
																			{
																				"constant": false,
																				"id": 281,
																				"mutability": "mutable",
																				"name": "slot",
																				"nameLocation": "3612:4:2",
																				"nodeType": "VariableDeclaration",
																				"scope": 291,
																				"src": "3604:12:2",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				},
																				"typeName": {
																					"id": 280,
																					"name": "bytes32",
																					"nodeType": "ElementaryTypeName",
																					"src": "3604:7:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"src": "3603:14:2"
																	},
																	"src": "3595:138:2"
																},
																{
																	"block": {
																		"id": 296,
																		"nodeType": "Block",
																		"src": "3740:89:2",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"hexValue": "45524331393637557067726164653a206e657720696d706c656d656e746174696f6e206973206e6f742055555053",
																							"id": 293,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "string",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "3765:48:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24",
																								"typeString": "literal_string \"ERC1967Upgrade: new implementation is not UUPS\""
																							},
																							"value": "ERC1967Upgrade: new implementation is not UUPS"
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24",
																								"typeString": "literal_string \"ERC1967Upgrade: new implementation is not UUPS\""
																							}
																						],
																						"id": 292,
																						"name": "revert",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [
																							4294967277,
																							4294967277
																						],
																						"referencedDeclaration": 4294967277,
																						"src": "3758:6:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																							"typeString": "function (string memory) pure"
																						}
																					},
																					"id": 294,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "3758:56:2",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_tuple$__$",
																						"typeString": "tuple()"
																					}
																				},
																				"id": 295,
																				"nodeType": "ExpressionStatement",
																				"src": "3758:56:2"
																			}
																		]
																	},
																	"errorName": "",
																	"id": 297,
																	"nodeType": "TryCatchClause",
																	"src": "3734:95:2"
																}
															],
															"externalCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"arguments": [
																			{
																				"id": 276,
																				"name": "newImplementation",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 258,
																				"src": "3560:17:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 275,
																			"name": "IERC1822ProxiableUpgradeable",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 141,
																			"src": "3531:28:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC1822ProxiableUpgradeable_$141_$",
																				"typeString": "type(contract IERC1822ProxiableUpgradeable)"
																			}
																		},
																		"id": 277,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3531:47:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC1822ProxiableUpgradeable_$141",
																			"typeString": "contract IERC1822ProxiableUpgradeable"
																		}
																	},
																	"id": 278,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "3579:13:2",
																	"memberName": "proxiableUUID",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 140,
																	"src": "3531:61:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_bytes32_$",
																		"typeString": "function () view external returns (bytes32)"
																	}
																},
																"id": 279,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3531:63:2",
																"tryCall": true,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 298,
															"nodeType": "TryStatement",
															"src": "3527:302:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 300,
																		"name": "newImplementation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 258,
																		"src": "3860:17:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 301,
																		"name": "data",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 260,
																		"src": "3879:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 302,
																		"name": "forceCall",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 262,
																		"src": "3885:9:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 299,
																	"name": "_upgradeToAndCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 255,
																	"src": "3842:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$",
																		"typeString": "function (address,bytes memory,bool)"
																	}
																},
																"id": 303,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3842:53:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 304,
															"nodeType": "ExpressionStatement",
															"src": "3842:53:2"
														}
													]
												},
												"id": 306,
												"nodeType": "IfStatement",
												"src": "3380:526:2",
												"trueBody": {
													"id": 274,
													"nodeType": "Block",
													"src": "3445:62:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 271,
																		"name": "newImplementation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 258,
																		"src": "3478:17:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 270,
																	"name": "_setImplementation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 212,
																	"src": "3459:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
																		"typeString": "function (address)"
																	}
																},
																"id": 272,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3459:37:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 273,
															"nodeType": "ExpressionStatement",
															"src": "3459:37:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 256,
										"nodeType": "StructuredDocumentation",
										"src": "2772:161:2",
										"text": " @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n Emits an {Upgraded} event."
									},
									"id": 308,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_upgradeToAndCallUUPS",
									"nameLocation": "2947:21:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "newImplementation",
												"nameLocation": "2986:17:2",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "2978:25:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 257,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2978:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3026:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "3013:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 259,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3013:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "forceCall",
												"nameLocation": "3045:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "3040:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 261,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3040:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2968:92:2"
									},
									"returnParameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3070:0:2"
									},
									"scope": 510,
									"src": "2938:974:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 309,
										"nodeType": "StructuredDocumentation",
										"src": "3918:189:2",
										"text": " @dev Storage slot with the admin of the contract.\n This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n validated in the constructor."
									},
									"id": 312,
									"mutability": "constant",
									"name": "_ADMIN_SLOT",
									"nameLocation": "4138:11:2",
									"nodeType": "VariableDeclaration",
									"scope": 510,
									"src": "4112:106:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 310,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "4112:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307862353331323736383461353638623331373361653133623966386136303136653234336536336236653865653131373864366137313738353062356436313033",
										"id": 311,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "4152:66:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_81955473079516046949633743016697847541294818689821282749996681496272635257091_by_1",
											"typeString": "int_const 8195...(69 digits omitted)...7091"
										},
										"value": "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"
									},
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 313,
										"nodeType": "StructuredDocumentation",
										"src": "4225:67:2",
										"text": " @dev Emitted when the admin account has changed."
									},
									"eventSelector": "7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f",
									"id": 319,
									"name": "AdminChanged",
									"nameLocation": "4303:12:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 318,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 315,
												"indexed": false,
												"mutability": "mutable",
												"name": "previousAdmin",
												"nameLocation": "4324:13:2",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "4316:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 314,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4316:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 317,
												"indexed": false,
												"mutability": "mutable",
												"name": "newAdmin",
												"nameLocation": "4347:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "4339:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 316,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4339:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4315:41:2"
									},
									"src": "4297:60:2"
								},
								{
									"body": {
										"id": 331,
										"nodeType": "Block",
										"src": "4471:80:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"id": 327,
																"name": "_ADMIN_SLOT",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 312,
																"src": "4526:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"expression": {
																"id": 325,
																"name": "StorageSlotUpgradeable",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2695,
																"src": "4488:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_StorageSlotUpgradeable_$2695_$",
																	"typeString": "type(library StorageSlotUpgradeable)"
																}
															},
															"id": 326,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4511:14:2",
															"memberName": "getAddressSlot",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2661,
															"src": "4488:37:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2641_storage_ptr_$",
																"typeString": "function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"
															}
														},
														"id": 328,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4488:50:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_AddressSlot_$2641_storage_ptr",
															"typeString": "struct StorageSlotUpgradeable.AddressSlot storage pointer"
														}
													},
													"id": 329,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4539:5:2",
													"memberName": "value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2640,
													"src": "4488:56:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 324,
												"id": 330,
												"nodeType": "Return",
												"src": "4481:63:2"
											}
										]
									},
									"documentation": {
										"id": 320,
										"nodeType": "StructuredDocumentation",
										"src": "4363:50:2",
										"text": " @dev Returns the current admin."
									},
									"id": 332,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getAdmin",
									"nameLocation": "4427:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 321,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4436:2:2"
									},
									"returnParameters": {
										"id": 324,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 323,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 332,
												"src": "4462:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 322,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4462:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4461:9:2"
									},
									"scope": 510,
									"src": "4418:133:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 357,
										"nodeType": "Block",
										"src": "4678:167:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 344,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 339,
																"name": "newAdmin",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 335,
																"src": "4696:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 342,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4716:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 341,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4708:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 340,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "4708:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 343,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4708:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "4696:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "455243313936373a206e65772061646d696e20697320746865207a65726f2061646472657373",
															"id": 345,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4720:40:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5",
																"typeString": "literal_string \"ERC1967: new admin is the zero address\""
															},
															"value": "ERC1967: new admin is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5",
																"typeString": "literal_string \"ERC1967: new admin is the zero address\""
															}
														],
														"id": 338,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4688:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4688:73:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 347,
												"nodeType": "ExpressionStatement",
												"src": "4688:73:2"
											},
											{
												"expression": {
													"id": 355,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"arguments": [
																{
																	"id": 351,
																	"name": "_ADMIN_SLOT",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 312,
																	"src": "4809:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 348,
																	"name": "StorageSlotUpgradeable",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2695,
																	"src": "4771:22:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_StorageSlotUpgradeable_$2695_$",
																		"typeString": "type(library StorageSlotUpgradeable)"
																	}
																},
																"id": 350,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4794:14:2",
																"memberName": "getAddressSlot",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2661,
																"src": "4771:37:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2641_storage_ptr_$",
																	"typeString": "function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"
																}
															},
															"id": 352,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4771:50:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressSlot_$2641_storage_ptr",
																"typeString": "struct StorageSlotUpgradeable.AddressSlot storage pointer"
															}
														},
														"id": 353,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "4822:5:2",
														"memberName": "value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2640,
														"src": "4771:56:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 354,
														"name": "newAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 335,
														"src": "4830:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4771:67:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 356,
												"nodeType": "ExpressionStatement",
												"src": "4771:67:2"
											}
										]
									},
									"documentation": {
										"id": 333,
										"nodeType": "StructuredDocumentation",
										"src": "4557:71:2",
										"text": " @dev Stores a new address in the EIP1967 admin slot."
									},
									"id": 358,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setAdmin",
									"nameLocation": "4642:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "newAdmin",
												"nameLocation": "4660:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 358,
												"src": "4652:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 334,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4652:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4651:18:2"
									},
									"returnParameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4678:0:2"
									},
									"scope": 510,
									"src": "4633:212:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 374,
										"nodeType": "Block",
										"src": "5005:86:2",
										"statements": [
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 365,
																"name": "_getAdmin",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 332,
																"src": "5033:9:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 366,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5033:11:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 367,
															"name": "newAdmin",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 361,
															"src": "5046:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 364,
														"name": "AdminChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 319,
														"src": "5020:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 368,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5020:35:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 369,
												"nodeType": "EmitStatement",
												"src": "5015:40:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 371,
															"name": "newAdmin",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 361,
															"src": "5075:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 370,
														"name": "_setAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 358,
														"src": "5065:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 372,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5065:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 373,
												"nodeType": "ExpressionStatement",
												"src": "5065:19:2"
											}
										]
									},
									"documentation": {
										"id": 359,
										"nodeType": "StructuredDocumentation",
										"src": "4851:100:2",
										"text": " @dev Changes the admin of the proxy.\n Emits an {AdminChanged} event."
									},
									"id": 375,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_changeAdmin",
									"nameLocation": "4965:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 361,
												"mutability": "mutable",
												"name": "newAdmin",
												"nameLocation": "4986:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 375,
												"src": "4978:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 360,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4978:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4977:18:2"
									},
									"returnParameters": {
										"id": 363,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5005:0:2"
									},
									"scope": 510,
									"src": "4956:135:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 376,
										"nodeType": "StructuredDocumentation",
										"src": "5097:232:2",
										"text": " @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."
									},
									"id": 379,
									"mutability": "constant",
									"name": "_BEACON_SLOT",
									"nameLocation": "5360:12:2",
									"nodeType": "VariableDeclaration",
									"scope": 510,
									"src": "5334:107:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 377,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "5334:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307861336630616437346535343233616562666438306433656634333436353738333335613961373261656165653539666636636233353832623335313333643530",
										"id": 378,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "5375:66:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1",
											"typeString": "int_const 7415...(69 digits omitted)...4704"
										},
										"value": "0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50"
									},
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 380,
										"nodeType": "StructuredDocumentation",
										"src": "5448:60:2",
										"text": " @dev Emitted when the beacon is upgraded."
									},
									"eventSelector": "1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e",
									"id": 384,
									"name": "BeaconUpgraded",
									"nameLocation": "5519:14:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 383,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 382,
												"indexed": true,
												"mutability": "mutable",
												"name": "beacon",
												"nameLocation": "5550:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 384,
												"src": "5534:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 381,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5534:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5533:24:2"
									},
									"src": "5513:45:2"
								},
								{
									"body": {
										"id": 396,
										"nodeType": "Block",
										"src": "5674:81:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"id": 392,
																"name": "_BEACON_SLOT",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 379,
																"src": "5729:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"expression": {
																"id": 390,
																"name": "StorageSlotUpgradeable",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2695,
																"src": "5691:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_StorageSlotUpgradeable_$2695_$",
																	"typeString": "type(library StorageSlotUpgradeable)"
																}
															},
															"id": 391,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5714:14:2",
															"memberName": "getAddressSlot",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2661,
															"src": "5691:37:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2641_storage_ptr_$",
																"typeString": "function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"
															}
														},
														"id": 393,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5691:51:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_AddressSlot_$2641_storage_ptr",
															"typeString": "struct StorageSlotUpgradeable.AddressSlot storage pointer"
														}
													},
													"id": 394,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "5743:5:2",
													"memberName": "value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2640,
													"src": "5691:57:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 389,
												"id": 395,
												"nodeType": "Return",
												"src": "5684:64:2"
											}
										]
									},
									"documentation": {
										"id": 385,
										"nodeType": "StructuredDocumentation",
										"src": "5564:51:2",
										"text": " @dev Returns the current beacon."
									},
									"id": 397,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getBeacon",
									"nameLocation": "5629:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 386,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5639:2:2"
									},
									"returnParameters": {
										"id": 389,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "5665:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 387,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5665:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5664:9:2"
									},
									"scope": 510,
									"src": "5620:135:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 432,
										"nodeType": "Block",
										"src": "5884:368:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 406,
																	"name": "newBeacon",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 400,
																	"src": "5932:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 404,
																	"name": "AddressUpgradeable",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2363,
																	"src": "5902:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$2363_$",
																		"typeString": "type(library AddressUpgradeable)"
																	}
																},
																"id": 405,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5921:10:2",
																"memberName": "isContract",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2097,
																"src": "5902:29:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 407,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5902:40:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "455243313936373a206e657720626561636f6e206973206e6f74206120636f6e7472616374",
															"id": 408,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5944:39:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470",
																"typeString": "literal_string \"ERC1967: new beacon is not a contract\""
															},
															"value": "ERC1967: new beacon is not a contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470",
																"typeString": "literal_string \"ERC1967: new beacon is not a contract\""
															}
														],
														"id": 403,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5894:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 409,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5894:90:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 410,
												"nodeType": "ExpressionStatement",
												"src": "5894:90:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"expression": {
																			"arguments": [
																				{
																					"id": 415,
																					"name": "newBeacon",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 400,
																					"src": "6064:9:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 414,
																				"name": "IBeaconUpgradeable",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 520,
																				"src": "6045:18:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_IBeaconUpgradeable_$520_$",
																					"typeString": "type(contract IBeaconUpgradeable)"
																				}
																			},
																			"id": 416,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6045:29:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IBeaconUpgradeable_$520",
																				"typeString": "contract IBeaconUpgradeable"
																			}
																		},
																		"id": 417,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "6075:14:2",
																		"memberName": "implementation",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 519,
																		"src": "6045:44:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
																			"typeString": "function () view external returns (address)"
																		}
																	},
																	"id": 418,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6045:46:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 412,
																	"name": "AddressUpgradeable",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2363,
																	"src": "6015:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$2363_$",
																		"typeString": "type(library AddressUpgradeable)"
																	}
																},
																"id": 413,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6034:10:2",
																"memberName": "isContract",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2097,
																"src": "6015:29:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 419,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6015:77:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "455243313936373a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374",
															"id": 420,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6106:50:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8",
																"typeString": "literal_string \"ERC1967: beacon implementation is not a contract\""
															},
															"value": "ERC1967: beacon implementation is not a contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8",
																"typeString": "literal_string \"ERC1967: beacon implementation is not a contract\""
															}
														],
														"id": 411,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5994:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 421,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5994:172:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 422,
												"nodeType": "ExpressionStatement",
												"src": "5994:172:2"
											},
											{
												"expression": {
													"id": 430,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"arguments": [
																{
																	"id": 426,
																	"name": "_BEACON_SLOT",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 379,
																	"src": "6214:12:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 423,
																	"name": "StorageSlotUpgradeable",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2695,
																	"src": "6176:22:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_StorageSlotUpgradeable_$2695_$",
																		"typeString": "type(library StorageSlotUpgradeable)"
																	}
																},
																"id": 425,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6199:14:2",
																"memberName": "getAddressSlot",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2661,
																"src": "6176:37:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2641_storage_ptr_$",
																	"typeString": "function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"
																}
															},
															"id": 427,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6176:51:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressSlot_$2641_storage_ptr",
																"typeString": "struct StorageSlotUpgradeable.AddressSlot storage pointer"
															}
														},
														"id": 428,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6228:5:2",
														"memberName": "value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2640,
														"src": "6176:57:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 429,
														"name": "newBeacon",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 400,
														"src": "6236:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6176:69:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 431,
												"nodeType": "ExpressionStatement",
												"src": "6176:69:2"
											}
										]
									},
									"documentation": {
										"id": 398,
										"nodeType": "StructuredDocumentation",
										"src": "5761:71:2",
										"text": " @dev Stores a new beacon in the EIP1967 beacon slot."
									},
									"id": 433,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setBeacon",
									"nameLocation": "5846:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 401,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 400,
												"mutability": "mutable",
												"name": "newBeacon",
												"nameLocation": "5865:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 433,
												"src": "5857:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 399,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5857:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5856:19:2"
									},
									"returnParameters": {
										"id": 402,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5884:0:2"
									},
									"scope": 510,
									"src": "5837:415:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 468,
										"nodeType": "Block",
										"src": "6681:221:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 444,
															"name": "newBeacon",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 436,
															"src": "6702:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 443,
														"name": "_setBeacon",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 433,
														"src": "6691:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 445,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6691:21:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 446,
												"nodeType": "ExpressionStatement",
												"src": "6691:21:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 448,
															"name": "newBeacon",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 436,
															"src": "6742:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 447,
														"name": "BeaconUpgraded",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 384,
														"src": "6727:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 449,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6727:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 450,
												"nodeType": "EmitStatement",
												"src": "6722:30:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 456,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 454,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 451,
																"name": "data",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 438,
																"src": "6766:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 452,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6771:6:2",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "6766:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 453,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6780:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "6766:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"id": 455,
														"name": "forceCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 440,
														"src": "6785:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6766:28:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 467,
												"nodeType": "IfStatement",
												"src": "6762:134:2",
												"trueBody": {
													"id": 466,
													"nodeType": "Block",
													"src": "6796:100:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"expression": {
																				"arguments": [
																					{
																						"id": 459,
																						"name": "newBeacon",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 436,
																						"src": "6851:9:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"id": 458,
																					"name": "IBeaconUpgradeable",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 520,
																					"src": "6832:18:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_IBeaconUpgradeable_$520_$",
																						"typeString": "type(contract IBeaconUpgradeable)"
																					}
																				},
																				"id": 460,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "6832:29:2",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IBeaconUpgradeable_$520",
																					"typeString": "contract IBeaconUpgradeable"
																				}
																			},
																			"id": 461,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "6862:14:2",
																			"memberName": "implementation",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 519,
																			"src": "6832:44:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
																				"typeString": "function () view external returns (address)"
																			}
																		},
																		"id": 462,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6832:46:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 463,
																		"name": "data",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 438,
																		"src": "6880:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 457,
																	"name": "_functionDelegateCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 504,
																	"src": "6810:21:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function (address,bytes memory) returns (bytes memory)"
																	}
																},
																"id": 464,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6810:75:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 465,
															"nodeType": "ExpressionStatement",
															"src": "6810:75:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 434,
										"nodeType": "StructuredDocumentation",
										"src": "6258:292:2",
										"text": " @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n Emits a {BeaconUpgraded} event."
									},
									"id": 469,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_upgradeBeaconToAndCall",
									"nameLocation": "6564:23:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 441,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 436,
												"mutability": "mutable",
												"name": "newBeacon",
												"nameLocation": "6605:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "6597:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 435,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6597:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 438,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6637:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "6624:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 437,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6624:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 440,
												"mutability": "mutable",
												"name": "forceCall",
												"nameLocation": "6656:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "6651:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 439,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6651:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6587:84:2"
									},
									"returnParameters": {
										"id": 442,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6681:0:2"
									},
									"scope": 510,
									"src": "6555:347:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 503,
										"nodeType": "Block",
										"src": "7185:358:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 482,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 472,
																	"src": "7233:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 480,
																	"name": "AddressUpgradeable",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2363,
																	"src": "7203:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$2363_$",
																		"typeString": "type(library AddressUpgradeable)"
																	}
																},
																"id": 481,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7222:10:2",
																"memberName": "isContract",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2097,
																"src": "7203:29:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 483,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7203:37:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 484,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7242:40:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															},
															"value": "Address: delegate call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															}
														],
														"id": 479,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7195:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 485,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7195:88:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 486,
												"nodeType": "ExpressionStatement",
												"src": "7195:88:2"
											},
											{
												"assignments": [
													488,
													490
												],
												"declarations": [
													{
														"constant": false,
														"id": 488,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7359:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 503,
														"src": "7354:12:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 487,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7354:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 490,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7381:10:2",
														"nodeType": "VariableDeclaration",
														"scope": 503,
														"src": "7368:23:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 489,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7368:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 495,
												"initialValue": {
													"arguments": [
														{
															"id": 493,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 474,
															"src": "7415:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 491,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 472,
															"src": "7395:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 492,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7402:12:2",
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7395:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 494,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7395:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7353:67:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 498,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 488,
															"src": "7473:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 499,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 490,
															"src": "7482:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 500,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7494:41:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"expression": {
															"id": 496,
															"name": "AddressUpgradeable",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2363,
															"src": "7437:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$2363_$",
																"typeString": "type(library AddressUpgradeable)"
															}
														},
														"id": 497,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7456:16:2",
														"memberName": "verifyCallResult",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2342,
														"src": "7437:35:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 501,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7437:99:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 478,
												"id": 502,
												"nodeType": "Return",
												"src": "7430:106:2"
											}
										]
									},
									"documentation": {
										"id": 470,
										"nodeType": "StructuredDocumentation",
										"src": "6908:175:2",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 504,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_functionDelegateCall",
									"nameLocation": "7097:21:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 472,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7127:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 504,
												"src": "7119:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 471,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7119:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 474,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7148:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 504,
												"src": "7135:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 473,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7135:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7118:35:2"
									},
									"returnParameters": {
										"id": 478,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 504,
												"src": "7171:12:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 476,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7171:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7170:14:2"
									},
									"scope": 510,
									"src": "7088:455:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 505,
										"nodeType": "StructuredDocumentation",
										"src": "7549:254:2",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 509,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "7828:5:2",
									"nodeType": "VariableDeclaration",
									"scope": 510,
									"src": "7808:25:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 506,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "7808:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 508,
										"length": {
											"hexValue": "3530",
											"id": 507,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "7816:2:2",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "7808:11:2",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 511,
							"src": "610:7226:2",
							"usedErrors": []
						}
					],
					"src": "116:7721:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/proxy/beacon/IBeaconUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/beacon/IBeaconUpgradeable.sol",
					"exportedSymbols": {
						"IBeaconUpgradeable": [
							520
						]
					},
					"id": 521,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 512,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "93:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IBeaconUpgradeable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 513,
								"nodeType": "StructuredDocumentation",
								"src": "118:79:3",
								"text": " @dev This is the interface that {BeaconProxy} expects of its beacon."
							},
							"fullyImplemented": false,
							"id": 520,
							"linearizedBaseContracts": [
								520
							],
							"name": "IBeaconUpgradeable",
							"nameLocation": "208:18:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 514,
										"nodeType": "StructuredDocumentation",
										"src": "233:162:3",
										"text": " @dev Must return an address that can be used as a delegate call target.\n {BeaconProxy} will check that this address is a contract."
									},
									"functionSelector": "5c60da1b",
									"id": 519,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "implementation",
									"nameLocation": "409:14:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 515,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "423:2:3"
									},
									"returnParameters": {
										"id": 518,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 517,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 519,
												"src": "449:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 516,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "449:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "448:9:3"
									},
									"scope": 520,
									"src": "400:58:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 521,
							"src": "198:262:3",
							"usedErrors": []
						}
					],
					"src": "93:368:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2363
						],
						"Initializable": [
							689
						]
					},
					"id": 690,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 522,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol",
							"file": "../../utils/AddressUpgradeable.sol",
							"id": 523,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 690,
							"sourceUnit": 2364,
							"src": "138:44:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Initializable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 524,
								"nodeType": "StructuredDocumentation",
								"src": "184:2198:4",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 689,
							"linearizedBaseContracts": [
								689
							],
							"name": "Initializable",
							"nameLocation": "2401:13:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 525,
										"nodeType": "StructuredDocumentation",
										"src": "2421:109:4",
										"text": " @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"
									},
									"id": 527,
									"mutability": "mutable",
									"name": "_initialized",
									"nameLocation": "2549:12:4",
									"nodeType": "VariableDeclaration",
									"scope": 689,
									"src": "2535:26:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 526,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "2535:5:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 528,
										"nodeType": "StructuredDocumentation",
										"src": "2568:91:4",
										"text": " @dev Indicates that the contract is in the process of being initialized."
									},
									"id": 530,
									"mutability": "mutable",
									"name": "_initializing",
									"nameLocation": "2677:13:4",
									"nodeType": "VariableDeclaration",
									"scope": 689,
									"src": "2664:26:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 529,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "2664:4:4",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 531,
										"nodeType": "StructuredDocumentation",
										"src": "2697:90:4",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"eventSelector": "7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498",
									"id": 535,
									"name": "Initialized",
									"nameLocation": "2798:11:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 534,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 533,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "2816:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "2810:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 532,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2810:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2809:15:4"
									},
									"src": "2792:33:4"
								},
								{
									"body": {
										"id": 590,
										"nodeType": "Block",
										"src": "3258:483:4",
										"statements": [
											{
												"assignments": [
													539
												],
												"declarations": [
													{
														"constant": false,
														"id": 539,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "3273:14:4",
														"nodeType": "VariableDeclaration",
														"scope": 590,
														"src": "3268:19:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 538,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3268:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 542,
												"initialValue": {
													"id": 541,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3290:14:4",
													"subExpression": {
														"id": 540,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 530,
														"src": "3291:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3268:36:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 563,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 548,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 544,
																			"name": "isTopLevelCall",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 539,
																			"src": "3336:14:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 547,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 545,
																				"name": "_initialized",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 527,
																				"src": "3354:12:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 546,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3369:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3354:16:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3336:34:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 549,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3335:36:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 561,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 557,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "!",
																			"prefix": true,
																			"src": "3376:45:4",
																			"subExpression": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"id": 554,
																								"name": "this",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967268,
																								"src": "3415:4:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_contract$_Initializable_$689",
																									"typeString": "contract Initializable"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_contract$_Initializable_$689",
																									"typeString": "contract Initializable"
																								}
																							],
																							"id": 553,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "3407:7:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_address_$",
																								"typeString": "type(address)"
																							},
																							"typeName": {
																								"id": 552,
																								"name": "address",
																								"nodeType": "ElementaryTypeName",
																								"src": "3407:7:4",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 555,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3407:13:4",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"expression": {
																						"id": 550,
																						"name": "AddressUpgradeable",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2363,
																						"src": "3377:18:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$2363_$",
																							"typeString": "type(library AddressUpgradeable)"
																						}
																					},
																					"id": 551,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "3396:10:4",
																					"memberName": "isContract",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2097,
																					"src": "3377:29:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																						"typeString": "function (address) view returns (bool)"
																					}
																				},
																				"id": 556,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3377:44:4",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 560,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 558,
																				"name": "_initialized",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 527,
																				"src": "3425:12:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 559,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3441:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3425:17:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3376:66:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 562,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3375:68:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "3335:108:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 564,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3457:48:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 543,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3314:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 565,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3314:201:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 566,
												"nodeType": "ExpressionStatement",
												"src": "3314:201:4"
											},
											{
												"expression": {
													"id": 569,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 567,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 527,
														"src": "3525:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 568,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3540:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "3525:16:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 570,
												"nodeType": "ExpressionStatement",
												"src": "3525:16:4"
											},
											{
												"condition": {
													"id": 571,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 539,
													"src": "3555:14:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 577,
												"nodeType": "IfStatement",
												"src": "3551:65:4",
												"trueBody": {
													"id": 576,
													"nodeType": "Block",
													"src": "3571:45:4",
													"statements": [
														{
															"expression": {
																"id": 574,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 572,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 530,
																	"src": "3585:13:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 573,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3601:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "3585:20:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 575,
															"nodeType": "ExpressionStatement",
															"src": "3585:20:4"
														}
													]
												}
											},
											{
												"id": 578,
												"nodeType": "PlaceholderStatement",
												"src": "3625:1:4"
											},
											{
												"condition": {
													"id": 579,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 539,
													"src": "3640:14:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 589,
												"nodeType": "IfStatement",
												"src": "3636:99:4",
												"trueBody": {
													"id": 588,
													"nodeType": "Block",
													"src": "3656:79:4",
													"statements": [
														{
															"expression": {
																"id": 582,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 580,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 530,
																	"src": "3670:13:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 581,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3686:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "3670:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 583,
															"nodeType": "ExpressionStatement",
															"src": "3670:21:4"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 585,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3722:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 584,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 535,
																	"src": "3710:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 586,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3710:14:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 587,
															"nodeType": "EmitStatement",
															"src": "3705:19:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 536,
										"nodeType": "StructuredDocumentation",
										"src": "2831:399:4",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."
									},
									"id": 591,
									"name": "initializer",
									"nameLocation": "3244:11:4",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 537,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3255:2:4"
									},
									"src": "3235:506:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 623,
										"nodeType": "Block",
										"src": "4852:255:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 602,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 598,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "4870:14:4",
																"subExpression": {
																	"id": 597,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 530,
																	"src": "4871:13:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"id": 601,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 599,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 527,
																	"src": "4888:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 600,
																	"name": "version",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 594,
																	"src": "4903:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "4888:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4870:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 603,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4912:48:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 596,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4862:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 604,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4862:99:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 605,
												"nodeType": "ExpressionStatement",
												"src": "4862:99:4"
											},
											{
												"expression": {
													"id": 608,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 606,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 527,
														"src": "4971:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 607,
														"name": "version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 594,
														"src": "4986:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "4971:22:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 609,
												"nodeType": "ExpressionStatement",
												"src": "4971:22:4"
											},
											{
												"expression": {
													"id": 612,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 610,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 530,
														"src": "5003:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 611,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5019:4:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "5003:20:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 613,
												"nodeType": "ExpressionStatement",
												"src": "5003:20:4"
											},
											{
												"id": 614,
												"nodeType": "PlaceholderStatement",
												"src": "5033:1:4"
											},
											{
												"expression": {
													"id": 617,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 615,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 530,
														"src": "5044:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 616,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5060:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "5044:21:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 618,
												"nodeType": "ExpressionStatement",
												"src": "5044:21:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 620,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 594,
															"src": "5092:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 619,
														"name": "Initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 535,
														"src": "5080:11:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
															"typeString": "function (uint8)"
														}
													},
													"id": 621,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5080:20:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 622,
												"nodeType": "EmitStatement",
												"src": "5075:25:4"
											}
										]
									},
									"documentation": {
										"id": 592,
										"nodeType": "StructuredDocumentation",
										"src": "3747:1062:4",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."
									},
									"id": 624,
									"name": "reinitializer",
									"nameLocation": "4823:13:4",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 594,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "4843:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 624,
												"src": "4837:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 593,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4837:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4836:15:4"
									},
									"src": "4814:293:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 633,
										"nodeType": "Block",
										"src": "5345:97:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 628,
															"name": "_initializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 530,
															"src": "5363:13:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67",
															"id": 629,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5378:45:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															},
															"value": "Initializable: contract is not initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															}
														],
														"id": 627,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5355:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 630,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5355:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 631,
												"nodeType": "ExpressionStatement",
												"src": "5355:69:4"
											},
											{
												"id": 632,
												"nodeType": "PlaceholderStatement",
												"src": "5434:1:4"
											}
										]
									},
									"documentation": {
										"id": 625,
										"nodeType": "StructuredDocumentation",
										"src": "5113:199:4",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 634,
									"name": "onlyInitializing",
									"nameLocation": "5326:16:4",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 626,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5342:2:4"
									},
									"src": "5317:125:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 669,
										"nodeType": "Block",
										"src": "5977:230:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 640,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "5995:14:4",
															"subExpression": {
																"id": 639,
																"name": "_initializing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 530,
																"src": "5996:13:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67",
															"id": 641,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6011:41:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a",
																"typeString": "literal_string \"Initializable: contract is initializing\""
															},
															"value": "Initializable: contract is initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a",
																"typeString": "literal_string \"Initializable: contract is initializing\""
															}
														],
														"id": 638,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5987:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 642,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5987:66:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 643,
												"nodeType": "ExpressionStatement",
												"src": "5987:66:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 650,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 644,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 527,
														"src": "6067:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 647,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "6087:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint8_$",
																		"typeString": "type(uint8)"
																	},
																	"typeName": {
																		"id": 646,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "6087:5:4",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint8_$",
																		"typeString": "type(uint8)"
																	}
																],
																"id": 645,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "6082:4:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 648,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6082:11:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint8",
																"typeString": "type(uint8)"
															}
														},
														"id": 649,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "6094:3:4",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "6082:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "6067:30:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 668,
												"nodeType": "IfStatement",
												"src": "6063:138:4",
												"trueBody": {
													"id": 667,
													"nodeType": "Block",
													"src": "6099:102:4",
													"statements": [
														{
															"expression": {
																"id": 657,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 651,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 527,
																	"src": "6113:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 654,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6133:5:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 653,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "6133:5:4",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				}
																			],
																			"id": 652,
																			"name": "type",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967269,
																			"src": "6128:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 655,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6128:11:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_meta_type_t_uint8",
																			"typeString": "type(uint8)"
																		}
																	},
																	"id": 656,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "6140:3:4",
																	"memberName": "max",
																	"nodeType": "MemberAccess",
																	"src": "6128:15:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "6113:30:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 658,
															"nodeType": "ExpressionStatement",
															"src": "6113:30:4"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 662,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "6179:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint8_$",
																						"typeString": "type(uint8)"
																					},
																					"typeName": {
																						"id": 661,
																						"name": "uint8",
																						"nodeType": "ElementaryTypeName",
																						"src": "6179:5:4",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_type$_t_uint8_$",
																						"typeString": "type(uint8)"
																					}
																				],
																				"id": 660,
																				"name": "type",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967269,
																				"src": "6174:4:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 663,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6174:11:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_meta_type_t_uint8",
																				"typeString": "type(uint8)"
																			}
																		},
																		"id": 664,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6186:3:4",
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"src": "6174:15:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	],
																	"id": 659,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 535,
																	"src": "6162:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 665,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6162:28:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 666,
															"nodeType": "EmitStatement",
															"src": "6157:33:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 635,
										"nodeType": "StructuredDocumentation",
										"src": "5448:475:4",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."
									},
									"id": 670,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "5937:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 636,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5957:2:4"
									},
									"returnParameters": {
										"id": 637,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5977:0:4"
									},
									"scope": 689,
									"src": "5928:279:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 678,
										"nodeType": "Block",
										"src": "6384:36:4",
										"statements": [
											{
												"expression": {
													"id": 676,
													"name": "_initialized",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 527,
													"src": "6401:12:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 675,
												"id": 677,
												"nodeType": "Return",
												"src": "6394:19:4"
											}
										]
									},
									"documentation": {
										"id": 671,
										"nodeType": "StructuredDocumentation",
										"src": "6213:102:4",
										"text": " @dev Internal function that returns the initialized version. Returns `_initialized`"
									},
									"id": 679,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializedVersion",
									"nameLocation": "6329:22:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 672,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6351:2:4"
									},
									"returnParameters": {
										"id": 675,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 674,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 679,
												"src": "6377:5:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 673,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6377:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6376:7:4"
									},
									"scope": 689,
									"src": "6320:100:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 687,
										"nodeType": "Block",
										"src": "6590:37:4",
										"statements": [
											{
												"expression": {
													"id": 685,
													"name": "_initializing",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 530,
													"src": "6607:13:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 684,
												"id": 686,
												"nodeType": "Return",
												"src": "6600:20:4"
											}
										]
									},
									"documentation": {
										"id": 680,
										"nodeType": "StructuredDocumentation",
										"src": "6426:103:4",
										"text": " @dev Internal function that returns the initialized version. Returns `_initializing`"
									},
									"id": 688,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isInitializing",
									"nameLocation": "6543:15:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 681,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6558:2:4"
									},
									"returnParameters": {
										"id": 684,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 683,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 688,
												"src": "6584:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 682,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6584:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6583:6:4"
									},
									"scope": 689,
									"src": "6534:93:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 690,
							"src": "2383:4246:4",
							"usedErrors": []
						}
					],
					"src": "113:6517:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2363
						],
						"ERC1967UpgradeUpgradeable": [
							510
						],
						"IBeaconUpgradeable": [
							520
						],
						"IERC1822ProxiableUpgradeable": [
							141
						],
						"Initializable": [
							689
						],
						"StorageSlotUpgradeable": [
							2695
						],
						"UUPSUpgradeable": [
							825
						]
					},
					"id": 826,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 691,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "115:23:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/interfaces/draft-IERC1822Upgradeable.sol",
							"file": "../../interfaces/draft-IERC1822Upgradeable.sol",
							"id": 692,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 826,
							"sourceUnit": 142,
							"src": "140:56:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol",
							"file": "../ERC1967/ERC1967UpgradeUpgradeable.sol",
							"id": 693,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 826,
							"sourceUnit": 511,
							"src": "197:50:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol",
							"file": "./Initializable.sol",
							"id": 694,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 826,
							"sourceUnit": 690,
							"src": "248:29:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 696,
										"name": "Initializable",
										"nameLocations": [
											"965:13:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 689,
										"src": "965:13:5"
									},
									"id": 697,
									"nodeType": "InheritanceSpecifier",
									"src": "965:13:5"
								},
								{
									"baseName": {
										"id": 698,
										"name": "IERC1822ProxiableUpgradeable",
										"nameLocations": [
											"980:28:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 141,
										"src": "980:28:5"
									},
									"id": 699,
									"nodeType": "InheritanceSpecifier",
									"src": "980:28:5"
								},
								{
									"baseName": {
										"id": 700,
										"name": "ERC1967UpgradeUpgradeable",
										"nameLocations": [
											"1010:25:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 510,
										"src": "1010:25:5"
									},
									"id": 701,
									"nodeType": "InheritanceSpecifier",
									"src": "1010:25:5"
								}
							],
							"canonicalName": "UUPSUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 695,
								"nodeType": "StructuredDocumentation",
								"src": "279:648:5",
								"text": " @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n `UUPSUpgradeable` with a custom implementation of upgrades.\n The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 825,
							"linearizedBaseContracts": [
								825,
								510,
								141,
								689
							],
							"name": "UUPSUpgradeable",
							"nameLocation": "946:15:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 706,
										"nodeType": "Block",
										"src": "1102:7:5",
										"statements": []
									},
									"id": 707,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 704,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 703,
												"name": "onlyInitializing",
												"nameLocations": [
													"1085:16:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 634,
												"src": "1085:16:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "1085:16:5"
										}
									],
									"name": "__UUPSUpgradeable_init",
									"nameLocation": "1051:22:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 702,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1073:2:5"
									},
									"returnParameters": {
										"id": 705,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1102:0:5"
									},
									"scope": 825,
									"src": "1042:67:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 712,
										"nodeType": "Block",
										"src": "1185:7:5",
										"statements": []
									},
									"id": 713,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 710,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 709,
												"name": "onlyInitializing",
												"nameLocations": [
													"1168:16:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 634,
												"src": "1168:16:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "1168:16:5"
										}
									],
									"name": "__UUPSUpgradeable_init_unchained",
									"nameLocation": "1124:32:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 708,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1156:2:5"
									},
									"returnParameters": {
										"id": 711,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1185:0:5"
									},
									"scope": 825,
									"src": "1115:77:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 714,
										"nodeType": "StructuredDocumentation",
										"src": "1197:87:5",
										"text": "@custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment"
									},
									"id": 720,
									"mutability": "immutable",
									"name": "__self",
									"nameLocation": "1315:6:5",
									"nodeType": "VariableDeclaration",
									"scope": 825,
									"src": "1289:48:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 715,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1289:7:5",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"arguments": [
											{
												"id": 718,
												"name": "this",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 4294967268,
												"src": "1332:4:5",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_UUPSUpgradeable_$825",
													"typeString": "contract UUPSUpgradeable"
												}
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_contract$_UUPSUpgradeable_$825",
													"typeString": "contract UUPSUpgradeable"
												}
											],
											"id": 717,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "ElementaryTypeNameExpression",
											"src": "1324:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_type$_t_address_$",
												"typeString": "type(address)"
											},
											"typeName": {
												"id": 716,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1324:7:5",
												"typeDescriptions": {}
											}
										},
										"id": 719,
										"isConstant": false,
										"isLValue": false,
										"isPure": false,
										"kind": "typeConversion",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1324:13:5",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 742,
										"nodeType": "Block",
										"src": "1863:205:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 729,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 726,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "1889:4:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_UUPSUpgradeable_$825",
																			"typeString": "contract UUPSUpgradeable"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_UUPSUpgradeable_$825",
																			"typeString": "contract UUPSUpgradeable"
																		}
																	],
																	"id": 725,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1881:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 724,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1881:7:5",
																		"typeDescriptions": {}
																	}
																},
																"id": 727,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1881:13:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 728,
																"name": "__self",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 720,
																"src": "1898:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1881:23:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682064656c656761746563616c6c",
															"id": 730,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1906:46:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb",
																"typeString": "literal_string \"Function must be called through delegatecall\""
															},
															"value": "Function must be called through delegatecall"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_36e108fa7a809b52ab1951dd91c117a7bc9ac5250bdf1aa162d4e104f7edf9eb",
																"typeString": "literal_string \"Function must be called through delegatecall\""
															}
														],
														"id": 723,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1873:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 731,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1873:80:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 732,
												"nodeType": "ExpressionStatement",
												"src": "1873:80:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 737,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 734,
																	"name": "_getImplementation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 188,
																	"src": "1971:18:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 735,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1971:20:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 736,
																"name": "__self",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 720,
																"src": "1995:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1971:30:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "46756e6374696f6e206d7573742062652063616c6c6564207468726f756768206163746976652070726f7879",
															"id": 738,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2003:46:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434",
																"typeString": "literal_string \"Function must be called through active proxy\""
															},
															"value": "Function must be called through active proxy"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_52f1ead4d9653e13afbd2e90ef2587c30187cd50b2e97d784e3f7a7541247434",
																"typeString": "literal_string \"Function must be called through active proxy\""
															}
														],
														"id": 733,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1963:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 739,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1963:87:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 740,
												"nodeType": "ExpressionStatement",
												"src": "1963:87:5"
											},
											{
												"id": 741,
												"nodeType": "PlaceholderStatement",
												"src": "2060:1:5"
											}
										]
									},
									"documentation": {
										"id": 721,
										"nodeType": "StructuredDocumentation",
										"src": "1344:493:5",
										"text": " @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n fail."
									},
									"id": 743,
									"name": "onlyProxy",
									"nameLocation": "1851:9:5",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 722,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1860:2:5"
									},
									"src": "1842:226:5",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 757,
										"nodeType": "Block",
										"src": "2298:120:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 752,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 749,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2324:4:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_UUPSUpgradeable_$825",
																			"typeString": "contract UUPSUpgradeable"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_UUPSUpgradeable_$825",
																			"typeString": "contract UUPSUpgradeable"
																		}
																	],
																	"id": 748,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2316:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 747,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2316:7:5",
																		"typeDescriptions": {}
																	}
																},
																"id": 750,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2316:13:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 751,
																"name": "__self",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 720,
																"src": "2333:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2316:23:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "555550535570677261646561626c653a206d757374206e6f742062652063616c6c6564207468726f7567682064656c656761746563616c6c",
															"id": 753,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2341:58:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4",
																"typeString": "literal_string \"UUPSUpgradeable: must not be called through delegatecall\""
															},
															"value": "UUPSUpgradeable: must not be called through delegatecall"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_67f0151b4ad1dcfa0e3302a0cd6019f51582ef1807b37dceb00bd852a514f7f4",
																"typeString": "literal_string \"UUPSUpgradeable: must not be called through delegatecall\""
															}
														],
														"id": 746,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2308:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 754,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2308:92:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 755,
												"nodeType": "ExpressionStatement",
												"src": "2308:92:5"
											},
											{
												"id": 756,
												"nodeType": "PlaceholderStatement",
												"src": "2410:1:5"
											}
										]
									},
									"documentation": {
										"id": 744,
										"nodeType": "StructuredDocumentation",
										"src": "2074:195:5",
										"text": " @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n callable on the implementing contract but not through proxies."
									},
									"id": 758,
									"name": "notDelegated",
									"nameLocation": "2283:12:5",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 745,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2295:2:5"
									},
									"src": "2274:144:5",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										140
									],
									"body": {
										"id": 769,
										"nodeType": "Block",
										"src": "3093:44:5",
										"statements": [
											{
												"expression": {
													"id": 767,
													"name": "_IMPLEMENTATION_SLOT",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 170,
													"src": "3110:20:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 766,
												"id": 768,
												"nodeType": "Return",
												"src": "3103:27:5"
											}
										]
									},
									"documentation": {
										"id": 759,
										"nodeType": "StructuredDocumentation",
										"src": "2424:577:5",
										"text": " @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
									},
									"functionSelector": "52d1902d",
									"id": 770,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 763,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 762,
												"name": "notDelegated",
												"nameLocations": [
													"3062:12:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 758,
												"src": "3062:12:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "3062:12:5"
										}
									],
									"name": "proxiableUUID",
									"nameLocation": "3015:13:5",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 761,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3053:8:5"
									},
									"parameters": {
										"id": 760,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3028:2:5"
									},
									"returnParameters": {
										"id": 766,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 765,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 770,
												"src": "3084:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 764,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3084:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3083:9:5"
									},
									"scope": 825,
									"src": "3006:131:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"body": {
										"id": 791,
										"nodeType": "Block",
										"src": "3390:124:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 779,
															"name": "newImplementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 773,
															"src": "3418:17:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 778,
														"name": "_authorizeUpgrade",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 819,
														"src": "3400:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 780,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3400:36:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 781,
												"nodeType": "ExpressionStatement",
												"src": "3400:36:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 783,
															"name": "newImplementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 773,
															"src": "3468:17:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 786,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3497:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 785,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "3487:9:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (bytes memory)"
																},
																"typeName": {
																	"id": 784,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "3491:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes"
																	}
																}
															},
															"id": 787,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3487:12:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "66616c7365",
															"id": 788,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3501:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "false"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 782,
														"name": "_upgradeToAndCallUUPS",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 308,
														"src": "3446:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$",
															"typeString": "function (address,bytes memory,bool)"
														}
													},
													"id": 789,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3446:61:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 790,
												"nodeType": "ExpressionStatement",
												"src": "3446:61:5"
											}
										]
									},
									"documentation": {
										"id": 771,
										"nodeType": "StructuredDocumentation",
										"src": "3143:169:5",
										"text": " @dev Upgrade the implementation of the proxy to `newImplementation`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event."
									},
									"functionSelector": "3659cfe6",
									"id": 792,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 776,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 775,
												"name": "onlyProxy",
												"nameLocations": [
													"3380:9:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 743,
												"src": "3380:9:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "3380:9:5"
										}
									],
									"name": "upgradeTo",
									"nameLocation": "3326:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 774,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 773,
												"mutability": "mutable",
												"name": "newImplementation",
												"nameLocation": "3344:17:5",
												"nodeType": "VariableDeclaration",
												"scope": 792,
												"src": "3336:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 772,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3336:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3335:27:5"
									},
									"returnParameters": {
										"id": 777,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3390:0:5"
									},
									"scope": 825,
									"src": "3317:197:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"body": {
										"id": 812,
										"nodeType": "Block",
										"src": "3870:115:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 803,
															"name": "newImplementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 795,
															"src": "3898:17:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 802,
														"name": "_authorizeUpgrade",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 819,
														"src": "3880:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 804,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3880:36:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 805,
												"nodeType": "ExpressionStatement",
												"src": "3880:36:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 807,
															"name": "newImplementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 795,
															"src": "3948:17:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 808,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 797,
															"src": "3967:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "74727565",
															"id": 809,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3973:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 806,
														"name": "_upgradeToAndCallUUPS",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 308,
														"src": "3926:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$",
															"typeString": "function (address,bytes memory,bool)"
														}
													},
													"id": 810,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3926:52:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 811,
												"nodeType": "ExpressionStatement",
												"src": "3926:52:5"
											}
										]
									},
									"documentation": {
										"id": 793,
										"nodeType": "StructuredDocumentation",
										"src": "3520:238:5",
										"text": " @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n encoded in `data`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event."
									},
									"functionSelector": "4f1ef286",
									"id": 813,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 800,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 799,
												"name": "onlyProxy",
												"nameLocations": [
													"3860:9:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 743,
												"src": "3860:9:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "3860:9:5"
										}
									],
									"name": "upgradeToAndCall",
									"nameLocation": "3772:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 798,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 795,
												"mutability": "mutable",
												"name": "newImplementation",
												"nameLocation": "3797:17:5",
												"nodeType": "VariableDeclaration",
												"scope": 813,
												"src": "3789:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 794,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3789:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 797,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3829:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 813,
												"src": "3816:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 796,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3816:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3788:46:5"
									},
									"returnParameters": {
										"id": 801,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3870:0:5"
									},
									"scope": 825,
									"src": "3763:222:5",
									"stateMutability": "payable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 814,
										"nodeType": "StructuredDocumentation",
										"src": "3991:397:5",
										"text": " @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n {upgradeTo} and {upgradeToAndCall}.\n Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n ```solidity\n function _authorizeUpgrade(address) internal override onlyOwner {}\n ```"
									},
									"id": 819,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "_authorizeUpgrade",
									"nameLocation": "4402:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 817,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 816,
												"mutability": "mutable",
												"name": "newImplementation",
												"nameLocation": "4428:17:5",
												"nodeType": "VariableDeclaration",
												"scope": 819,
												"src": "4420:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 815,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4420:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4419:27:5"
									},
									"returnParameters": {
										"id": 818,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4463:0:5"
									},
									"scope": 825,
									"src": "4393:71:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 820,
										"nodeType": "StructuredDocumentation",
										"src": "4470:254:5",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 824,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "4749:5:5",
									"nodeType": "VariableDeclaration",
									"scope": 825,
									"src": "4729:25:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 821,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "4729:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 823,
										"length": {
											"hexValue": "3530",
											"id": 822,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "4737:2:5",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "4729:11:5",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 826,
							"src": "928:3829:5",
							"usedErrors": []
						}
					],
					"src": "115:4643:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2363
						],
						"ContextUpgradeable": [
							2561
						],
						"Initializable": [
							689
						],
						"PausableUpgradeable": [
							952
						]
					},
					"id": 953,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 827,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 828,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 953,
							"sourceUnit": 2562,
							"src": "130:41:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 829,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 953,
							"sourceUnit": 690,
							"src": "172:42:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 831,
										"name": "Initializable",
										"nameLocations": [
											"697:13:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 689,
										"src": "697:13:6"
									},
									"id": 832,
									"nodeType": "InheritanceSpecifier",
									"src": "697:13:6"
								},
								{
									"baseName": {
										"id": 833,
										"name": "ContextUpgradeable",
										"nameLocations": [
											"712:18:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2561,
										"src": "712:18:6"
									},
									"id": 834,
									"nodeType": "InheritanceSpecifier",
									"src": "712:18:6"
								}
							],
							"canonicalName": "PausableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 830,
								"nodeType": "StructuredDocumentation",
								"src": "216:439:6",
								"text": " @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."
							},
							"fullyImplemented": true,
							"id": 952,
							"linearizedBaseContracts": [
								952,
								2561,
								689
							],
							"name": "PausableUpgradeable",
							"nameLocation": "674:19:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 835,
										"nodeType": "StructuredDocumentation",
										"src": "737:73:6",
										"text": " @dev Emitted when the pause is triggered by `account`."
									},
									"eventSelector": "62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258",
									"id": 839,
									"name": "Paused",
									"nameLocation": "821:6:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 838,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 837,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "836:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 839,
												"src": "828:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 836,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "828:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "827:17:6"
									},
									"src": "815:30:6"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 840,
										"nodeType": "StructuredDocumentation",
										"src": "851:70:6",
										"text": " @dev Emitted when the pause is lifted by `account`."
									},
									"eventSelector": "5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa",
									"id": 844,
									"name": "Unpaused",
									"nameLocation": "932:8:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 843,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 842,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "949:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "941:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 841,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "941:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "940:17:6"
									},
									"src": "926:32:6"
								},
								{
									"constant": false,
									"id": 846,
									"mutability": "mutable",
									"name": "_paused",
									"nameLocation": "977:7:6",
									"nodeType": "VariableDeclaration",
									"scope": 952,
									"src": "964:20:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 845,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "964:4:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 855,
										"nodeType": "Block",
										"src": "1116:44:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 852,
														"name": "__Pausable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 866,
														"src": "1126:25:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 853,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1126:27:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 854,
												"nodeType": "ExpressionStatement",
												"src": "1126:27:6"
											}
										]
									},
									"documentation": {
										"id": 847,
										"nodeType": "StructuredDocumentation",
										"src": "991:67:6",
										"text": " @dev Initializes the contract in unpaused state."
									},
									"id": 856,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 850,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 849,
												"name": "onlyInitializing",
												"nameLocations": [
													"1099:16:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 634,
												"src": "1099:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "1099:16:6"
										}
									],
									"name": "__Pausable_init",
									"nameLocation": "1072:15:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 848,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1087:2:6"
									},
									"returnParameters": {
										"id": 851,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1116:0:6"
									},
									"scope": 952,
									"src": "1063:97:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 865,
										"nodeType": "Block",
										"src": "1229:32:6",
										"statements": [
											{
												"expression": {
													"id": 863,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 861,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 846,
														"src": "1239:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 862,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1249:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "1239:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 864,
												"nodeType": "ExpressionStatement",
												"src": "1239:15:6"
											}
										]
									},
									"id": 866,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 859,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 858,
												"name": "onlyInitializing",
												"nameLocations": [
													"1212:16:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 634,
												"src": "1212:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "1212:16:6"
										}
									],
									"name": "__Pausable_init_unchained",
									"nameLocation": "1175:25:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 857,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1200:2:6"
									},
									"returnParameters": {
										"id": 860,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1229:0:6"
									},
									"scope": 952,
									"src": "1166:95:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 873,
										"nodeType": "Block",
										"src": "1472:47:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 869,
														"name": "_requireNotPaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 903,
														"src": "1482:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 870,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1482:19:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 871,
												"nodeType": "ExpressionStatement",
												"src": "1482:19:6"
											},
											{
												"id": 872,
												"nodeType": "PlaceholderStatement",
												"src": "1511:1:6"
											}
										]
									},
									"documentation": {
										"id": 867,
										"nodeType": "StructuredDocumentation",
										"src": "1267:175:6",
										"text": " @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."
									},
									"id": 874,
									"name": "whenNotPaused",
									"nameLocation": "1456:13:6",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 868,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1469:2:6"
									},
									"src": "1447:72:6",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 881,
										"nodeType": "Block",
										"src": "1719:44:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 877,
														"name": "_requirePaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 914,
														"src": "1729:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 878,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1729:16:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 879,
												"nodeType": "ExpressionStatement",
												"src": "1729:16:6"
											},
											{
												"id": 880,
												"nodeType": "PlaceholderStatement",
												"src": "1755:1:6"
											}
										]
									},
									"documentation": {
										"id": 875,
										"nodeType": "StructuredDocumentation",
										"src": "1525:167:6",
										"text": " @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."
									},
									"id": 882,
									"name": "whenPaused",
									"nameLocation": "1706:10:6",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 876,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1716:2:6"
									},
									"src": "1697:66:6",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 890,
										"nodeType": "Block",
										"src": "1911:31:6",
										"statements": [
											{
												"expression": {
													"id": 888,
													"name": "_paused",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 846,
													"src": "1928:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 887,
												"id": 889,
												"nodeType": "Return",
												"src": "1921:14:6"
											}
										]
									},
									"documentation": {
										"id": 883,
										"nodeType": "StructuredDocumentation",
										"src": "1769:84:6",
										"text": " @dev Returns true if the contract is paused, and false otherwise."
									},
									"functionSelector": "5c975abb",
									"id": 891,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "paused",
									"nameLocation": "1867:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 884,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1873:2:6"
									},
									"returnParameters": {
										"id": 887,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 886,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 891,
												"src": "1905:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 885,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1905:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1904:6:6"
									},
									"scope": 952,
									"src": "1858:84:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 902,
										"nodeType": "Block",
										"src": "2061:55:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 898,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "2079:9:6",
															"subExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 896,
																	"name": "paused",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 891,
																	"src": "2080:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																		"typeString": "function () view returns (bool)"
																	}
																},
																"id": 897,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2080:8:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5061757361626c653a20706175736564",
															"id": 899,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2090:18:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a",
																"typeString": "literal_string \"Pausable: paused\""
															},
															"value": "Pausable: paused"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a",
																"typeString": "literal_string \"Pausable: paused\""
															}
														],
														"id": 895,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2071:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 900,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2071:38:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 901,
												"nodeType": "ExpressionStatement",
												"src": "2071:38:6"
											}
										]
									},
									"documentation": {
										"id": 892,
										"nodeType": "StructuredDocumentation",
										"src": "1948:57:6",
										"text": " @dev Throws if the contract is paused."
									},
									"id": 903,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requireNotPaused",
									"nameLocation": "2019:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 893,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2036:2:6"
									},
									"returnParameters": {
										"id": 894,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2061:0:6"
									},
									"scope": 952,
									"src": "2010:106:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 913,
										"nodeType": "Block",
										"src": "2236:58:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 908,
																"name": "paused",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 891,
																"src": "2254:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																	"typeString": "function () view returns (bool)"
																}
															},
															"id": 909,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2254:8:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5061757361626c653a206e6f7420706175736564",
															"id": 910,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2264:22:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a",
																"typeString": "literal_string \"Pausable: not paused\""
															},
															"value": "Pausable: not paused"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a",
																"typeString": "literal_string \"Pausable: not paused\""
															}
														],
														"id": 907,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2246:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 911,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2246:41:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 912,
												"nodeType": "ExpressionStatement",
												"src": "2246:41:6"
											}
										]
									},
									"documentation": {
										"id": 904,
										"nodeType": "StructuredDocumentation",
										"src": "2122:61:6",
										"text": " @dev Throws if the contract is not paused."
									},
									"id": 914,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requirePaused",
									"nameLocation": "2197:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 905,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2211:2:6"
									},
									"returnParameters": {
										"id": 906,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2236:0:6"
									},
									"scope": 952,
									"src": "2188:106:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 929,
										"nodeType": "Block",
										"src": "2478:66:6",
										"statements": [
											{
												"expression": {
													"id": 922,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 920,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 846,
														"src": "2488:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 921,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2498:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "2488:14:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 923,
												"nodeType": "ExpressionStatement",
												"src": "2488:14:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 925,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2546,
																"src": "2524:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 926,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2524:12:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 924,
														"name": "Paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 839,
														"src": "2517:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 927,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2517:20:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 928,
												"nodeType": "EmitStatement",
												"src": "2512:25:6"
											}
										]
									},
									"documentation": {
										"id": 915,
										"nodeType": "StructuredDocumentation",
										"src": "2300:124:6",
										"text": " @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."
									},
									"id": 930,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 918,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 917,
												"name": "whenNotPaused",
												"nameLocations": [
													"2464:13:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 874,
												"src": "2464:13:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "2464:13:6"
										}
									],
									"name": "_pause",
									"nameLocation": "2438:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 916,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2444:2:6"
									},
									"returnParameters": {
										"id": 919,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2478:0:6"
									},
									"scope": 952,
									"src": "2429:115:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 945,
										"nodeType": "Block",
										"src": "2724:69:6",
										"statements": [
											{
												"expression": {
													"id": 938,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 936,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 846,
														"src": "2734:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 937,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2744:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "2734:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 939,
												"nodeType": "ExpressionStatement",
												"src": "2734:15:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 941,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2546,
																"src": "2773:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 942,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2773:12:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 940,
														"name": "Unpaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 844,
														"src": "2764:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 943,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2764:22:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 944,
												"nodeType": "EmitStatement",
												"src": "2759:27:6"
											}
										]
									},
									"documentation": {
										"id": 931,
										"nodeType": "StructuredDocumentation",
										"src": "2550:121:6",
										"text": " @dev Returns to normal state.\n Requirements:\n - The contract must be paused."
									},
									"id": 946,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 934,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 933,
												"name": "whenPaused",
												"nameLocations": [
													"2713:10:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 882,
												"src": "2713:10:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "2713:10:6"
										}
									],
									"name": "_unpause",
									"nameLocation": "2685:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2693:2:6"
									},
									"returnParameters": {
										"id": 935,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2724:0:6"
									},
									"scope": 952,
									"src": "2676:117:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 947,
										"nodeType": "StructuredDocumentation",
										"src": "2799:254:6",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 951,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "3078:5:6",
									"nodeType": "VariableDeclaration",
									"scope": 952,
									"src": "3058:25:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 948,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "3058:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 950,
										"length": {
											"hexValue": "3439",
											"id": 949,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "3066:2:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "3058:11:6",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 953,
							"src": "656:2430:6",
							"usedErrors": []
						}
					],
					"src": "105:2982:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2363
						],
						"ContextUpgradeable": [
							2561
						],
						"ERC20Upgradeable": [
							1564
						],
						"IERC20MetadataUpgradeable": [
							2079
						],
						"IERC20Upgradeable": [
							1642
						],
						"Initializable": [
							689
						]
					},
					"id": 1565,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 954,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/IERC20Upgradeable.sol",
							"file": "./IERC20Upgradeable.sol",
							"id": 955,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1565,
							"sourceUnit": 1643,
							"src": "130:33:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
							"file": "./extensions/IERC20MetadataUpgradeable.sol",
							"id": 956,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1565,
							"sourceUnit": 2080,
							"src": "164:52:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol",
							"file": "../../utils/ContextUpgradeable.sol",
							"id": 957,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1565,
							"sourceUnit": 2562,
							"src": "217:44:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol",
							"file": "../../proxy/utils/Initializable.sol",
							"id": 958,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1565,
							"sourceUnit": 690,
							"src": "262:45:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 960,
										"name": "Initializable",
										"nameLocations": [
											"1509:13:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 689,
										"src": "1509:13:7"
									},
									"id": 961,
									"nodeType": "InheritanceSpecifier",
									"src": "1509:13:7"
								},
								{
									"baseName": {
										"id": 962,
										"name": "ContextUpgradeable",
										"nameLocations": [
											"1524:18:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2561,
										"src": "1524:18:7"
									},
									"id": 963,
									"nodeType": "InheritanceSpecifier",
									"src": "1524:18:7"
								},
								{
									"baseName": {
										"id": 964,
										"name": "IERC20Upgradeable",
										"nameLocations": [
											"1544:17:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1642,
										"src": "1544:17:7"
									},
									"id": 965,
									"nodeType": "InheritanceSpecifier",
									"src": "1544:17:7"
								},
								{
									"baseName": {
										"id": 966,
										"name": "IERC20MetadataUpgradeable",
										"nameLocations": [
											"1563:25:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2079,
										"src": "1563:25:7"
									},
									"id": 967,
									"nodeType": "InheritanceSpecifier",
									"src": "1563:25:7"
								}
							],
							"canonicalName": "ERC20Upgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 959,
								"nodeType": "StructuredDocumentation",
								"src": "309:1170:7",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 1564,
							"linearizedBaseContracts": [
								1564,
								2079,
								1642,
								2561,
								689
							],
							"name": "ERC20Upgradeable",
							"nameLocation": "1489:16:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 971,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1631:9:7",
									"nodeType": "VariableDeclaration",
									"scope": 1564,
									"src": "1595:45:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 970,
										"keyType": {
											"id": 968,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1603:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1595:27:7",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 969,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1614:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 977,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1703:11:7",
									"nodeType": "VariableDeclaration",
									"scope": 1564,
									"src": "1647:67:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 976,
										"keyType": {
											"id": 972,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1655:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1647:47:7",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 975,
											"keyType": {
												"id": 973,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1674:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1666:27:7",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 974,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1685:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 979,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1737:12:7",
									"nodeType": "VariableDeclaration",
									"scope": 1564,
									"src": "1721:28:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 978,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1721:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 981,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1771:5:7",
									"nodeType": "VariableDeclaration",
									"scope": 1564,
									"src": "1756:20:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 980,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1756:6:7",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 983,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1797:7:7",
									"nodeType": "VariableDeclaration",
									"scope": 1564,
									"src": "1782:22:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 982,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1782:6:7",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 998,
										"nodeType": "Block",
										"src": "2206:55:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 994,
															"name": "name_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 986,
															"src": "2239:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 995,
															"name": "symbol_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 988,
															"src": "2246:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 993,
														"name": "__ERC20_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1017,
														"src": "2216:22:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 996,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2216:38:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 997,
												"nodeType": "ExpressionStatement",
												"src": "2216:38:7"
											}
										]
									},
									"documentation": {
										"id": 984,
										"nodeType": "StructuredDocumentation",
										"src": "1811:298:7",
										"text": " @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 999,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 991,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 990,
												"name": "onlyInitializing",
												"nameLocations": [
													"2189:16:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 634,
												"src": "2189:16:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "2189:16:7"
										}
									],
									"name": "__ERC20_init",
									"nameLocation": "2123:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 989,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 986,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2150:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 999,
												"src": "2136:19:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 985,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2136:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 988,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2171:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 999,
												"src": "2157:21:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 987,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2157:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2135:44:7"
									},
									"returnParameters": {
										"id": 992,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2206:0:7"
									},
									"scope": 1564,
									"src": "2114:147:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1016,
										"nodeType": "Block",
										"src": "2369:57:7",
										"statements": [
											{
												"expression": {
													"id": 1010,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1008,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 981,
														"src": "2379:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1009,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1001,
														"src": "2387:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2379:13:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1011,
												"nodeType": "ExpressionStatement",
												"src": "2379:13:7"
											},
											{
												"expression": {
													"id": 1014,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1012,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 983,
														"src": "2402:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1013,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1003,
														"src": "2412:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2402:17:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1015,
												"nodeType": "ExpressionStatement",
												"src": "2402:17:7"
											}
										]
									},
									"id": 1017,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1006,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1005,
												"name": "onlyInitializing",
												"nameLocations": [
													"2352:16:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 634,
												"src": "2352:16:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "2352:16:7"
										}
									],
									"name": "__ERC20_init_unchained",
									"nameLocation": "2276:22:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1004,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1001,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2313:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1017,
												"src": "2299:19:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1000,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2299:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1003,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2334:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1017,
												"src": "2320:21:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1002,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2320:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2298:44:7"
									},
									"returnParameters": {
										"id": 1007,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2369:0:7"
									},
									"scope": 1564,
									"src": "2267:159:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										2066
									],
									"body": {
										"id": 1026,
										"nodeType": "Block",
										"src": "2560:29:7",
										"statements": [
											{
												"expression": {
													"id": 1024,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 981,
													"src": "2577:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1023,
												"id": 1025,
												"nodeType": "Return",
												"src": "2570:12:7"
											}
										]
									},
									"documentation": {
										"id": 1018,
										"nodeType": "StructuredDocumentation",
										"src": "2432:54:7",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1027,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2500:4:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1020,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2527:8:7"
									},
									"parameters": {
										"id": 1019,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2504:2:7"
									},
									"returnParameters": {
										"id": 1023,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1022,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1027,
												"src": "2545:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1021,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2545:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2544:15:7"
									},
									"scope": 1564,
									"src": "2491:98:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2072
									],
									"body": {
										"id": 1036,
										"nodeType": "Block",
										"src": "2773:31:7",
										"statements": [
											{
												"expression": {
													"id": 1034,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 983,
													"src": "2790:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1033,
												"id": 1035,
												"nodeType": "Return",
												"src": "2783:14:7"
											}
										]
									},
									"documentation": {
										"id": 1028,
										"nodeType": "StructuredDocumentation",
										"src": "2595:102:7",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 1037,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2711:6:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1030,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2740:8:7"
									},
									"parameters": {
										"id": 1029,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2717:2:7"
									},
									"returnParameters": {
										"id": 1033,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1032,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1037,
												"src": "2758:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1031,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2758:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:15:7"
									},
									"scope": 1564,
									"src": "2702:102:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2078
									],
									"body": {
										"id": 1046,
										"nodeType": "Block",
										"src": "3493:26:7",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 1044,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3510:2:7",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 1043,
												"id": 1045,
												"nodeType": "Return",
												"src": "3503:9:7"
											}
										]
									},
									"documentation": {
										"id": 1038,
										"nodeType": "StructuredDocumentation",
										"src": "2810:613:7",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 1047,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3437:8:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1040,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3468:8:7"
									},
									"parameters": {
										"id": 1039,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3445:2:7"
									},
									"returnParameters": {
										"id": 1043,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1042,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1047,
												"src": "3486:5:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1041,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3486:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3485:7:7"
									},
									"scope": 1564,
									"src": "3428:91:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1591
									],
									"body": {
										"id": 1056,
										"nodeType": "Block",
										"src": "3649:36:7",
										"statements": [
											{
												"expression": {
													"id": 1054,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 979,
													"src": "3666:12:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1053,
												"id": 1055,
												"nodeType": "Return",
												"src": "3659:19:7"
											}
										]
									},
									"documentation": {
										"id": 1048,
										"nodeType": "StructuredDocumentation",
										"src": "3525:49:7",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 1057,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3588:11:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1050,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3622:8:7"
									},
									"parameters": {
										"id": 1049,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3599:2:7"
									},
									"returnParameters": {
										"id": 1053,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1052,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1057,
												"src": "3640:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1051,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3640:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3639:9:7"
									},
									"scope": 1564,
									"src": "3579:106:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1599
									],
									"body": {
										"id": 1070,
										"nodeType": "Block",
										"src": "3826:42:7",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 1066,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 971,
														"src": "3843:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1068,
													"indexExpression": {
														"id": 1067,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1060,
														"src": "3853:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3843:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1065,
												"id": 1069,
												"nodeType": "Return",
												"src": "3836:25:7"
											}
										]
									},
									"documentation": {
										"id": 1058,
										"nodeType": "StructuredDocumentation",
										"src": "3691:47:7",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 1071,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3752:9:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1062,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3799:8:7"
									},
									"parameters": {
										"id": 1061,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1060,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3770:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1071,
												"src": "3762:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1059,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3762:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3761:17:7"
									},
									"returnParameters": {
										"id": 1065,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1064,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1071,
												"src": "3817:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1063,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3817:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3816:9:7"
									},
									"scope": 1564,
									"src": "3743:125:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1609
									],
									"body": {
										"id": 1095,
										"nodeType": "Block",
										"src": "4149:104:7",
										"statements": [
											{
												"assignments": [
													1083
												],
												"declarations": [
													{
														"constant": false,
														"id": 1083,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4167:5:7",
														"nodeType": "VariableDeclaration",
														"scope": 1095,
														"src": "4159:13:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1082,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4159:7:7",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1086,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1084,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2546,
														"src": "4175:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1085,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4175:12:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4159:28:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1088,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1083,
															"src": "4207:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1089,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1074,
															"src": "4214:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1090,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1076,
															"src": "4218:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1087,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1319,
														"src": "4197:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1091,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4197:28:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1092,
												"nodeType": "ExpressionStatement",
												"src": "4197:28:7"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1093,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4242:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1081,
												"id": 1094,
												"nodeType": "Return",
												"src": "4235:11:7"
											}
										]
									},
									"documentation": {
										"id": 1072,
										"nodeType": "StructuredDocumentation",
										"src": "3874:185:7",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 1096,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "4073:8:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1078,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4125:8:7"
									},
									"parameters": {
										"id": 1077,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1074,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4090:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1096,
												"src": "4082:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1073,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4082:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1076,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4102:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1096,
												"src": "4094:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1075,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4094:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4081:28:7"
									},
									"returnParameters": {
										"id": 1081,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1080,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1096,
												"src": "4143:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1079,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4143:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4142:6:7"
									},
									"scope": 1564,
									"src": "4064:189:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1619
									],
									"body": {
										"id": 1113,
										"nodeType": "Block",
										"src": "4409:51:7",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 1107,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 977,
															"src": "4426:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 1109,
														"indexExpression": {
															"id": 1108,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1099,
															"src": "4438:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4426:18:7",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1111,
													"indexExpression": {
														"id": 1110,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1101,
														"src": "4445:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4426:27:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1106,
												"id": 1112,
												"nodeType": "Return",
												"src": "4419:34:7"
											}
										]
									},
									"documentation": {
										"id": 1097,
										"nodeType": "StructuredDocumentation",
										"src": "4259:47:7",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 1114,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "4320:9:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1103,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4382:8:7"
									},
									"parameters": {
										"id": 1102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1099,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4338:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1114,
												"src": "4330:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1098,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4330:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1101,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4353:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1114,
												"src": "4345:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4345:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4329:32:7"
									},
									"returnParameters": {
										"id": 1106,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1105,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1114,
												"src": "4400:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1104,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4400:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4399:9:7"
									},
									"scope": 1564,
									"src": "4311:149:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1629
									],
									"body": {
										"id": 1138,
										"nodeType": "Block",
										"src": "4857:108:7",
										"statements": [
											{
												"assignments": [
													1126
												],
												"declarations": [
													{
														"constant": false,
														"id": 1126,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4875:5:7",
														"nodeType": "VariableDeclaration",
														"scope": 1138,
														"src": "4867:13:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1125,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4867:7:7",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1129,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1127,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2546,
														"src": "4883:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1128,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4883:12:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4867:28:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1131,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1126,
															"src": "4914:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1132,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1117,
															"src": "4921:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1133,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1119,
															"src": "4930:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1130,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1493,
														"src": "4905:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1134,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4905:32:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1135,
												"nodeType": "ExpressionStatement",
												"src": "4905:32:7"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1136,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4954:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1124,
												"id": 1137,
												"nodeType": "Return",
												"src": "4947:11:7"
											}
										]
									},
									"documentation": {
										"id": 1115,
										"nodeType": "StructuredDocumentation",
										"src": "4466:297:7",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 1139,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4777:7:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1121,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4833:8:7"
									},
									"parameters": {
										"id": 1120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1117,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4793:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1139,
												"src": "4785:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1116,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4785:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1119,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4810:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1139,
												"src": "4802:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1118,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4802:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4784:33:7"
									},
									"returnParameters": {
										"id": 1124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1123,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1139,
												"src": "4851:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1122,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4851:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4850:6:7"
									},
									"scope": 1564,
									"src": "4768:197:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1641
									],
									"body": {
										"id": 1171,
										"nodeType": "Block",
										"src": "5660:153:7",
										"statements": [
											{
												"assignments": [
													1153
												],
												"declarations": [
													{
														"constant": false,
														"id": 1153,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5678:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 1171,
														"src": "5670:15:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1152,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5670:7:7",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1156,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1154,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2546,
														"src": "5688:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1155,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5688:12:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5670:30:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1158,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1142,
															"src": "5726:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1159,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1153,
															"src": "5732:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1160,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1146,
															"src": "5741:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1157,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1536,
														"src": "5710:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5710:38:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1162,
												"nodeType": "ExpressionStatement",
												"src": "5710:38:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1164,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1142,
															"src": "5768:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1165,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1144,
															"src": "5774:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1166,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1146,
															"src": "5778:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1163,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1319,
														"src": "5758:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1167,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5758:27:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1168,
												"nodeType": "ExpressionStatement",
												"src": "5758:27:7"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1169,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5802:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1151,
												"id": 1170,
												"nodeType": "Return",
												"src": "5795:11:7"
											}
										]
									},
									"documentation": {
										"id": 1140,
										"nodeType": "StructuredDocumentation",
										"src": "4971:551:7",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 1172,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5536:12:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1148,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5636:8:7"
									},
									"parameters": {
										"id": 1147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1142,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5566:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1172,
												"src": "5558:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1141,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5558:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1144,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5588:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1172,
												"src": "5580:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1143,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5580:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1146,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5608:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1172,
												"src": "5600:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1145,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5600:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5548:72:7"
									},
									"returnParameters": {
										"id": 1151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1150,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1172,
												"src": "5654:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1149,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5654:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5653:6:7"
									},
									"scope": 1564,
									"src": "5527:286:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1200,
										"nodeType": "Block",
										"src": "6302:140:7",
										"statements": [
											{
												"assignments": [
													1183
												],
												"declarations": [
													{
														"constant": false,
														"id": 1183,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6320:5:7",
														"nodeType": "VariableDeclaration",
														"scope": 1200,
														"src": "6312:13:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1182,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6312:7:7",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1186,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1184,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2546,
														"src": "6328:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1185,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6328:12:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6312:28:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1188,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1183,
															"src": "6359:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1189,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1175,
															"src": "6366:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1195,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1191,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1183,
																		"src": "6385:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1192,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1175,
																		"src": "6392:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1190,
																	"name": "allowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1114,
																	"src": "6375:9:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address,address) view returns (uint256)"
																	}
																},
																"id": 1193,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6375:25:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1194,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1177,
																"src": "6403:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6375:38:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1187,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1493,
														"src": "6350:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1196,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6350:64:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1197,
												"nodeType": "ExpressionStatement",
												"src": "6350:64:7"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1198,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6431:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1181,
												"id": 1199,
												"nodeType": "Return",
												"src": "6424:11:7"
											}
										]
									},
									"documentation": {
										"id": 1173,
										"nodeType": "StructuredDocumentation",
										"src": "5819:384:7",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 1201,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "6217:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1175,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6243:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1201,
												"src": "6235:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1174,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6235:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1177,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "6260:10:7",
												"nodeType": "VariableDeclaration",
												"scope": 1201,
												"src": "6252:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1176,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6252:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6234:37:7"
									},
									"returnParameters": {
										"id": 1181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1180,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1201,
												"src": "6296:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1179,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6296:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6295:6:7"
									},
									"scope": 1564,
									"src": "6208:234:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1241,
										"nodeType": "Block",
										"src": "7028:328:7",
										"statements": [
											{
												"assignments": [
													1212
												],
												"declarations": [
													{
														"constant": false,
														"id": 1212,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "7046:5:7",
														"nodeType": "VariableDeclaration",
														"scope": 1241,
														"src": "7038:13:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1211,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7038:7:7",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1215,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1213,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2546,
														"src": "7054:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1214,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7054:12:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7038:28:7"
											},
											{
												"assignments": [
													1217
												],
												"declarations": [
													{
														"constant": false,
														"id": 1217,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "7084:16:7",
														"nodeType": "VariableDeclaration",
														"scope": 1241,
														"src": "7076:24:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1216,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7076:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1222,
												"initialValue": {
													"arguments": [
														{
															"id": 1219,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1212,
															"src": "7113:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1220,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1204,
															"src": "7120:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1218,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1114,
														"src": "7103:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 1221,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7103:25:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7076:52:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1226,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1224,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1217,
																"src": "7146:16:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1225,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1206,
																"src": "7166:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7146:35:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 1227,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7183:39:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 1223,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7138:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1228,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7138:85:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1229,
												"nodeType": "ExpressionStatement",
												"src": "7138:85:7"
											},
											{
												"id": 1238,
												"nodeType": "UncheckedBlock",
												"src": "7233:95:7",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 1231,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1212,
																	"src": "7266:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1232,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1204,
																	"src": "7273:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1235,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1233,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1217,
																		"src": "7282:16:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 1234,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1206,
																		"src": "7301:15:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7282:34:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1230,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1493,
																"src": "7257:8:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 1236,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7257:60:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1237,
														"nodeType": "ExpressionStatement",
														"src": "7257:60:7"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1239,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7345:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1210,
												"id": 1240,
												"nodeType": "Return",
												"src": "7338:11:7"
											}
										]
									},
									"documentation": {
										"id": 1202,
										"nodeType": "StructuredDocumentation",
										"src": "6448:476:7",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 1242,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "6938:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1204,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6964:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1242,
												"src": "6956:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1203,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6956:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1206,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "6981:15:7",
												"nodeType": "VariableDeclaration",
												"scope": 1242,
												"src": "6973:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1205,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6973:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6955:42:7"
									},
									"returnParameters": {
										"id": 1210,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1209,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1242,
												"src": "7022:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1208,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7022:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7021:6:7"
									},
									"scope": 1564,
									"src": "6929:427:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1318,
										"nodeType": "Block",
										"src": "7918:710:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1258,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1253,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1245,
																"src": "7936:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1256,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7952:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1255,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7944:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1254,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7944:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1257,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7944:10:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7936:18:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 1259,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7956:39:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 1252,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7928:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1260,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7928:68:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1261,
												"nodeType": "ExpressionStatement",
												"src": "7928:68:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1268,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1263,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1247,
																"src": "8014:2:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1266,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8028:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1265,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8020:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1264,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8020:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1267,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8020:10:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8014:16:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 1269,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8032:37:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 1262,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8006:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1270,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8006:64:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1271,
												"nodeType": "ExpressionStatement",
												"src": "8006:64:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1273,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1245,
															"src": "8102:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1274,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1247,
															"src": "8108:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1275,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1249,
															"src": "8112:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1272,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1547,
														"src": "8081:20:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8081:38:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1277,
												"nodeType": "ExpressionStatement",
												"src": "8081:38:7"
											},
											{
												"assignments": [
													1279
												],
												"declarations": [
													{
														"constant": false,
														"id": 1279,
														"mutability": "mutable",
														"name": "fromBalance",
														"nameLocation": "8138:11:7",
														"nodeType": "VariableDeclaration",
														"scope": 1318,
														"src": "8130:19:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1278,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8130:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1283,
												"initialValue": {
													"baseExpression": {
														"id": 1280,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 971,
														"src": "8152:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1282,
													"indexExpression": {
														"id": 1281,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1245,
														"src": "8162:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8152:15:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8130:37:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1287,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1285,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1279,
																"src": "8185:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1286,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1249,
																"src": "8200:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8185:21:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 1288,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8208:40:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 1284,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8177:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1289,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8177:72:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1290,
												"nodeType": "ExpressionStatement",
												"src": "8177:72:7"
											},
											{
												"id": 1305,
												"nodeType": "UncheckedBlock",
												"src": "8259:273:7",
												"statements": [
													{
														"expression": {
															"id": 1297,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 1291,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 971,
																	"src": "8283:9:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1293,
																"indexExpression": {
																	"id": 1292,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1245,
																	"src": "8293:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8283:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1296,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1294,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1279,
																	"src": "8301:11:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1295,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1249,
																	"src": "8315:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8301:20:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8283:38:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1298,
														"nodeType": "ExpressionStatement",
														"src": "8283:38:7"
													},
													{
														"expression": {
															"id": 1303,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 1299,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 971,
																	"src": "8498:9:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1301,
																"indexExpression": {
																	"id": 1300,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1247,
																	"src": "8508:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8498:13:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 1302,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1249,
																"src": "8515:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8498:23:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1304,
														"nodeType": "ExpressionStatement",
														"src": "8498:23:7"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1307,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1245,
															"src": "8556:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1308,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1247,
															"src": "8562:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1309,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1249,
															"src": "8566:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1306,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1576,
														"src": "8547:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1310,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8547:26:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1311,
												"nodeType": "EmitStatement",
												"src": "8542:31:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1313,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1245,
															"src": "8604:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1314,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1247,
															"src": "8610:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1315,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1249,
															"src": "8614:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1312,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1558,
														"src": "8584:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1316,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8584:37:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1317,
												"nodeType": "ExpressionStatement",
												"src": "8584:37:7"
											}
										]
									},
									"documentation": {
										"id": 1243,
										"nodeType": "StructuredDocumentation",
										"src": "7362:443:7",
										"text": " @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 1319,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "7819:9:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1245,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7846:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1319,
												"src": "7838:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1244,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7838:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1247,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7868:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1319,
												"src": "7860:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1246,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7860:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1249,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7888:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1319,
												"src": "7880:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1248,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7880:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7828:72:7"
									},
									"returnParameters": {
										"id": 1251,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7918:0:7"
									},
									"scope": 1564,
									"src": "7810:818:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1375,
										"nodeType": "Block",
										"src": "8969:470:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1333,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1328,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1322,
																"src": "8987:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1331,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9006:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1330,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8998:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1329,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8998:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1332,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8998:10:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8987:21:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 1334,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9010:33:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 1327,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8979:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1335,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8979:65:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1336,
												"nodeType": "ExpressionStatement",
												"src": "8979:65:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1340,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9084:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1339,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9076:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1338,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9076:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1341,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9076:10:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1342,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1322,
															"src": "9088:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1343,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1324,
															"src": "9097:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1337,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1547,
														"src": "9055:20:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1344,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9055:49:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1345,
												"nodeType": "ExpressionStatement",
												"src": "9055:49:7"
											},
											{
												"expression": {
													"id": 1348,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1346,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 979,
														"src": "9115:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1347,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1324,
														"src": "9131:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9115:22:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1349,
												"nodeType": "ExpressionStatement",
												"src": "9115:22:7"
											},
											{
												"id": 1356,
												"nodeType": "UncheckedBlock",
												"src": "9147:175:7",
												"statements": [
													{
														"expression": {
															"id": 1354,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 1350,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 971,
																	"src": "9283:9:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1352,
																"indexExpression": {
																	"id": 1351,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1322,
																	"src": "9293:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9283:18:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 1353,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1324,
																"src": "9305:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9283:28:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1355,
														"nodeType": "ExpressionStatement",
														"src": "9283:28:7"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1360,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9353:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1359,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9345:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1358,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9345:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1361,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9345:10:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1362,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1322,
															"src": "9357:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1363,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1324,
															"src": "9366:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1357,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1576,
														"src": "9336:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1364,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9336:37:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1365,
												"nodeType": "EmitStatement",
												"src": "9331:42:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1369,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9412:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1368,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9404:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1367,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9404:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1370,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9404:10:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1371,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1322,
															"src": "9416:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1372,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1324,
															"src": "9425:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1366,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1558,
														"src": "9384:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1373,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9384:48:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1374,
												"nodeType": "ExpressionStatement",
												"src": "9384:48:7"
											}
										]
									},
									"documentation": {
										"id": 1320,
										"nodeType": "StructuredDocumentation",
										"src": "8634:265:7",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 1376,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "8913:5:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1322,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8927:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1376,
												"src": "8919:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1321,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8919:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1324,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8944:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1376,
												"src": "8936:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1323,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8936:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8918:33:7"
									},
									"returnParameters": {
										"id": 1326,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8969:0:7"
									},
									"scope": 1564,
									"src": "8904:535:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1447,
										"nodeType": "Block",
										"src": "9824:594:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1390,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1385,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1379,
																"src": "9842:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1388,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9861:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1387,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9853:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1386,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9853:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1389,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9853:10:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9842:21:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 1391,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9865:35:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 1384,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9834:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1392,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9834:67:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1393,
												"nodeType": "ExpressionStatement",
												"src": "9834:67:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1395,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1379,
															"src": "9933:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1398,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9950:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1397,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9942:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1396,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9942:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1399,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9942:10:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1400,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1381,
															"src": "9954:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1394,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1547,
														"src": "9912:20:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1401,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9912:49:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1402,
												"nodeType": "ExpressionStatement",
												"src": "9912:49:7"
											},
											{
												"assignments": [
													1404
												],
												"declarations": [
													{
														"constant": false,
														"id": 1404,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "9980:14:7",
														"nodeType": "VariableDeclaration",
														"scope": 1447,
														"src": "9972:22:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1403,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9972:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1408,
												"initialValue": {
													"baseExpression": {
														"id": 1405,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 971,
														"src": "9997:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1407,
													"indexExpression": {
														"id": 1406,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1379,
														"src": "10007:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9997:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9972:43:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1412,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1410,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1404,
																"src": "10033:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1411,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1381,
																"src": "10051:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10033:24:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 1413,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10059:36:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 1409,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10025:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1414,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10025:71:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1415,
												"nodeType": "ExpressionStatement",
												"src": "10025:71:7"
											},
											{
												"id": 1428,
												"nodeType": "UncheckedBlock",
												"src": "10106:194:7",
												"statements": [
													{
														"expression": {
															"id": 1422,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 1416,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 971,
																	"src": "10130:9:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1418,
																"indexExpression": {
																	"id": 1417,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1379,
																	"src": "10140:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "10130:18:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1421,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1419,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1404,
																	"src": "10151:14:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1420,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1381,
																	"src": "10168:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10151:23:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10130:44:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1423,
														"nodeType": "ExpressionStatement",
														"src": "10130:44:7"
													},
													{
														"expression": {
															"id": 1426,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1424,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 979,
																"src": "10267:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"id": 1425,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1381,
																"src": "10283:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10267:22:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1427,
														"nodeType": "ExpressionStatement",
														"src": "10267:22:7"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1430,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1379,
															"src": "10324:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1433,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10341:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1432,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10333:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1431,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10333:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1434,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10333:10:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1435,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1381,
															"src": "10345:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1429,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1576,
														"src": "10315:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1436,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10315:37:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1437,
												"nodeType": "EmitStatement",
												"src": "10310:42:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1439,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1379,
															"src": "10383:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1442,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10400:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1441,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10392:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1440,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10392:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1443,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10392:10:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1444,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1381,
															"src": "10404:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1438,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1558,
														"src": "10363:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1445,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10363:48:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1446,
												"nodeType": "ExpressionStatement",
												"src": "10363:48:7"
											}
										]
									},
									"documentation": {
										"id": 1377,
										"nodeType": "StructuredDocumentation",
										"src": "9445:309:7",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 1448,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9768:5:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1382,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1379,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9782:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "9774:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1378,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9774:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1381,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9799:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "9791:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1380,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9791:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9773:33:7"
									},
									"returnParameters": {
										"id": 1383,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9824:0:7"
									},
									"scope": 1564,
									"src": "9759:659:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1492,
										"nodeType": "Block",
										"src": "10954:257:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1464,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1459,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1451,
																"src": "10972:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1462,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10989:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1461,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10981:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1460,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10981:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1463,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10981:10:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10972:19:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 1465,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10993:38:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 1458,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10964:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1466,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10964:68:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1467,
												"nodeType": "ExpressionStatement",
												"src": "10964:68:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1474,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1469,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1453,
																"src": "11050:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1472,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11069:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1471,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11061:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1470,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "11061:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1473,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11061:10:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "11050:21:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 1475,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11073:36:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 1468,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11042:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1476,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11042:68:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1477,
												"nodeType": "ExpressionStatement",
												"src": "11042:68:7"
											},
											{
												"expression": {
													"id": 1484,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 1478,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 977,
																"src": "11121:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 1481,
															"indexExpression": {
																"id": 1479,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1451,
																"src": "11133:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "11121:18:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1482,
														"indexExpression": {
															"id": 1480,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1453,
															"src": "11140:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11121:27:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1483,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1455,
														"src": "11151:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11121:36:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1485,
												"nodeType": "ExpressionStatement",
												"src": "11121:36:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1487,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1451,
															"src": "11181:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1488,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1453,
															"src": "11188:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1489,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1455,
															"src": "11197:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1486,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1585,
														"src": "11172:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1490,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11172:32:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1491,
												"nodeType": "EmitStatement",
												"src": "11167:37:7"
											}
										]
									},
									"documentation": {
										"id": 1449,
										"nodeType": "StructuredDocumentation",
										"src": "10424:412:7",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 1493,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10850:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1451,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10876:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1493,
												"src": "10868:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1450,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10868:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1453,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10899:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1493,
												"src": "10891:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1452,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10891:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1455,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10924:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1493,
												"src": "10916:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1454,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10916:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10858:78:7"
									},
									"returnParameters": {
										"id": 1457,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10954:0:7"
									},
									"scope": 1564,
									"src": "10841:370:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1535,
										"nodeType": "Block",
										"src": "11612:321:7",
										"statements": [
											{
												"assignments": [
													1504
												],
												"declarations": [
													{
														"constant": false,
														"id": 1504,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "11630:16:7",
														"nodeType": "VariableDeclaration",
														"scope": 1535,
														"src": "11622:24:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1503,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11622:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1509,
												"initialValue": {
													"arguments": [
														{
															"id": 1506,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1496,
															"src": "11659:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1507,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1498,
															"src": "11666:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1505,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1114,
														"src": "11649:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 1508,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11649:25:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11622:52:7"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1516,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1510,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1504,
														"src": "11688:16:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1513,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11713:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1512,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "11713:7:7",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 1511,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "11708:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1514,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11708:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 1515,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "11722:3:7",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "11708:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11688:37:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1534,
												"nodeType": "IfStatement",
												"src": "11684:243:7",
												"trueBody": {
													"id": 1533,
													"nodeType": "Block",
													"src": "11727:200:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1520,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1518,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1504,
																			"src": "11749:16:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 1519,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1500,
																			"src": "11769:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11749:26:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 1521,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11777:31:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 1517,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "11741:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1522,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11741:68:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1523,
															"nodeType": "ExpressionStatement",
															"src": "11741:68:7"
														},
														{
															"id": 1532,
															"nodeType": "UncheckedBlock",
															"src": "11823:94:7",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 1525,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1496,
																				"src": "11860:5:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1526,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1498,
																				"src": "11867:7:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1529,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1527,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1504,
																					"src": "11876:16:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 1528,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1500,
																					"src": "11895:6:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11876:25:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1524,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1493,
																			"src": "11851:8:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 1530,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11851:51:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1531,
																	"nodeType": "ExpressionStatement",
																	"src": "11851:51:7"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1494,
										"nodeType": "StructuredDocumentation",
										"src": "11217:270:7",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 1536,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "11501:15:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1501,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1496,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11534:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1536,
												"src": "11526:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1495,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11526:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1498,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11557:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1536,
												"src": "11549:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1497,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11549:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1500,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11582:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1536,
												"src": "11574:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1499,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11574:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11516:78:7"
									},
									"returnParameters": {
										"id": 1502,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11612:0:7"
									},
									"scope": 1564,
									"src": "11492:441:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1546,
										"nodeType": "Block",
										"src": "12636:2:7",
										"statements": []
									},
									"documentation": {
										"id": 1537,
										"nodeType": "StructuredDocumentation",
										"src": "11939:573:7",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 1547,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "12526:20:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1544,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1539,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12564:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1547,
												"src": "12556:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1538,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12556:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1541,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12586:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1547,
												"src": "12578:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1540,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12578:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1543,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12606:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1547,
												"src": "12598:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1542,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12598:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12546:72:7"
									},
									"returnParameters": {
										"id": 1545,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12636:0:7"
									},
									"scope": 1564,
									"src": "12517:121:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1557,
										"nodeType": "Block",
										"src": "13344:2:7",
										"statements": []
									},
									"documentation": {
										"id": 1548,
										"nodeType": "StructuredDocumentation",
										"src": "12644:577:7",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 1558,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "13235:19:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1550,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "13272:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1558,
												"src": "13264:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1549,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13264:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1552,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "13294:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1558,
												"src": "13286:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1551,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13286:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1554,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "13314:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1558,
												"src": "13306:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1553,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13306:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13254:72:7"
									},
									"returnParameters": {
										"id": 1556,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13344:0:7"
									},
									"scope": 1564,
									"src": "13226:120:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1559,
										"nodeType": "StructuredDocumentation",
										"src": "13352:254:7",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 1563,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "13631:5:7",
									"nodeType": "VariableDeclaration",
									"scope": 1564,
									"src": "13611:25:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$45_storage",
										"typeString": "uint256[45]"
									},
									"typeName": {
										"baseType": {
											"id": 1560,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "13611:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 1562,
										"length": {
											"hexValue": "3435",
											"id": 1561,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "13619:2:7",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_45_by_1",
												"typeString": "int_const 45"
											},
											"value": "45"
										},
										"nodeType": "ArrayTypeName",
										"src": "13611:11:7",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$45_storage_ptr",
											"typeString": "uint256[45]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 1565,
							"src": "1480:12159:7",
							"usedErrors": []
						}
					],
					"src": "105:13535:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/IERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/IERC20Upgradeable.sol",
					"exportedSymbols": {
						"IERC20Upgradeable": [
							1642
						]
					},
					"id": 1643,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1566,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Upgradeable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1567,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:8",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 1642,
							"linearizedBaseContracts": [
								1642
							],
							"name": "IERC20Upgradeable",
							"nameLocation": "212:17:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1568,
										"nodeType": "StructuredDocumentation",
										"src": "236:158:8",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 1576,
									"name": "Transfer",
									"nameLocation": "405:8:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1575,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1570,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "430:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1576,
												"src": "414:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1569,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "414:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1572,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "452:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1576,
												"src": "436:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1571,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "436:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1574,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "464:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1576,
												"src": "456:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1573,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "456:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "413:57:8"
									},
									"src": "399:72:8"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1577,
										"nodeType": "StructuredDocumentation",
										"src": "477:148:8",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 1585,
									"name": "Approval",
									"nameLocation": "636:8:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1584,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1579,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "661:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1585,
												"src": "645:21:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1578,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "645:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1581,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "684:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1585,
												"src": "668:23:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1580,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1583,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "701:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1585,
												"src": "693:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1582,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "644:63:8"
									},
									"src": "630:78:8"
								},
								{
									"documentation": {
										"id": 1586,
										"nodeType": "StructuredDocumentation",
										"src": "714:66:8",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 1591,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "794:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1587,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "805:2:8"
									},
									"returnParameters": {
										"id": 1590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1589,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1591,
												"src": "831:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1588,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "831:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "830:9:8"
									},
									"scope": 1642,
									"src": "785:55:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1592,
										"nodeType": "StructuredDocumentation",
										"src": "846:72:8",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 1599,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "932:9:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1595,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1594,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "950:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1599,
												"src": "942:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1593,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "942:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "941:17:8"
									},
									"returnParameters": {
										"id": 1598,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1597,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1599,
												"src": "982:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1596,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "982:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "981:9:8"
									},
									"scope": 1642,
									"src": "923:68:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1600,
										"nodeType": "StructuredDocumentation",
										"src": "997:202:8",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 1609,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1213:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1605,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1602,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1230:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1609,
												"src": "1222:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1601,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1222:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1604,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1242:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1609,
												"src": "1234:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1603,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1221:28:8"
									},
									"returnParameters": {
										"id": 1608,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1607,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1609,
												"src": "1268:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1606,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1268:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:6:8"
									},
									"scope": 1642,
									"src": "1204:70:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1610,
										"nodeType": "StructuredDocumentation",
										"src": "1280:264:8",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 1619,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1558:9:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1615,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1612,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1576:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1619,
												"src": "1568:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1611,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1568:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1614,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1591:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1619,
												"src": "1583:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1613,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1583:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1567:32:8"
									},
									"returnParameters": {
										"id": 1618,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1617,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1619,
												"src": "1623:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1616,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1623:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1622:9:8"
									},
									"scope": 1642,
									"src": "1549:83:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1620,
										"nodeType": "StructuredDocumentation",
										"src": "1638:642:8",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1629,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2294:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1625,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1622,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2310:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1629,
												"src": "2302:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1621,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2302:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1624,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2327:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1629,
												"src": "2319:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1623,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2319:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2301:33:8"
									},
									"returnParameters": {
										"id": 1628,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1627,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1629,
												"src": "2353:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1626,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2353:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2352:6:8"
									},
									"scope": 1642,
									"src": "2285:74:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1630,
										"nodeType": "StructuredDocumentation",
										"src": "2365:287:8",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 1641,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2666:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1637,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1632,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2696:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1641,
												"src": "2688:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1631,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2688:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1634,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2718:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1641,
												"src": "2710:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1633,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2710:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1636,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2738:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1641,
												"src": "2730:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1635,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2730:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2678:72:8"
									},
									"returnParameters": {
										"id": 1640,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1639,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1641,
												"src": "2769:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1638,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2769:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2768:6:8"
									},
									"scope": 1642,
									"src": "2657:118:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1643,
							"src": "202:2575:8",
							"usedErrors": []
						}
					],
					"src": "106:2672:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2363
						],
						"ContextUpgradeable": [
							2561
						],
						"ERC20BurnableUpgradeable": [
							1706
						],
						"ERC20Upgradeable": [
							1564
						],
						"IERC20MetadataUpgradeable": [
							2079
						],
						"IERC20Upgradeable": [
							1642
						],
						"Initializable": [
							689
						]
					},
					"id": 1707,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1644,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "124:23:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol",
							"file": "../ERC20Upgradeable.sol",
							"id": 1645,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1707,
							"sourceUnit": 1565,
							"src": "149:33:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol",
							"file": "../../../utils/ContextUpgradeable.sol",
							"id": 1646,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1707,
							"sourceUnit": 2562,
							"src": "183:47:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol",
							"file": "../../../proxy/utils/Initializable.sol",
							"id": 1647,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1707,
							"sourceUnit": 690,
							"src": "231:48:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1649,
										"name": "Initializable",
										"nameLocations": [
											"536:13:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 689,
										"src": "536:13:9"
									},
									"id": 1650,
									"nodeType": "InheritanceSpecifier",
									"src": "536:13:9"
								},
								{
									"baseName": {
										"id": 1651,
										"name": "ContextUpgradeable",
										"nameLocations": [
											"551:18:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2561,
										"src": "551:18:9"
									},
									"id": 1652,
									"nodeType": "InheritanceSpecifier",
									"src": "551:18:9"
								},
								{
									"baseName": {
										"id": 1653,
										"name": "ERC20Upgradeable",
										"nameLocations": [
											"571:16:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1564,
										"src": "571:16:9"
									},
									"id": 1654,
									"nodeType": "InheritanceSpecifier",
									"src": "571:16:9"
								}
							],
							"canonicalName": "ERC20BurnableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1648,
								"nodeType": "StructuredDocumentation",
								"src": "281:208:9",
								"text": " @dev Extension of {ERC20} that allows token holders to destroy both their own\n tokens and those that they have an allowance for, in a way that can be\n recognized off-chain (via event analysis)."
							},
							"fullyImplemented": true,
							"id": 1706,
							"linearizedBaseContracts": [
								1706,
								1564,
								2079,
								1642,
								2561,
								689
							],
							"name": "ERC20BurnableUpgradeable",
							"nameLocation": "508:24:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1659,
										"nodeType": "Block",
										"src": "652:7:9",
										"statements": []
									},
									"id": 1660,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1657,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1656,
												"name": "onlyInitializing",
												"nameLocations": [
													"635:16:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 634,
												"src": "635:16:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "635:16:9"
										}
									],
									"name": "__ERC20Burnable_init",
									"nameLocation": "603:20:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1655,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "623:2:9"
									},
									"returnParameters": {
										"id": 1658,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "652:0:9"
									},
									"scope": 1706,
									"src": "594:65:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1665,
										"nodeType": "Block",
										"src": "733:7:9",
										"statements": []
									},
									"id": 1666,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1663,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1662,
												"name": "onlyInitializing",
												"nameLocations": [
													"716:16:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 634,
												"src": "716:16:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "716:16:9"
										}
									],
									"name": "__ERC20Burnable_init_unchained",
									"nameLocation": "674:30:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1661,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "704:2:9"
									},
									"returnParameters": {
										"id": 1664,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "733:0:9"
									},
									"scope": 1706,
									"src": "665:75:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1678,
										"nodeType": "Block",
										"src": "893:44:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1673,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2546,
																"src": "909:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1674,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "909:12:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1675,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1669,
															"src": "923:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1672,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1448,
														"src": "903:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1676,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "903:27:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1677,
												"nodeType": "ExpressionStatement",
												"src": "903:27:9"
											}
										]
									},
									"documentation": {
										"id": 1667,
										"nodeType": "StructuredDocumentation",
										"src": "745:98:9",
										"text": " @dev Destroys `amount` tokens from the caller.\n See {ERC20-_burn}."
									},
									"functionSelector": "42966c68",
									"id": 1679,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "857:4:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1669,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "870:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1679,
												"src": "862:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1668,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "862:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "861:16:9"
									},
									"returnParameters": {
										"id": 1671,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "893:0:9"
									},
									"scope": 1706,
									"src": "848:89:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1699,
										"nodeType": "Block",
										"src": "1309:95:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1688,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1682,
															"src": "1335:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1689,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2546,
																"src": "1344:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1690,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1344:12:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1691,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1684,
															"src": "1358:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1687,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1536,
														"src": "1319:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1692,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1319:46:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1693,
												"nodeType": "ExpressionStatement",
												"src": "1319:46:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1695,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1682,
															"src": "1381:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1696,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1684,
															"src": "1390:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1694,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1448,
														"src": "1375:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1697,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1375:22:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1698,
												"nodeType": "ExpressionStatement",
												"src": "1375:22:9"
											}
										]
									},
									"documentation": {
										"id": 1680,
										"nodeType": "StructuredDocumentation",
										"src": "943:295:9",
										"text": " @dev Destroys `amount` tokens from `account`, deducting from the caller's\n allowance.\n See {ERC20-_burn} and {ERC20-allowance}.\n Requirements:\n - the caller must have allowance for ``accounts``'s tokens of at least\n `amount`."
									},
									"functionSelector": "79cc6790",
									"id": 1700,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burnFrom",
									"nameLocation": "1252:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1685,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1682,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1269:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1700,
												"src": "1261:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1681,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1261:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1684,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1286:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1700,
												"src": "1278:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1683,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1278:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1260:33:9"
									},
									"returnParameters": {
										"id": 1686,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1309:0:9"
									},
									"scope": 1706,
									"src": "1243:161:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1701,
										"nodeType": "StructuredDocumentation",
										"src": "1410:254:9",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 1705,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "1689:5:9",
									"nodeType": "VariableDeclaration",
									"scope": 1706,
									"src": "1669:25:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 1702,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1669:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 1704,
										"length": {
											"hexValue": "3530",
											"id": 1703,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1677:2:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1669:11:9",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 1707,
							"src": "490:1207:9",
							"usedErrors": []
						}
					],
					"src": "124:1574:9"
				},
				"id": 9
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2363
						],
						"ArraysUpgradeable": [
							2519
						],
						"ContextUpgradeable": [
							2561
						],
						"CountersUpgradeable": [
							2635
						],
						"ERC20SnapshotUpgradeable": [
							2054
						],
						"ERC20Upgradeable": [
							1564
						],
						"IERC20MetadataUpgradeable": [
							2079
						],
						"IERC20Upgradeable": [
							1642
						],
						"Initializable": [
							689
						],
						"MathUpgradeable": [
							3560
						],
						"StorageSlotUpgradeable": [
							2695
						]
					},
					"id": 2055,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1708,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "124:23:10"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol",
							"file": "../ERC20Upgradeable.sol",
							"id": 1709,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2055,
							"sourceUnit": 1565,
							"src": "149:33:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol",
							"file": "../../../utils/ArraysUpgradeable.sol",
							"id": 1710,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2055,
							"sourceUnit": 2520,
							"src": "183:46:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/utils/CountersUpgradeable.sol",
							"file": "../../../utils/CountersUpgradeable.sol",
							"id": 1711,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2055,
							"sourceUnit": 2636,
							"src": "230:48:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol",
							"file": "../../../proxy/utils/Initializable.sol",
							"id": 1712,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2055,
							"sourceUnit": 690,
							"src": "279:48:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1714,
										"name": "Initializable",
										"nameLocations": [
											"2530:13:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 689,
										"src": "2530:13:10"
									},
									"id": 1715,
									"nodeType": "InheritanceSpecifier",
									"src": "2530:13:10"
								},
								{
									"baseName": {
										"id": 1716,
										"name": "ERC20Upgradeable",
										"nameLocations": [
											"2545:16:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1564,
										"src": "2545:16:10"
									},
									"id": 1717,
									"nodeType": "InheritanceSpecifier",
									"src": "2545:16:10"
								}
							],
							"canonicalName": "ERC20SnapshotUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1713,
								"nodeType": "StructuredDocumentation",
								"src": "329:2153:10",
								"text": " @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\n total supply at the time are recorded for later access.\n This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\n In naive implementations it's possible to perform a \"double spend\" attack by reusing the same balance from different\n accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\n used to create an efficient ERC20 forking mechanism.\n Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\n snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\n id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\n and the account address.\n NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\n return `block.number` will trigger the creation of snapshot at the beginning of each new block. When overriding this\n function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\n Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\n alternative consider {ERC20Votes}.\n ==== Gas Costs\n Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\n n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\n smaller since identical balances in subsequent snapshots are stored as a single entry.\n There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\n only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\n transfers will have normal cost until the next snapshot, and so on."
							},
							"fullyImplemented": true,
							"id": 2054,
							"linearizedBaseContracts": [
								2054,
								1564,
								2079,
								1642,
								2561,
								689
							],
							"name": "ERC20SnapshotUpgradeable",
							"nameLocation": "2502:24:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1722,
										"nodeType": "Block",
										"src": "2626:7:10",
										"statements": []
									},
									"id": 1723,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1720,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1719,
												"name": "onlyInitializing",
												"nameLocations": [
													"2609:16:10"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 634,
												"src": "2609:16:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "2609:16:10"
										}
									],
									"name": "__ERC20Snapshot_init",
									"nameLocation": "2577:20:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1718,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2597:2:10"
									},
									"returnParameters": {
										"id": 1721,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2626:0:10"
									},
									"scope": 2054,
									"src": "2568:65:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1728,
										"nodeType": "Block",
										"src": "2707:7:10",
										"statements": []
									},
									"id": 1729,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1726,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1725,
												"name": "onlyInitializing",
												"nameLocations": [
													"2690:16:10"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 634,
												"src": "2690:16:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "2690:16:10"
										}
									],
									"name": "__ERC20Snapshot_init_unchained",
									"nameLocation": "2648:30:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1724,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2678:2:10"
									},
									"returnParameters": {
										"id": 1727,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2707:0:10"
									},
									"scope": 2054,
									"src": "2639:75:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"global": false,
									"id": 1733,
									"libraryName": {
										"id": 1730,
										"name": "ArraysUpgradeable",
										"nameLocations": [
											"2916:17:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2519,
										"src": "2916:17:10"
									},
									"nodeType": "UsingForDirective",
									"src": "2910:38:10",
									"typeName": {
										"baseType": {
											"id": 1731,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "2938:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 1732,
										"nodeType": "ArrayTypeName",
										"src": "2938:9:10",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
											"typeString": "uint256[]"
										}
									}
								},
								{
									"global": false,
									"id": 1737,
									"libraryName": {
										"id": 1734,
										"name": "CountersUpgradeable",
										"nameLocations": [
											"2959:19:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2635,
										"src": "2959:19:10"
									},
									"nodeType": "UsingForDirective",
									"src": "2953:58:10",
									"typeName": {
										"id": 1736,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1735,
											"name": "CountersUpgradeable.Counter",
											"nameLocations": [
												"2983:19:10",
												"3003:7:10"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 2567,
											"src": "2983:27:10"
										},
										"referencedDeclaration": 2567,
										"src": "2983:27:10",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_Counter_$2567_storage_ptr",
											"typeString": "struct CountersUpgradeable.Counter"
										}
									}
								},
								{
									"canonicalName": "ERC20SnapshotUpgradeable.Snapshots",
									"id": 1744,
									"members": [
										{
											"constant": false,
											"id": 1740,
											"mutability": "mutable",
											"name": "ids",
											"nameLocation": "3256:3:10",
											"nodeType": "VariableDeclaration",
											"scope": 1744,
											"src": "3246:13:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
												"typeString": "uint256[]"
											},
											"typeName": {
												"baseType": {
													"id": 1738,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3246:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1739,
												"nodeType": "ArrayTypeName",
												"src": "3246:9:10",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
													"typeString": "uint256[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1743,
											"mutability": "mutable",
											"name": "values",
											"nameLocation": "3279:6:10",
											"nodeType": "VariableDeclaration",
											"scope": 1744,
											"src": "3269:16:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
												"typeString": "uint256[]"
											},
											"typeName": {
												"baseType": {
													"id": 1741,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3269:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1742,
												"nodeType": "ArrayTypeName",
												"src": "3269:9:10",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
													"typeString": "uint256[]"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Snapshots",
									"nameLocation": "3226:9:10",
									"nodeType": "StructDefinition",
									"scope": 2054,
									"src": "3219:73:10",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 1749,
									"mutability": "mutable",
									"name": "_accountBalanceSnapshots",
									"nameLocation": "3336:24:10",
									"nodeType": "VariableDeclaration",
									"scope": 2054,
									"src": "3298:62:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Snapshots_$1744_storage_$",
										"typeString": "mapping(address => struct ERC20SnapshotUpgradeable.Snapshots)"
									},
									"typeName": {
										"id": 1748,
										"keyType": {
											"id": 1745,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "3306:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "3298:29:10",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Snapshots_$1744_storage_$",
											"typeString": "mapping(address => struct ERC20SnapshotUpgradeable.Snapshots)"
										},
										"valueType": {
											"id": 1747,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 1746,
												"name": "Snapshots",
												"nameLocations": [
													"3317:9:10"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1744,
												"src": "3317:9:10"
											},
											"referencedDeclaration": 1744,
											"src": "3317:9:10",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Snapshots_$1744_storage_ptr",
												"typeString": "struct ERC20SnapshotUpgradeable.Snapshots"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1752,
									"mutability": "mutable",
									"name": "_totalSupplySnapshots",
									"nameLocation": "3384:21:10",
									"nodeType": "VariableDeclaration",
									"scope": 2054,
									"src": "3366:39:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_Snapshots_$1744_storage",
										"typeString": "struct ERC20SnapshotUpgradeable.Snapshots"
									},
									"typeName": {
										"id": 1751,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1750,
											"name": "Snapshots",
											"nameLocations": [
												"3366:9:10"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1744,
											"src": "3366:9:10"
										},
										"referencedDeclaration": 1744,
										"src": "3366:9:10",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_Snapshots_$1744_storage_ptr",
											"typeString": "struct ERC20SnapshotUpgradeable.Snapshots"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1755,
									"mutability": "mutable",
									"name": "_currentSnapshotId",
									"nameLocation": "3545:18:10",
									"nodeType": "VariableDeclaration",
									"scope": 2054,
									"src": "3509:54:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_Counter_$2567_storage",
										"typeString": "struct CountersUpgradeable.Counter"
									},
									"typeName": {
										"id": 1754,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1753,
											"name": "CountersUpgradeable.Counter",
											"nameLocations": [
												"3509:19:10",
												"3529:7:10"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 2567,
											"src": "3509:27:10"
										},
										"referencedDeclaration": 2567,
										"src": "3509:27:10",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_Counter_$2567_storage_ptr",
											"typeString": "struct CountersUpgradeable.Counter"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1756,
										"nodeType": "StructuredDocumentation",
										"src": "3570:93:10",
										"text": " @dev Emitted by {_snapshot} when a snapshot identified by `id` is created."
									},
									"eventSelector": "8030e83b04d87bef53480e26263266d6ca66863aa8506aca6f2559d18aa1cb67",
									"id": 1760,
									"name": "Snapshot",
									"nameLocation": "3674:8:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1759,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1758,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "3691:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1760,
												"src": "3683:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1757,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3683:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3682:12:10"
									},
									"src": "3668:27:10"
								},
								{
									"body": {
										"id": 1782,
										"nodeType": "Block",
										"src": "4858:161:10",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 1766,
															"name": "_currentSnapshotId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1755,
															"src": "4868:18:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$2567_storage",
																"typeString": "struct CountersUpgradeable.Counter storage ref"
															}
														},
														"id": 1768,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4887:9:10",
														"memberName": "increment",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2593,
														"src": "4868:28:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Counter_$2567_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$2567_storage_ptr_$",
															"typeString": "function (struct CountersUpgradeable.Counter storage pointer)"
														}
													},
													"id": 1769,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4868:30:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1770,
												"nodeType": "ExpressionStatement",
												"src": "4868:30:10"
											},
											{
												"assignments": [
													1772
												],
												"declarations": [
													{
														"constant": false,
														"id": 1772,
														"mutability": "mutable",
														"name": "currentId",
														"nameLocation": "4917:9:10",
														"nodeType": "VariableDeclaration",
														"scope": 1782,
														"src": "4909:17:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1771,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4909:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1775,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1773,
														"name": "_getCurrentSnapshotId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1794,
														"src": "4929:21:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
															"typeString": "function () view returns (uint256)"
														}
													},
													"id": 1774,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4929:23:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4909:43:10"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1777,
															"name": "currentId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1772,
															"src": "4976:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1776,
														"name": "Snapshot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1760,
														"src": "4967:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1778,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4967:19:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1779,
												"nodeType": "EmitStatement",
												"src": "4962:24:10"
											},
											{
												"expression": {
													"id": 1780,
													"name": "currentId",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1772,
													"src": "5003:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1765,
												"id": 1781,
												"nodeType": "Return",
												"src": "4996:16:10"
											}
										]
									},
									"documentation": {
										"id": 1761,
										"nodeType": "StructuredDocumentation",
										"src": "3701:1096:10",
										"text": " @dev Creates a new snapshot and returns its snapshot id.\n Emits a {Snapshot} event that contains the same id.\n {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\n set of accounts, for example using {AccessControl}, or it may be open to the public.\n [WARNING]\n ====\n While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\n you must consider that it can potentially be used by attackers in two ways.\n First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\n logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\n specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\n section above.\n We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\n ===="
									},
									"id": 1783,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_snapshot",
									"nameLocation": "4811:9:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1762,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4820:2:10"
									},
									"returnParameters": {
										"id": 1765,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1764,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1783,
												"src": "4849:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1763,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4849:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4848:9:10"
									},
									"scope": 2054,
									"src": "4802:217:10",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1793,
										"nodeType": "Block",
										"src": "5153:52:10",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 1789,
															"name": "_currentSnapshotId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1755,
															"src": "5170:18:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$2567_storage",
																"typeString": "struct CountersUpgradeable.Counter storage ref"
															}
														},
														"id": 1790,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5189:7:10",
														"memberName": "current",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2579,
														"src": "5170:26:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$2567_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$2567_storage_ptr_$",
															"typeString": "function (struct CountersUpgradeable.Counter storage pointer) view returns (uint256)"
														}
													},
													"id": 1791,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5170:28:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1788,
												"id": 1792,
												"nodeType": "Return",
												"src": "5163:35:10"
											}
										]
									},
									"documentation": {
										"id": 1784,
										"nodeType": "StructuredDocumentation",
										"src": "5025:50:10",
										"text": " @dev Get the current snapshotId"
									},
									"id": 1794,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getCurrentSnapshotId",
									"nameLocation": "5089:21:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1785,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5110:2:10"
									},
									"returnParameters": {
										"id": 1788,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1787,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1794,
												"src": "5144:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1786,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5144:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5143:9:10"
									},
									"scope": 2054,
									"src": "5080:125:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1822,
										"nodeType": "Block",
										"src": "5408:166:10",
										"statements": [
											{
												"assignments": [
													1805,
													1807
												],
												"declarations": [
													{
														"constant": false,
														"id": 1805,
														"mutability": "mutable",
														"name": "snapshotted",
														"nameLocation": "5424:11:10",
														"nodeType": "VariableDeclaration",
														"scope": 1822,
														"src": "5419:16:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1804,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5419:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1807,
														"mutability": "mutable",
														"name": "value",
														"nameLocation": "5445:5:10",
														"nodeType": "VariableDeclaration",
														"scope": 1822,
														"src": "5437:13:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1806,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5437:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1814,
												"initialValue": {
													"arguments": [
														{
															"id": 1809,
															"name": "snapshotId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1799,
															"src": "5463:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"baseExpression": {
																"id": 1810,
																"name": "_accountBalanceSnapshots",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1749,
																"src": "5475:24:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Snapshots_$1744_storage_$",
																	"typeString": "mapping(address => struct ERC20SnapshotUpgradeable.Snapshots storage ref)"
																}
															},
															"id": 1812,
															"indexExpression": {
																"id": 1811,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1797,
																"src": "5500:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5475:33:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Snapshots_$1744_storage",
																"typeString": "struct ERC20SnapshotUpgradeable.Snapshots storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_struct$_Snapshots_$1744_storage",
																"typeString": "struct ERC20SnapshotUpgradeable.Snapshots storage ref"
															}
														],
														"id": 1808,
														"name": "_valueAt",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1960,
														"src": "5454:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_struct$_Snapshots_$1744_storage_ptr_$returns$_t_bool_$_t_uint256_$",
															"typeString": "function (uint256,struct ERC20SnapshotUpgradeable.Snapshots storage pointer) view returns (bool,uint256)"
														}
													},
													"id": 1813,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5454:55:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5418:91:10"
											},
											{
												"expression": {
													"condition": {
														"id": 1815,
														"name": "snapshotted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1805,
														"src": "5527:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"id": 1818,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1797,
																"src": "5559:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 1817,
															"name": "balanceOf",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1071,
															"src": "5549:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address) view returns (uint256)"
															}
														},
														"id": 1819,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5549:18:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1820,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "5527:40:10",
													"trueExpression": {
														"id": 1816,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1807,
														"src": "5541:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1803,
												"id": 1821,
												"nodeType": "Return",
												"src": "5520:47:10"
											}
										]
									},
									"documentation": {
										"id": 1795,
										"nodeType": "StructuredDocumentation",
										"src": "5211:96:10",
										"text": " @dev Retrieves the balance of `account` at the time `snapshotId` was created."
									},
									"functionSelector": "4ee2cd7e",
									"id": 1823,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOfAt",
									"nameLocation": "5321:11:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1800,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1797,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "5341:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1823,
												"src": "5333:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1796,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5333:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1799,
												"mutability": "mutable",
												"name": "snapshotId",
												"nameLocation": "5358:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 1823,
												"src": "5350:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1798,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5350:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5332:37:10"
									},
									"returnParameters": {
										"id": 1803,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1802,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1823,
												"src": "5399:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1801,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5399:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5398:9:10"
									},
									"scope": 2054,
									"src": "5312:262:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1846,
										"nodeType": "Block",
										"src": "5754:149:10",
										"statements": [
											{
												"assignments": [
													1832,
													1834
												],
												"declarations": [
													{
														"constant": false,
														"id": 1832,
														"mutability": "mutable",
														"name": "snapshotted",
														"nameLocation": "5770:11:10",
														"nodeType": "VariableDeclaration",
														"scope": 1846,
														"src": "5765:16:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1831,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5765:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1834,
														"mutability": "mutable",
														"name": "value",
														"nameLocation": "5791:5:10",
														"nodeType": "VariableDeclaration",
														"scope": 1846,
														"src": "5783:13:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1833,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5783:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1839,
												"initialValue": {
													"arguments": [
														{
															"id": 1836,
															"name": "snapshotId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1826,
															"src": "5809:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1837,
															"name": "_totalSupplySnapshots",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1752,
															"src": "5821:21:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Snapshots_$1744_storage",
																"typeString": "struct ERC20SnapshotUpgradeable.Snapshots storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_struct$_Snapshots_$1744_storage",
																"typeString": "struct ERC20SnapshotUpgradeable.Snapshots storage ref"
															}
														],
														"id": 1835,
														"name": "_valueAt",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1960,
														"src": "5800:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_struct$_Snapshots_$1744_storage_ptr_$returns$_t_bool_$_t_uint256_$",
															"typeString": "function (uint256,struct ERC20SnapshotUpgradeable.Snapshots storage pointer) view returns (bool,uint256)"
														}
													},
													"id": 1838,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5800:43:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5764:79:10"
											},
											{
												"expression": {
													"condition": {
														"id": 1840,
														"name": "snapshotted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1832,
														"src": "5861:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1842,
															"name": "totalSupply",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1057,
															"src": "5883:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																"typeString": "function () view returns (uint256)"
															}
														},
														"id": 1843,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5883:13:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1844,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "5861:35:10",
													"trueExpression": {
														"id": 1841,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1834,
														"src": "5875:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1830,
												"id": 1845,
												"nodeType": "Return",
												"src": "5854:42:10"
											}
										]
									},
									"documentation": {
										"id": 1824,
										"nodeType": "StructuredDocumentation",
										"src": "5580:88:10",
										"text": " @dev Retrieves the total supply at the time `snapshotId` was created."
									},
									"functionSelector": "981b24d0",
									"id": 1847,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupplyAt",
									"nameLocation": "5682:13:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1827,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1826,
												"mutability": "mutable",
												"name": "snapshotId",
												"nameLocation": "5704:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 1847,
												"src": "5696:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1825,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5696:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5695:20:10"
									},
									"returnParameters": {
										"id": 1830,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1829,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1847,
												"src": "5745:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1828,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5745:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5744:9:10"
									},
									"scope": 2054,
									"src": "5673:230:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1547
									],
									"body": {
										"id": 1904,
										"nodeType": "Block",
										"src": "6244:474:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1860,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1849,
															"src": "6281:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1861,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1851,
															"src": "6287:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1862,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1853,
															"src": "6291:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1857,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "6254:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_ERC20SnapshotUpgradeable_$2054_$",
																"typeString": "type(contract super ERC20SnapshotUpgradeable)"
															}
														},
														"id": 1859,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6260:20:10",
														"memberName": "_beforeTokenTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1547,
														"src": "6254:26:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1863,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6254:44:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1864,
												"nodeType": "ExpressionStatement",
												"src": "6254:44:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1870,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1865,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1849,
														"src": "6313:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1868,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6329:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1867,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6321:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1866,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6321:7:10",
																"typeDescriptions": {}
															}
														},
														"id": 1869,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6321:10:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6313:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 1884,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1879,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1851,
															"src": "6456:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1882,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6470:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1881,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6462:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1880,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6462:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1883,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6462:10:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "6456:16:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 1901,
														"nodeType": "Block",
														"src": "6595:117:10",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"id": 1894,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1849,
																			"src": "6656:4:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1893,
																		"name": "_updateAccountSnapshot",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1975,
																		"src": "6633:22:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
																			"typeString": "function (address)"
																		}
																	},
																	"id": 1895,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6633:28:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1896,
																"nodeType": "ExpressionStatement",
																"src": "6633:28:10"
															},
															{
																"expression": {
																	"arguments": [
																		{
																			"id": 1898,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1851,
																			"src": "6698:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1897,
																		"name": "_updateAccountSnapshot",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1975,
																		"src": "6675:22:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
																			"typeString": "function (address)"
																		}
																	},
																	"id": 1899,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6675:26:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1900,
																"nodeType": "ExpressionStatement",
																"src": "6675:26:10"
															}
														]
													},
													"id": 1902,
													"nodeType": "IfStatement",
													"src": "6452:260:10",
													"trueBody": {
														"id": 1892,
														"nodeType": "Block",
														"src": "6474:115:10",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"id": 1886,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1849,
																			"src": "6531:4:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1885,
																		"name": "_updateAccountSnapshot",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1975,
																		"src": "6508:22:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
																			"typeString": "function (address)"
																		}
																	},
																	"id": 1887,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6508:28:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1888,
																"nodeType": "ExpressionStatement",
																"src": "6508:28:10"
															},
															{
																"expression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1889,
																		"name": "_updateTotalSupplySnapshot",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1985,
																		"src": "6550:26:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
																			"typeString": "function ()"
																		}
																	},
																	"id": 1890,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6550:28:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1891,
																"nodeType": "ExpressionStatement",
																"src": "6550:28:10"
															}
														]
													}
												},
												"id": 1903,
												"nodeType": "IfStatement",
												"src": "6309:403:10",
												"trueBody": {
													"id": 1878,
													"nodeType": "Block",
													"src": "6333:113:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1872,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1851,
																		"src": "6390:2:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1871,
																	"name": "_updateAccountSnapshot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1975,
																	"src": "6367:22:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
																		"typeString": "function (address)"
																	}
																},
																"id": 1873,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6367:26:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1874,
															"nodeType": "ExpressionStatement",
															"src": "6367:26:10"
														},
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1875,
																	"name": "_updateTotalSupplySnapshot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1985,
																	"src": "6407:26:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
																		"typeString": "function ()"
																	}
																},
																"id": 1876,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6407:28:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1877,
															"nodeType": "ExpressionStatement",
															"src": "6407:28:10"
														}
													]
												}
											}
										]
									},
									"id": 1905,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "6125:20:10",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1855,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "6235:8:10"
									},
									"parameters": {
										"id": 1854,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1849,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6163:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1905,
												"src": "6155:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1848,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6155:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1851,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6185:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1905,
												"src": "6177:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1850,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6177:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1853,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6205:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1905,
												"src": "6197:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1852,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6197:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6145:72:10"
									},
									"returnParameters": {
										"id": 1856,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6244:0:10"
									},
									"scope": 2054,
									"src": "6116:602:10",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1959,
										"nodeType": "Block",
										"src": "6828:1490:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1920,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1918,
																"name": "snapshotId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1907,
																"src": "6846:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1919,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6859:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6846:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433230536e617073686f743a2069642069732030",
															"id": 1921,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6862:24:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d85a3cdc203c5cdc6dda93c12cd017145671a0ed9058a16c7aa00b8398a4a8e6",
																"typeString": "literal_string \"ERC20Snapshot: id is 0\""
															},
															"value": "ERC20Snapshot: id is 0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d85a3cdc203c5cdc6dda93c12cd017145671a0ed9058a16c7aa00b8398a4a8e6",
																"typeString": "literal_string \"ERC20Snapshot: id is 0\""
															}
														],
														"id": 1917,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6838:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1922,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6838:49:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1923,
												"nodeType": "ExpressionStatement",
												"src": "6838:49:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1928,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1925,
																"name": "snapshotId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1907,
																"src": "6905:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1926,
																	"name": "_getCurrentSnapshotId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1794,
																	"src": "6919:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1927,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6919:23:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6905:37:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433230536e617073686f743a206e6f6e6578697374656e74206964",
															"id": 1929,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6944:31:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_031e0835d070e7bbd2c8dcce466eadb8c6b9fd22432b0357ab8c37bd9a385940",
																"typeString": "literal_string \"ERC20Snapshot: nonexistent id\""
															},
															"value": "ERC20Snapshot: nonexistent id"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_031e0835d070e7bbd2c8dcce466eadb8c6b9fd22432b0357ab8c37bd9a385940",
																"typeString": "literal_string \"ERC20Snapshot: nonexistent id\""
															}
														],
														"id": 1924,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6897:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1930,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6897:79:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1931,
												"nodeType": "ExpressionStatement",
												"src": "6897:79:10"
											},
											{
												"assignments": [
													1933
												],
												"declarations": [
													{
														"constant": false,
														"id": 1933,
														"mutability": "mutable",
														"name": "index",
														"nameLocation": "8107:5:10",
														"nodeType": "VariableDeclaration",
														"scope": 1959,
														"src": "8099:13:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1932,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8099:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1939,
												"initialValue": {
													"arguments": [
														{
															"id": 1937,
															"name": "snapshotId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1907,
															"src": "8144:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"expression": {
																"id": 1934,
																"name": "snapshots",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1910,
																"src": "8115:9:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Snapshots_$1744_storage_ptr",
																	"typeString": "struct ERC20SnapshotUpgradeable.Snapshots storage pointer"
																}
															},
															"id": 1935,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "8125:3:10",
															"memberName": "ids",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1740,
															"src": "8115:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																"typeString": "uint256[] storage ref"
															}
														},
														"id": 1936,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8129:14:10",
														"memberName": "findUpperBound",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2455,
														"src": "8115:28:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$_t_uint256_$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
															"typeString": "function (uint256[] storage pointer,uint256) view returns (uint256)"
														}
													},
													"id": 1938,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8115:40:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8099:56:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1944,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1940,
														"name": "index",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1933,
														"src": "8170:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"expression": {
																"id": 1941,
																"name": "snapshots",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1910,
																"src": "8179:9:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Snapshots_$1744_storage_ptr",
																	"typeString": "struct ERC20SnapshotUpgradeable.Snapshots storage pointer"
																}
															},
															"id": 1942,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "8189:3:10",
															"memberName": "ids",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1740,
															"src": "8179:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																"typeString": "uint256[] storage ref"
															}
														},
														"id": 1943,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8193:6:10",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8179:20:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8170:29:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1957,
													"nodeType": "Block",
													"src": "8249:63:10",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 1950,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8271:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"baseExpression": {
																			"expression": {
																				"id": 1951,
																				"name": "snapshots",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1910,
																				"src": "8277:9:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Snapshots_$1744_storage_ptr",
																					"typeString": "struct ERC20SnapshotUpgradeable.Snapshots storage pointer"
																				}
																			},
																			"id": 1952,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "8287:6:10",
																			"memberName": "values",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1743,
																			"src": "8277:16:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																				"typeString": "uint256[] storage ref"
																			}
																		},
																		"id": 1954,
																		"indexExpression": {
																			"id": 1953,
																			"name": "index",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1933,
																			"src": "8294:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "8277:23:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1955,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8270:31:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																	"typeString": "tuple(bool,uint256)"
																}
															},
															"functionReturnParameters": 1916,
															"id": 1956,
															"nodeType": "Return",
															"src": "8263:38:10"
														}
													]
												},
												"id": 1958,
												"nodeType": "IfStatement",
												"src": "8166:146:10",
												"trueBody": {
													"id": 1949,
													"nodeType": "Block",
													"src": "8201:42:10",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1945,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8223:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1946,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8230:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1947,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8222:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1916,
															"id": 1948,
															"nodeType": "Return",
															"src": "8215:17:10"
														}
													]
												}
											}
										]
									},
									"id": 1960,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_valueAt",
									"nameLocation": "6733:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1911,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1907,
												"mutability": "mutable",
												"name": "snapshotId",
												"nameLocation": "6750:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 1960,
												"src": "6742:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1906,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6742:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1910,
												"mutability": "mutable",
												"name": "snapshots",
												"nameLocation": "6780:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 1960,
												"src": "6762:27:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Snapshots_$1744_storage_ptr",
													"typeString": "struct ERC20SnapshotUpgradeable.Snapshots"
												},
												"typeName": {
													"id": 1909,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1908,
														"name": "Snapshots",
														"nameLocations": [
															"6762:9:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1744,
														"src": "6762:9:10"
													},
													"referencedDeclaration": 1744,
													"src": "6762:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Snapshots_$1744_storage_ptr",
														"typeString": "struct ERC20SnapshotUpgradeable.Snapshots"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6741:49:10"
									},
									"returnParameters": {
										"id": 1916,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1913,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1960,
												"src": "6813:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1912,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6813:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1915,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1960,
												"src": "6819:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1914,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6819:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6812:15:10"
									},
									"scope": 2054,
									"src": "6724:1594:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1974,
										"nodeType": "Block",
										"src": "8381:87:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"baseExpression": {
																"id": 1966,
																"name": "_accountBalanceSnapshots",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1749,
																"src": "8407:24:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Snapshots_$1744_storage_$",
																	"typeString": "mapping(address => struct ERC20SnapshotUpgradeable.Snapshots storage ref)"
																}
															},
															"id": 1968,
															"indexExpression": {
																"id": 1967,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1962,
																"src": "8432:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "8407:33:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Snapshots_$1744_storage",
																"typeString": "struct ERC20SnapshotUpgradeable.Snapshots storage ref"
															}
														},
														{
															"arguments": [
																{
																	"id": 1970,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1962,
																	"src": "8452:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1969,
																"name": "balanceOf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1071,
																"src": "8442:9:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address) view returns (uint256)"
																}
															},
															"id": 1971,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8442:18:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Snapshots_$1744_storage",
																"typeString": "struct ERC20SnapshotUpgradeable.Snapshots storage ref"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1965,
														"name": "_updateSnapshot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2023,
														"src": "8391:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Snapshots_$1744_storage_ptr_$_t_uint256_$returns$__$",
															"typeString": "function (struct ERC20SnapshotUpgradeable.Snapshots storage pointer,uint256)"
														}
													},
													"id": 1972,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8391:70:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1973,
												"nodeType": "ExpressionStatement",
												"src": "8391:70:10"
											}
										]
									},
									"id": 1975,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_updateAccountSnapshot",
									"nameLocation": "8333:22:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1963,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1962,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8364:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1975,
												"src": "8356:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1961,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8356:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8355:17:10"
									},
									"returnParameters": {
										"id": 1964,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8381:0:10"
									},
									"scope": 2054,
									"src": "8324:144:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1984,
										"nodeType": "Block",
										"src": "8520:70:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1979,
															"name": "_totalSupplySnapshots",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1752,
															"src": "8546:21:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Snapshots_$1744_storage",
																"typeString": "struct ERC20SnapshotUpgradeable.Snapshots storage ref"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1980,
																"name": "totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1057,
																"src": "8569:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																	"typeString": "function () view returns (uint256)"
																}
															},
															"id": 1981,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8569:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Snapshots_$1744_storage",
																"typeString": "struct ERC20SnapshotUpgradeable.Snapshots storage ref"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1978,
														"name": "_updateSnapshot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2023,
														"src": "8530:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Snapshots_$1744_storage_ptr_$_t_uint256_$returns$__$",
															"typeString": "function (struct ERC20SnapshotUpgradeable.Snapshots storage pointer,uint256)"
														}
													},
													"id": 1982,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8530:53:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1983,
												"nodeType": "ExpressionStatement",
												"src": "8530:53:10"
											}
										]
									},
									"id": 1985,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_updateTotalSupplySnapshot",
									"nameLocation": "8483:26:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1976,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8509:2:10"
									},
									"returnParameters": {
										"id": 1977,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8520:0:10"
									},
									"scope": 2054,
									"src": "8474:116:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2022,
										"nodeType": "Block",
										"src": "8680:220:10",
										"statements": [
											{
												"assignments": [
													1994
												],
												"declarations": [
													{
														"constant": false,
														"id": 1994,
														"mutability": "mutable",
														"name": "currentId",
														"nameLocation": "8698:9:10",
														"nodeType": "VariableDeclaration",
														"scope": 2022,
														"src": "8690:17:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1993,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8690:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1997,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1995,
														"name": "_getCurrentSnapshotId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1794,
														"src": "8710:21:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
															"typeString": "function () view returns (uint256)"
														}
													},
													"id": 1996,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8710:23:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8690:43:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2003,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 1999,
																	"name": "snapshots",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1988,
																	"src": "8763:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Snapshots_$1744_storage_ptr",
																		"typeString": "struct ERC20SnapshotUpgradeable.Snapshots storage pointer"
																	}
																},
																"id": 2000,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "8773:3:10",
																"memberName": "ids",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1740,
																"src": "8763:13:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																	"typeString": "uint256[] storage ref"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																	"typeString": "uint256[] storage ref"
																}
															],
															"id": 1998,
															"name": "_lastSnapshotId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2048,
															"src": "8747:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_array$_t_uint256_$dyn_storage_ptr_$returns$_t_uint256_$",
																"typeString": "function (uint256[] storage pointer) view returns (uint256)"
															}
														},
														"id": 2001,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8747:30:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 2002,
														"name": "currentId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1994,
														"src": "8780:9:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8747:42:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2021,
												"nodeType": "IfStatement",
												"src": "8743:151:10",
												"trueBody": {
													"id": 2020,
													"nodeType": "Block",
													"src": "8791:103:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2009,
																		"name": "currentId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1994,
																		"src": "8824:9:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"expression": {
																			"id": 2004,
																			"name": "snapshots",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1988,
																			"src": "8805:9:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Snapshots_$1744_storage_ptr",
																				"typeString": "struct ERC20SnapshotUpgradeable.Snapshots storage pointer"
																			}
																		},
																		"id": 2007,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "8815:3:10",
																		"memberName": "ids",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1740,
																		"src": "8805:13:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																			"typeString": "uint256[] storage ref"
																		}
																	},
																	"id": 2008,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "8819:4:10",
																	"memberName": "push",
																	"nodeType": "MemberAccess",
																	"src": "8805:18:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
																		"typeString": "function (uint256[] storage pointer,uint256)"
																	}
																},
																"id": 2010,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8805:29:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2011,
															"nodeType": "ExpressionStatement",
															"src": "8805:29:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2017,
																		"name": "currentValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1990,
																		"src": "8870:12:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"expression": {
																			"id": 2012,
																			"name": "snapshots",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1988,
																			"src": "8848:9:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Snapshots_$1744_storage_ptr",
																				"typeString": "struct ERC20SnapshotUpgradeable.Snapshots storage pointer"
																			}
																		},
																		"id": 2015,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "8858:6:10",
																		"memberName": "values",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1743,
																		"src": "8848:16:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																			"typeString": "uint256[] storage ref"
																		}
																	},
																	"id": 2016,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "8865:4:10",
																	"memberName": "push",
																	"nodeType": "MemberAccess",
																	"src": "8848:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
																		"typeString": "function (uint256[] storage pointer,uint256)"
																	}
																},
																"id": 2018,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8848:35:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2019,
															"nodeType": "ExpressionStatement",
															"src": "8848:35:10"
														}
													]
												}
											}
										]
									},
									"id": 2023,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_updateSnapshot",
									"nameLocation": "8605:15:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1991,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1988,
												"mutability": "mutable",
												"name": "snapshots",
												"nameLocation": "8639:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 2023,
												"src": "8621:27:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Snapshots_$1744_storage_ptr",
													"typeString": "struct ERC20SnapshotUpgradeable.Snapshots"
												},
												"typeName": {
													"id": 1987,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1986,
														"name": "Snapshots",
														"nameLocations": [
															"8621:9:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1744,
														"src": "8621:9:10"
													},
													"referencedDeclaration": 1744,
													"src": "8621:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Snapshots_$1744_storage_ptr",
														"typeString": "struct ERC20SnapshotUpgradeable.Snapshots"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1990,
												"mutability": "mutable",
												"name": "currentValue",
												"nameLocation": "8658:12:10",
												"nodeType": "VariableDeclaration",
												"scope": 2023,
												"src": "8650:20:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1989,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8650:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8620:51:10"
									},
									"returnParameters": {
										"id": 1992,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8680:0:10"
									},
									"scope": 2054,
									"src": "8596:304:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2047,
										"nodeType": "Block",
										"src": "8985:127:10",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2034,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 2031,
															"name": "ids",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2026,
															"src": "8999:3:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																"typeString": "uint256[] storage pointer"
															}
														},
														"id": 2032,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "9003:6:10",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8999:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2033,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9013:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8999:15:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2045,
													"nodeType": "Block",
													"src": "9055:51:10",
													"statements": [
														{
															"expression": {
																"baseExpression": {
																	"id": 2038,
																	"name": "ids",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2026,
																	"src": "9076:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																		"typeString": "uint256[] storage pointer"
																	}
																},
																"id": 2043,
																"indexExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2042,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 2039,
																			"name": "ids",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2026,
																			"src": "9080:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																				"typeString": "uint256[] storage pointer"
																			}
																		},
																		"id": 2040,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "9084:6:10",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "9080:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 2041,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9093:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "9080:14:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "9076:19:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 2030,
															"id": 2044,
															"nodeType": "Return",
															"src": "9069:26:10"
														}
													]
												},
												"id": 2046,
												"nodeType": "IfStatement",
												"src": "8995:111:10",
												"trueBody": {
													"id": 2037,
													"nodeType": "Block",
													"src": "9016:33:10",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 2035,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9037:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 2030,
															"id": 2036,
															"nodeType": "Return",
															"src": "9030:8:10"
														}
													]
												}
											}
										]
									},
									"id": 2048,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_lastSnapshotId",
									"nameLocation": "8915:15:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2027,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2026,
												"mutability": "mutable",
												"name": "ids",
												"nameLocation": "8949:3:10",
												"nodeType": "VariableDeclaration",
												"scope": 2048,
												"src": "8931:21:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 2024,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "8931:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2025,
													"nodeType": "ArrayTypeName",
													"src": "8931:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8930:23:10"
									},
									"returnParameters": {
										"id": 2030,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2029,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2048,
												"src": "8976:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2028,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8976:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8975:9:10"
									},
									"scope": 2054,
									"src": "8906:206:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 2049,
										"nodeType": "StructuredDocumentation",
										"src": "9118:254:10",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 2053,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "9397:5:10",
									"nodeType": "VariableDeclaration",
									"scope": 2054,
									"src": "9377:25:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$46_storage",
										"typeString": "uint256[46]"
									},
									"typeName": {
										"baseType": {
											"id": 2050,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "9377:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 2052,
										"length": {
											"hexValue": "3436",
											"id": 2051,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "9385:2:10",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_46_by_1",
												"typeString": "int_const 46"
											},
											"value": "46"
										},
										"nodeType": "ArrayTypeName",
										"src": "9377:11:10",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$46_storage_ptr",
											"typeString": "uint256[46]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 2055,
							"src": "2484:6921:10",
							"usedErrors": []
						}
					],
					"src": "124:9282:10"
				},
				"id": 10
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
					"exportedSymbols": {
						"IERC20MetadataUpgradeable": [
							2079
						],
						"IERC20Upgradeable": [
							1642
						]
					},
					"id": 2080,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2056,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "110:23:11"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/IERC20Upgradeable.sol",
							"file": "../IERC20Upgradeable.sol",
							"id": 2057,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2080,
							"sourceUnit": 1643,
							"src": "135:34:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2059,
										"name": "IERC20Upgradeable",
										"nameLocations": [
											"327:17:11"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1642,
										"src": "327:17:11"
									},
									"id": 2060,
									"nodeType": "InheritanceSpecifier",
									"src": "327:17:11"
								}
							],
							"canonicalName": "IERC20MetadataUpgradeable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2058,
								"nodeType": "StructuredDocumentation",
								"src": "171:116:11",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 2079,
							"linearizedBaseContracts": [
								2079,
								1642
							],
							"name": "IERC20MetadataUpgradeable",
							"nameLocation": "298:25:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2061,
										"nodeType": "StructuredDocumentation",
										"src": "351:54:11",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 2066,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "419:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2062,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "423:2:11"
									},
									"returnParameters": {
										"id": 2065,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2064,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2066,
												"src": "449:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2063,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "449:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "448:15:11"
									},
									"scope": 2079,
									"src": "410:54:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2067,
										"nodeType": "StructuredDocumentation",
										"src": "470:56:11",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 2072,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "540:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2068,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "546:2:11"
									},
									"returnParameters": {
										"id": 2071,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2070,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2072,
												"src": "572:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2069,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "572:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "571:15:11"
									},
									"scope": 2079,
									"src": "531:56:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2073,
										"nodeType": "StructuredDocumentation",
										"src": "593:65:11",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 2078,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "672:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2074,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "680:2:11"
									},
									"returnParameters": {
										"id": 2077,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2076,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2078,
												"src": "706:5:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2075,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "706:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "705:7:11"
									},
									"scope": 2079,
									"src": "663:50:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2080,
							"src": "288:427:11",
							"usedErrors": []
						}
					],
					"src": "110:606:11"
				},
				"id": 11
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/utils/AddressUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2363
						]
					},
					"id": 2364,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2081,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:12"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "AddressUpgradeable",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2082,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:12",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 2363,
							"linearizedBaseContracts": [
								2363
							],
							"name": "AddressUpgradeable",
							"nameLocation": "202:18:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2096,
										"nodeType": "Block",
										"src": "1252:254:12",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2094,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 2090,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2085,
																"src": "1476:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 2091,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1484:4:12",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1476:12:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2092,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1489:6:12",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1476:19:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2093,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1498:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1476:23:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2089,
												"id": 2095,
												"nodeType": "Return",
												"src": "1469:30:12"
											}
										]
									},
									"documentation": {
										"id": 2083,
										"nodeType": "StructuredDocumentation",
										"src": "227:954:12",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 2097,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1195:10:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2086,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2085,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1214:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2097,
												"src": "1206:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2084,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1206:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1205:17:12"
									},
									"returnParameters": {
										"id": 2089,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2088,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2097,
												"src": "1246:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2087,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1246:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1245:6:12"
									},
									"scope": 2363,
									"src": "1186:320:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2130,
										"nodeType": "Block",
										"src": "2494:241:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2112,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 2108,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2520:4:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$2363",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$2363",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 2107,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2512:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2106,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2512:7:12",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2109,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2512:13:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 2110,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2526:7:12",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2512:21:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 2111,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2102,
																"src": "2537:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2512:31:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 2113,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2545:31:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 2105,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2504:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2114,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2504:73:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2115,
												"nodeType": "ExpressionStatement",
												"src": "2504:73:12"
											},
											{
												"assignments": [
													2117,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 2117,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2594:7:12",
														"nodeType": "VariableDeclaration",
														"scope": 2130,
														"src": "2589:12:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2116,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2589:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 2124,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 2122,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2637:2:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 2118,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2100,
																"src": "2607:9:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 2119,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2617:4:12",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2607:14:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 2121,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 2120,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2102,
																"src": "2629:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2607:29:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2607:33:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2588:52:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2126,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2117,
															"src": "2658:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 2127,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2667:60:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 2125,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2650:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2128,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2650:78:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2129,
												"nodeType": "ExpressionStatement",
												"src": "2650:78:12"
											}
										]
									},
									"documentation": {
										"id": 2098,
										"nodeType": "StructuredDocumentation",
										"src": "1512:906:12",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 2131,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2432:9:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2100,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2458:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 2131,
												"src": "2442:25:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 2099,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2442:15:12",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2102,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2477:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 2131,
												"src": "2469:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2101,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2469:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2441:43:12"
									},
									"returnParameters": {
										"id": 2104,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2494:0:12"
									},
									"scope": 2363,
									"src": "2423:312:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2148,
										"nodeType": "Block",
										"src": "3566:96:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2142,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2134,
															"src": "3605:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2143,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2136,
															"src": "3613:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 2144,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3619:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 2145,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3622:32:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 2141,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2189,
															2233
														],
														"referencedDeclaration": 2233,
														"src": "3583:21:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 2146,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3583:72:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2140,
												"id": 2147,
												"nodeType": "Return",
												"src": "3576:79:12"
											}
										]
									},
									"documentation": {
										"id": 2132,
										"nodeType": "StructuredDocumentation",
										"src": "2741:731:12",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 2149,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3486:12:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2137,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2134,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3507:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 2149,
												"src": "3499:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2133,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3499:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2136,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3528:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2149,
												"src": "3515:17:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2135,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3515:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3498:35:12"
									},
									"returnParameters": {
										"id": 2140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2139,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2149,
												"src": "3552:12:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2138,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3552:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3551:14:12"
									},
									"scope": 2363,
									"src": "3477:185:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2168,
										"nodeType": "Block",
										"src": "4031:76:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2162,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2152,
															"src": "4070:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2163,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2154,
															"src": "4078:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 2164,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4084:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 2165,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2156,
															"src": "4087:12:12",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 2161,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2189,
															2233
														],
														"referencedDeclaration": 2233,
														"src": "4048:21:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 2166,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4048:52:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2160,
												"id": 2167,
												"nodeType": "Return",
												"src": "4041:59:12"
											}
										]
									},
									"documentation": {
										"id": 2150,
										"nodeType": "StructuredDocumentation",
										"src": "3668:211:12",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 2169,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3893:12:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2152,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3923:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 2169,
												"src": "3915:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2151,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3915:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2154,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3952:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2169,
												"src": "3939:17:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2153,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3939:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2156,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3980:12:12",
												"nodeType": "VariableDeclaration",
												"scope": 2169,
												"src": "3966:26:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2155,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3966:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3905:93:12"
									},
									"returnParameters": {
										"id": 2160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2159,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2169,
												"src": "4017:12:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2158,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4017:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4016:14:12"
									},
									"scope": 2363,
									"src": "3884:223:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2188,
										"nodeType": "Block",
										"src": "4612:111:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2182,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2172,
															"src": "4651:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2183,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2174,
															"src": "4659:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 2184,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2176,
															"src": "4665:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 2185,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4672:43:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 2181,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2189,
															2233
														],
														"referencedDeclaration": 2233,
														"src": "4629:21:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 2186,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4629:87:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2180,
												"id": 2187,
												"nodeType": "Return",
												"src": "4622:94:12"
											}
										]
									},
									"documentation": {
										"id": 2170,
										"nodeType": "StructuredDocumentation",
										"src": "4113:351:12",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 2189,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4478:21:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2172,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4517:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 2189,
												"src": "4509:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2171,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4509:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2174,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4546:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2189,
												"src": "4533:17:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2173,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4533:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2176,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4568:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2189,
												"src": "4560:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2175,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4560:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4499:80:12"
									},
									"returnParameters": {
										"id": 2180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2179,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2189,
												"src": "4598:12:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2178,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4598:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4597:14:12"
									},
									"scope": 2363,
									"src": "4469:254:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2232,
										"nodeType": "Block",
										"src": "5150:267:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2210,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 2206,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5176:4:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$2363",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$2363",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 2205,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5168:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2204,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5168:7:12",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2207,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5168:13:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 2208,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5182:7:12",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5168:21:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 2209,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2196,
																"src": "5193:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5168:30:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 2211,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5200:40:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 2203,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5160:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5160:81:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2213,
												"nodeType": "ExpressionStatement",
												"src": "5160:81:12"
											},
											{
												"assignments": [
													2215,
													2217
												],
												"declarations": [
													{
														"constant": false,
														"id": 2215,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5257:7:12",
														"nodeType": "VariableDeclaration",
														"scope": 2232,
														"src": "5252:12:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2214,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5252:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2217,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5279:10:12",
														"nodeType": "VariableDeclaration",
														"scope": 2232,
														"src": "5266:23:12",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2216,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5266:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2224,
												"initialValue": {
													"arguments": [
														{
															"id": 2222,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2194,
															"src": "5319:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 2218,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2192,
																"src": "5293:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 2219,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5300:4:12",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5293:11:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 2221,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 2220,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2196,
																"src": "5312:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5293:25:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2223,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5293:31:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5251:73:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2226,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2192,
															"src": "5368:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2227,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2215,
															"src": "5376:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2228,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2217,
															"src": "5385:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 2229,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2198,
															"src": "5397:12:12",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 2225,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2318,
														"src": "5341:26:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 2230,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5341:69:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2202,
												"id": 2231,
												"nodeType": "Return",
												"src": "5334:76:12"
											}
										]
									},
									"documentation": {
										"id": 2190,
										"nodeType": "StructuredDocumentation",
										"src": "4729:237:12",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 2233,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4980:21:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2192,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5019:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 2233,
												"src": "5011:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2191,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5011:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2194,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5048:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2233,
												"src": "5035:17:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2193,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5035:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2196,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5070:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2233,
												"src": "5062:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2195,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5062:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2198,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5099:12:12",
												"nodeType": "VariableDeclaration",
												"scope": 2233,
												"src": "5085:26:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2197,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5085:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5001:116:12"
									},
									"returnParameters": {
										"id": 2202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2201,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2233,
												"src": "5136:12:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2200,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5136:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5135:14:12"
									},
									"scope": 2363,
									"src": "4971:446:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2249,
										"nodeType": "Block",
										"src": "5694:97:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2244,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2236,
															"src": "5730:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2245,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2238,
															"src": "5738:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 2246,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5744:39:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 2243,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2250,
															2279
														],
														"referencedDeclaration": 2279,
														"src": "5711:18:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 2247,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5711:73:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2242,
												"id": 2248,
												"nodeType": "Return",
												"src": "5704:80:12"
											}
										]
									},
									"documentation": {
										"id": 2234,
										"nodeType": "StructuredDocumentation",
										"src": "5423:166:12",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 2250,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5603:18:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2236,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5630:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 2250,
												"src": "5622:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2235,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5622:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2238,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5651:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2250,
												"src": "5638:17:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2237,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5638:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5621:35:12"
									},
									"returnParameters": {
										"id": 2242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2241,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2250,
												"src": "5680:12:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2240,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5680:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5679:14:12"
									},
									"scope": 2363,
									"src": "5594:197:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2278,
										"nodeType": "Block",
										"src": "6133:168:12",
										"statements": [
											{
												"assignments": [
													2263,
													2265
												],
												"declarations": [
													{
														"constant": false,
														"id": 2263,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6149:7:12",
														"nodeType": "VariableDeclaration",
														"scope": 2278,
														"src": "6144:12:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2262,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6144:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2265,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6171:10:12",
														"nodeType": "VariableDeclaration",
														"scope": 2278,
														"src": "6158:23:12",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2264,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6158:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2270,
												"initialValue": {
													"arguments": [
														{
															"id": 2268,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2255,
															"src": "6203:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2266,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2253,
															"src": "6185:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2267,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6192:10:12",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6185:17:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 2269,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6185:23:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6143:65:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2272,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2253,
															"src": "6252:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2273,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2263,
															"src": "6260:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2274,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2265,
															"src": "6269:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 2275,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2257,
															"src": "6281:12:12",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 2271,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2318,
														"src": "6225:26:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 2276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6225:69:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2261,
												"id": 2277,
												"nodeType": "Return",
												"src": "6218:76:12"
											}
										]
									},
									"documentation": {
										"id": 2251,
										"nodeType": "StructuredDocumentation",
										"src": "5797:173:12",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 2279,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5984:18:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2258,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2253,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6020:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 2279,
												"src": "6012:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2252,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6012:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2255,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6049:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 2279,
												"src": "6036:17:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2254,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6036:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2257,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6077:12:12",
												"nodeType": "VariableDeclaration",
												"scope": 2279,
												"src": "6063:26:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2256,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6063:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6002:93:12"
									},
									"returnParameters": {
										"id": 2261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2260,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2279,
												"src": "6119:12:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2259,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6119:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6118:14:12"
									},
									"scope": 2363,
									"src": "5975:326:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2317,
										"nodeType": "Block",
										"src": "6783:434:12",
										"statements": [
											{
												"condition": {
													"id": 2293,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2284,
													"src": "6797:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2315,
													"nodeType": "Block",
													"src": "7153:58:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2311,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2286,
																		"src": "7175:10:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 2312,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2288,
																		"src": "7187:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2310,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2362,
																	"src": "7167:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 2313,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7167:33:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2314,
															"nodeType": "ExpressionStatement",
															"src": "7167:33:12"
														}
													]
												},
												"id": 2316,
												"nodeType": "IfStatement",
												"src": "6793:418:12",
												"trueBody": {
													"id": 2309,
													"nodeType": "Block",
													"src": "6806:341:12",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2297,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 2294,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2286,
																		"src": "6824:10:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 2295,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "6835:6:12",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "6824:17:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2296,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6845:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "6824:22:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2306,
															"nodeType": "IfStatement",
															"src": "6820:286:12",
															"trueBody": {
																"id": 2305,
																"nodeType": "Block",
																"src": "6848:258:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 2300,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2282,
																							"src": "7050:6:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 2299,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2097,
																						"src": "7039:10:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 2301,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "7039:18:12",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 2302,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7059:31:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 2298,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "7031:7:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 2303,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7031:60:12",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 2304,
																		"nodeType": "ExpressionStatement",
																		"src": "7031:60:12"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 2307,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2286,
																"src": "7126:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 2292,
															"id": 2308,
															"nodeType": "Return",
															"src": "7119:17:12"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2280,
										"nodeType": "StructuredDocumentation",
										"src": "6307:277:12",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 2318,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "6598:26:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2282,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6642:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 2318,
												"src": "6634:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2281,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6634:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2284,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "6663:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2318,
												"src": "6658:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2283,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6658:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2286,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "6693:10:12",
												"nodeType": "VariableDeclaration",
												"scope": 2318,
												"src": "6680:23:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2285,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6680:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2288,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6727:12:12",
												"nodeType": "VariableDeclaration",
												"scope": 2318,
												"src": "6713:26:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2287,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6713:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6624:121:12"
									},
									"returnParameters": {
										"id": 2292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2291,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2318,
												"src": "6769:12:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2290,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6769:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6768:14:12"
									},
									"scope": 2363,
									"src": "6589:628:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2341,
										"nodeType": "Block",
										"src": "7598:135:12",
										"statements": [
											{
												"condition": {
													"id": 2330,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2321,
													"src": "7612:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2339,
													"nodeType": "Block",
													"src": "7669:58:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2335,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2323,
																		"src": "7691:10:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 2336,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2325,
																		"src": "7703:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2334,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2362,
																	"src": "7683:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 2337,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7683:33:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2338,
															"nodeType": "ExpressionStatement",
															"src": "7683:33:12"
														}
													]
												},
												"id": 2340,
												"nodeType": "IfStatement",
												"src": "7608:119:12",
												"trueBody": {
													"id": 2333,
													"nodeType": "Block",
													"src": "7621:42:12",
													"statements": [
														{
															"expression": {
																"id": 2331,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2323,
																"src": "7642:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 2329,
															"id": 2332,
															"nodeType": "Return",
															"src": "7635:17:12"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2319,
										"nodeType": "StructuredDocumentation",
										"src": "7223:210:12",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 2342,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "7447:16:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2321,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7478:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2342,
												"src": "7473:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2320,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7473:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2323,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7508:10:12",
												"nodeType": "VariableDeclaration",
												"scope": 2342,
												"src": "7495:23:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2322,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7495:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2325,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7542:12:12",
												"nodeType": "VariableDeclaration",
												"scope": 2342,
												"src": "7528:26:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2324,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7528:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7463:97:12"
									},
									"returnParameters": {
										"id": 2329,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2328,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2342,
												"src": "7584:12:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2327,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7584:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7583:14:12"
									},
									"scope": 2363,
									"src": "7438:295:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2361,
										"nodeType": "Block",
										"src": "7822:457:12",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2352,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 2349,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2344,
															"src": "7898:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2350,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7909:6:12",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "7898:17:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2351,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7918:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7898:21:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2359,
													"nodeType": "Block",
													"src": "8228:45:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2356,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2346,
																		"src": "8249:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2355,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "8242:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 2357,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8242:20:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2358,
															"nodeType": "ExpressionStatement",
															"src": "8242:20:12"
														}
													]
												},
												"id": 2360,
												"nodeType": "IfStatement",
												"src": "7894:379:12",
												"trueBody": {
													"id": 2354,
													"nodeType": "Block",
													"src": "7921:301:12",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "8079:133:12",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "8097:40:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "8126:10:12"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "8120:5:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8120:17:12"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "8101:15:12",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "8165:2:12",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "8169:10:12"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "8161:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8161:19:12"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "8182:15:12"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8154:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8154:44:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8154:44:12"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "london",
															"externalReferences": [
																{
																	"declaration": 2344,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "8126:10:12",
																	"valueSize": 1
																},
																{
																	"declaration": 2344,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "8169:10:12",
																	"valueSize": 1
																}
															],
															"id": 2353,
															"nodeType": "InlineAssembly",
															"src": "8070:142:12"
														}
													]
												}
											}
										]
									},
									"id": 2362,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "7748:7:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2347,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2344,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7769:10:12",
												"nodeType": "VariableDeclaration",
												"scope": 2362,
												"src": "7756:23:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2343,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7756:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2346,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7795:12:12",
												"nodeType": "VariableDeclaration",
												"scope": 2362,
												"src": "7781:26:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2345,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7781:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7755:53:12"
									},
									"returnParameters": {
										"id": 2348,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7822:0:12"
									},
									"scope": 2363,
									"src": "7739:540:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 2364,
							"src": "194:8087:12",
							"usedErrors": []
						}
					],
					"src": "101:8181:12"
				},
				"id": 12
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/utils/ArraysUpgradeable.sol",
					"exportedSymbols": {
						"ArraysUpgradeable": [
							2519
						],
						"MathUpgradeable": [
							3560
						],
						"StorageSlotUpgradeable": [
							2695
						]
					},
					"id": 2520,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2365,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:13"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/utils/StorageSlotUpgradeable.sol",
							"file": "./StorageSlotUpgradeable.sol",
							"id": 2366,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2520,
							"sourceUnit": 2696,
							"src": "125:38:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol",
							"file": "./math/MathUpgradeable.sol",
							"id": 2367,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2520,
							"sourceUnit": 3561,
							"src": "164:36:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ArraysUpgradeable",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2368,
								"nodeType": "StructuredDocumentation",
								"src": "202:63:13",
								"text": " @dev Collection of functions related to array types."
							},
							"fullyImplemented": true,
							"id": 2519,
							"linearizedBaseContracts": [
								2519
							],
							"name": "ArraysUpgradeable",
							"nameLocation": "274:17:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 2371,
									"libraryName": {
										"id": 2369,
										"name": "StorageSlotUpgradeable",
										"nameLocations": [
											"304:22:13"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2695,
										"src": "304:22:13"
									},
									"nodeType": "UsingForDirective",
									"src": "298:41:13",
									"typeName": {
										"id": 2370,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "331:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									}
								},
								{
									"body": {
										"id": 2454,
										"nodeType": "Block",
										"src": "855:845:13",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2385,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 2382,
															"name": "array",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2375,
															"src": "869:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																"typeString": "uint256[] storage pointer"
															}
														},
														"id": 2383,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "875:6:13",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "869:12:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2384,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "885:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "869:17:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2389,
												"nodeType": "IfStatement",
												"src": "865:56:13",
												"trueBody": {
													"id": 2388,
													"nodeType": "Block",
													"src": "888:33:13",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 2386,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "909:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 2381,
															"id": 2387,
															"nodeType": "Return",
															"src": "902:8:13"
														}
													]
												}
											},
											{
												"assignments": [
													2391
												],
												"declarations": [
													{
														"constant": false,
														"id": 2391,
														"mutability": "mutable",
														"name": "low",
														"nameLocation": "939:3:13",
														"nodeType": "VariableDeclaration",
														"scope": 2454,
														"src": "931:11:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2390,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "931:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2393,
												"initialValue": {
													"hexValue": "30",
													"id": 2392,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "945:1:13",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "931:15:13"
											},
											{
												"assignments": [
													2395
												],
												"declarations": [
													{
														"constant": false,
														"id": 2395,
														"mutability": "mutable",
														"name": "high",
														"nameLocation": "964:4:13",
														"nodeType": "VariableDeclaration",
														"scope": 2454,
														"src": "956:12:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2394,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "956:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2398,
												"initialValue": {
													"expression": {
														"id": 2396,
														"name": "array",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2375,
														"src": "971:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
															"typeString": "uint256[] storage pointer"
														}
													},
													"id": 2397,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "977:6:13",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "971:12:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "956:27:13"
											},
											{
												"body": {
													"id": 2430,
													"nodeType": "Block",
													"src": "1013:426:13",
													"statements": [
														{
															"assignments": [
																2403
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2403,
																	"mutability": "mutable",
																	"name": "mid",
																	"nameLocation": "1035:3:13",
																	"nodeType": "VariableDeclaration",
																	"scope": 2430,
																	"src": "1027:11:13",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2402,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "1027:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2409,
															"initialValue": {
																"arguments": [
																	{
																		"id": 2406,
																		"name": "low",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2391,
																		"src": "1065:3:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 2407,
																		"name": "high",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2395,
																		"src": "1070:4:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 2404,
																		"name": "MathUpgradeable",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3560,
																		"src": "1041:15:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_MathUpgradeable_$3560_$",
																			"typeString": "type(library MathUpgradeable)"
																		}
																	},
																	"id": 2405,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1057:7:13",
																	"memberName": "average",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2761,
																	"src": "1041:23:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 2408,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1041:34:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1027:48:13"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2416,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 2411,
																				"name": "array",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2375,
																				"src": "1305:5:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																					"typeString": "uint256[] storage pointer"
																				}
																			},
																			{
																				"id": 2412,
																				"name": "mid",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2403,
																				"src": "1312:3:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																					"typeString": "uint256[] storage pointer"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 2410,
																			"name": "unsafeAccess",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				2476,
																				2497,
																				2518
																			],
																			"referencedDeclaration": 2518,
																			"src": "1292:12:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Uint256Slot_$2650_storage_ptr_$",
																				"typeString": "function (uint256[] storage pointer,uint256) pure returns (struct StorageSlotUpgradeable.Uint256Slot storage pointer)"
																			}
																		},
																		"id": 2413,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1292:24:13",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Uint256Slot_$2650_storage_ptr",
																			"typeString": "struct StorageSlotUpgradeable.Uint256Slot storage pointer"
																		}
																	},
																	"id": 2414,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1317:5:13",
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2649,
																	"src": "1292:30:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"id": 2415,
																	"name": "element",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2377,
																	"src": "1325:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1292:40:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 2428,
																"nodeType": "Block",
																"src": "1383:46:13",
																"statements": [
																	{
																		"expression": {
																			"id": 2426,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 2422,
																				"name": "low",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2391,
																				"src": "1401:3:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2425,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2423,
																					"name": "mid",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2403,
																					"src": "1407:3:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"hexValue": "31",
																					"id": 2424,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "1413:1:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1_by_1",
																						"typeString": "int_const 1"
																					},
																					"value": "1"
																				},
																				"src": "1407:7:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "1401:13:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 2427,
																		"nodeType": "ExpressionStatement",
																		"src": "1401:13:13"
																	}
																]
															},
															"id": 2429,
															"nodeType": "IfStatement",
															"src": "1288:141:13",
															"trueBody": {
																"id": 2421,
																"nodeType": "Block",
																"src": "1334:43:13",
																"statements": [
																	{
																		"expression": {
																			"id": 2419,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 2417,
																				"name": "high",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2395,
																				"src": "1352:4:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 2418,
																				"name": "mid",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2403,
																				"src": "1359:3:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "1352:10:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 2420,
																		"nodeType": "ExpressionStatement",
																		"src": "1352:10:13"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2401,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2399,
														"name": "low",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2391,
														"src": "1001:3:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 2400,
														"name": "high",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2395,
														"src": "1007:4:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1001:10:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2431,
												"nodeType": "WhileStatement",
												"src": "994:445:13"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2444,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2434,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2432,
															"name": "low",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2391,
															"src": "1556:3:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2433,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1562:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1556:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2443,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 2436,
																		"name": "array",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2375,
																		"src": "1580:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																			"typeString": "uint256[] storage pointer"
																		}
																	},
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2439,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2437,
																			"name": "low",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2391,
																			"src": "1587:3:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2438,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1593:1:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "1587:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																			"typeString": "uint256[] storage pointer"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2435,
																	"name": "unsafeAccess",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		2476,
																		2497,
																		2518
																	],
																	"referencedDeclaration": 2518,
																	"src": "1567:12:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Uint256Slot_$2650_storage_ptr_$",
																		"typeString": "function (uint256[] storage pointer,uint256) pure returns (struct StorageSlotUpgradeable.Uint256Slot storage pointer)"
																	}
																},
																"id": 2440,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1567:28:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Uint256Slot_$2650_storage_ptr",
																	"typeString": "struct StorageSlotUpgradeable.Uint256Slot storage pointer"
																}
															},
															"id": 2441,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1596:5:13",
															"memberName": "value",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2649,
															"src": "1567:34:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 2442,
															"name": "element",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2377,
															"src": "1605:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1567:45:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "1556:56:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2452,
													"nodeType": "Block",
													"src": "1659:35:13",
													"statements": [
														{
															"expression": {
																"id": 2450,
																"name": "low",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2391,
																"src": "1680:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 2381,
															"id": 2451,
															"nodeType": "Return",
															"src": "1673:10:13"
														}
													]
												},
												"id": 2453,
												"nodeType": "IfStatement",
												"src": "1552:142:13",
												"trueBody": {
													"id": 2449,
													"nodeType": "Block",
													"src": "1614:39:13",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2447,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2445,
																	"name": "low",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2391,
																	"src": "1635:3:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2446,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1641:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "1635:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 2381,
															"id": 2448,
															"nodeType": "Return",
															"src": "1628:14:13"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2372,
										"nodeType": "StructuredDocumentation",
										"src": "345:407:13",
										"text": " @dev Searches a sorted `array` and returns the first index that contains\n a value greater or equal to `element`. If no such index exists (i.e. all\n values in the array are strictly less than `element`), the array length is\n returned. Time complexity O(log n).\n `array` is expected to be sorted in ascending order, and to contain no\n repeated elements."
									},
									"id": 2455,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "findUpperBound",
									"nameLocation": "766:14:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2378,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2375,
												"mutability": "mutable",
												"name": "array",
												"nameLocation": "799:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 2455,
												"src": "781:23:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 2373,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "781:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2374,
													"nodeType": "ArrayTypeName",
													"src": "781:9:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2377,
												"mutability": "mutable",
												"name": "element",
												"nameLocation": "814:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 2455,
												"src": "806:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2376,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "806:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "780:42:13"
									},
									"returnParameters": {
										"id": 2381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2380,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2455,
												"src": "846:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2379,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "846:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "845:9:13"
									},
									"scope": 2519,
									"src": "757:943:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2475,
										"nodeType": "Block",
										"src": "2027:220:13",
										"statements": [
											{
												"assignments": [
													2468
												],
												"declarations": [
													{
														"constant": false,
														"id": 2468,
														"mutability": "mutable",
														"name": "slot",
														"nameLocation": "2045:4:13",
														"nodeType": "VariableDeclaration",
														"scope": 2475,
														"src": "2037:12:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 2467,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2037:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2469,
												"nodeType": "VariableDeclarationStatement",
												"src": "2037:12:13"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2111:92:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2132:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "arr.slot",
																		"nodeType": "YulIdentifier",
																		"src": "2135:8:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2125:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2125:19:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2125:19:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2157:36:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2179:1:13",
																				"type": "",
																				"value": "0"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2182:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "keccak256",
																			"nodeType": "YulIdentifier",
																			"src": "2169:9:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2169:18:13"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2189:3:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2165:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2165:28:13"
															},
															"variableNames": [
																{
																	"name": "slot",
																	"nodeType": "YulIdentifier",
																	"src": "2157:4:13"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 2459,
														"isOffset": false,
														"isSlot": true,
														"src": "2135:8:13",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 2461,
														"isOffset": false,
														"isSlot": false,
														"src": "2189:3:13",
														"valueSize": 1
													},
													{
														"declaration": 2468,
														"isOffset": false,
														"isSlot": false,
														"src": "2157:4:13",
														"valueSize": 1
													}
												],
												"id": 2470,
												"nodeType": "InlineAssembly",
												"src": "2102:101:13"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 2471,
															"name": "slot",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2468,
															"src": "2219:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"id": 2472,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2224:14:13",
														"memberName": "getAddressSlot",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2661,
														"src": "2219:19:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2641_storage_ptr_$bound_to$_t_bytes32_$",
															"typeString": "function (bytes32) pure returns (struct StorageSlotUpgradeable.AddressSlot storage pointer)"
														}
													},
													"id": 2473,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2219:21:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSlot_$2641_storage_ptr",
														"typeString": "struct StorageSlotUpgradeable.AddressSlot storage pointer"
													}
												},
												"functionReturnParameters": 2466,
												"id": 2474,
												"nodeType": "Return",
												"src": "2212:28:13"
											}
										]
									},
									"documentation": {
										"id": 2456,
										"nodeType": "StructuredDocumentation",
										"src": "1706:191:13",
										"text": " @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n WARNING: Only use if you are certain `pos` is lower than the array length."
									},
									"id": 2476,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unsafeAccess",
									"nameLocation": "1911:12:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2459,
												"mutability": "mutable",
												"name": "arr",
												"nameLocation": "1942:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 2476,
												"src": "1924:21:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 2457,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1924:7:13",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 2458,
													"nodeType": "ArrayTypeName",
													"src": "1924:9:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2461,
												"mutability": "mutable",
												"name": "pos",
												"nameLocation": "1955:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 2476,
												"src": "1947:11:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2460,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1947:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1923:36:13"
									},
									"returnParameters": {
										"id": 2466,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2465,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2476,
												"src": "1983:42:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSlot_$2641_storage_ptr",
													"typeString": "struct StorageSlotUpgradeable.AddressSlot"
												},
												"typeName": {
													"id": 2464,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2463,
														"name": "StorageSlotUpgradeable.AddressSlot",
														"nameLocations": [
															"1983:22:13",
															"2006:11:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2641,
														"src": "1983:34:13"
													},
													"referencedDeclaration": 2641,
													"src": "1983:34:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSlot_$2641_storage_ptr",
														"typeString": "struct StorageSlotUpgradeable.AddressSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1982:44:13"
									},
									"scope": 2519,
									"src": "1902:345:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2496,
										"nodeType": "Block",
										"src": "2574:220:13",
										"statements": [
											{
												"assignments": [
													2489
												],
												"declarations": [
													{
														"constant": false,
														"id": 2489,
														"mutability": "mutable",
														"name": "slot",
														"nameLocation": "2592:4:13",
														"nodeType": "VariableDeclaration",
														"scope": 2496,
														"src": "2584:12:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 2488,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2584:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2490,
												"nodeType": "VariableDeclarationStatement",
												"src": "2584:12:13"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2658:92:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2679:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "arr.slot",
																		"nodeType": "YulIdentifier",
																		"src": "2682:8:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2672:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2672:19:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2672:19:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2704:36:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2726:1:13",
																				"type": "",
																				"value": "0"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2729:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "keccak256",
																			"nodeType": "YulIdentifier",
																			"src": "2716:9:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2716:18:13"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2736:3:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2712:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2712:28:13"
															},
															"variableNames": [
																{
																	"name": "slot",
																	"nodeType": "YulIdentifier",
																	"src": "2704:4:13"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 2480,
														"isOffset": false,
														"isSlot": true,
														"src": "2682:8:13",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 2482,
														"isOffset": false,
														"isSlot": false,
														"src": "2736:3:13",
														"valueSize": 1
													},
													{
														"declaration": 2489,
														"isOffset": false,
														"isSlot": false,
														"src": "2704:4:13",
														"valueSize": 1
													}
												],
												"id": 2491,
												"nodeType": "InlineAssembly",
												"src": "2649:101:13"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 2492,
															"name": "slot",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2489,
															"src": "2766:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"id": 2493,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2771:14:13",
														"memberName": "getBytes32Slot",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2683,
														"src": "2766:19:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Bytes32Slot_$2647_storage_ptr_$bound_to$_t_bytes32_$",
															"typeString": "function (bytes32) pure returns (struct StorageSlotUpgradeable.Bytes32Slot storage pointer)"
														}
													},
													"id": 2494,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2766:21:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Slot_$2647_storage_ptr",
														"typeString": "struct StorageSlotUpgradeable.Bytes32Slot storage pointer"
													}
												},
												"functionReturnParameters": 2487,
												"id": 2495,
												"nodeType": "Return",
												"src": "2759:28:13"
											}
										]
									},
									"documentation": {
										"id": 2477,
										"nodeType": "StructuredDocumentation",
										"src": "2253:191:13",
										"text": " @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n WARNING: Only use if you are certain `pos` is lower than the array length."
									},
									"id": 2497,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unsafeAccess",
									"nameLocation": "2458:12:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2480,
												"mutability": "mutable",
												"name": "arr",
												"nameLocation": "2489:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 2497,
												"src": "2471:21:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2478,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "2471:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 2479,
													"nodeType": "ArrayTypeName",
													"src": "2471:9:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2482,
												"mutability": "mutable",
												"name": "pos",
												"nameLocation": "2502:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 2497,
												"src": "2494:11:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2481,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2494:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2470:36:13"
									},
									"returnParameters": {
										"id": 2487,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2486,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2497,
												"src": "2530:42:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Slot_$2647_storage_ptr",
													"typeString": "struct StorageSlotUpgradeable.Bytes32Slot"
												},
												"typeName": {
													"id": 2485,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2484,
														"name": "StorageSlotUpgradeable.Bytes32Slot",
														"nameLocations": [
															"2530:22:13",
															"2553:11:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2647,
														"src": "2530:34:13"
													},
													"referencedDeclaration": 2647,
													"src": "2530:34:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Slot_$2647_storage_ptr",
														"typeString": "struct StorageSlotUpgradeable.Bytes32Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2529:44:13"
									},
									"scope": 2519,
									"src": "2449:345:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2517,
										"nodeType": "Block",
										"src": "3121:220:13",
										"statements": [
											{
												"assignments": [
													2510
												],
												"declarations": [
													{
														"constant": false,
														"id": 2510,
														"mutability": "mutable",
														"name": "slot",
														"nameLocation": "3139:4:13",
														"nodeType": "VariableDeclaration",
														"scope": 2517,
														"src": "3131:12:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 2509,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "3131:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2511,
												"nodeType": "VariableDeclarationStatement",
												"src": "3131:12:13"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3205:92:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3226:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "arr.slot",
																		"nodeType": "YulIdentifier",
																		"src": "3229:8:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3219:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3219:19:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3219:19:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3251:36:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3273:1:13",
																				"type": "",
																				"value": "0"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3276:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "keccak256",
																			"nodeType": "YulIdentifier",
																			"src": "3263:9:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3263:18:13"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3283:3:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3259:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3259:28:13"
															},
															"variableNames": [
																{
																	"name": "slot",
																	"nodeType": "YulIdentifier",
																	"src": "3251:4:13"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 2501,
														"isOffset": false,
														"isSlot": true,
														"src": "3229:8:13",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 2503,
														"isOffset": false,
														"isSlot": false,
														"src": "3283:3:13",
														"valueSize": 1
													},
													{
														"declaration": 2510,
														"isOffset": false,
														"isSlot": false,
														"src": "3251:4:13",
														"valueSize": 1
													}
												],
												"id": 2512,
												"nodeType": "InlineAssembly",
												"src": "3196:101:13"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 2513,
															"name": "slot",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2510,
															"src": "3313:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"id": 2514,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3318:14:13",
														"memberName": "getUint256Slot",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2694,
														"src": "3313:19:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$2650_storage_ptr_$bound_to$_t_bytes32_$",
															"typeString": "function (bytes32) pure returns (struct StorageSlotUpgradeable.Uint256Slot storage pointer)"
														}
													},
													"id": 2515,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3313:21:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Uint256Slot_$2650_storage_ptr",
														"typeString": "struct StorageSlotUpgradeable.Uint256Slot storage pointer"
													}
												},
												"functionReturnParameters": 2508,
												"id": 2516,
												"nodeType": "Return",
												"src": "3306:28:13"
											}
										]
									},
									"documentation": {
										"id": 2498,
										"nodeType": "StructuredDocumentation",
										"src": "2800:191:13",
										"text": " @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n WARNING: Only use if you are certain `pos` is lower than the array length."
									},
									"id": 2518,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unsafeAccess",
									"nameLocation": "3005:12:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2501,
												"mutability": "mutable",
												"name": "arr",
												"nameLocation": "3036:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 2518,
												"src": "3018:21:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 2499,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "3018:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2500,
													"nodeType": "ArrayTypeName",
													"src": "3018:9:13",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2503,
												"mutability": "mutable",
												"name": "pos",
												"nameLocation": "3049:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 2518,
												"src": "3041:11:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2502,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3041:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3017:36:13"
									},
									"returnParameters": {
										"id": 2508,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2507,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2518,
												"src": "3077:42:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Uint256Slot_$2650_storage_ptr",
													"typeString": "struct StorageSlotUpgradeable.Uint256Slot"
												},
												"typeName": {
													"id": 2506,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2505,
														"name": "StorageSlotUpgradeable.Uint256Slot",
														"nameLocations": [
															"3077:22:13",
															"3100:11:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2650,
														"src": "3077:34:13"
													},
													"referencedDeclaration": 2650,
													"src": "3077:34:13",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Uint256Slot_$2650_storage_ptr",
														"typeString": "struct StorageSlotUpgradeable.Uint256Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3076:44:13"
									},
									"scope": 2519,
									"src": "2996:345:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2520,
							"src": "266:3077:13",
							"usedErrors": []
						}
					],
					"src": "100:3244:13"
				},
				"id": 13
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2363
						],
						"ContextUpgradeable": [
							2561
						],
						"Initializable": [
							689
						]
					},
					"id": 2562,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2521,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:14"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 2522,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2562,
							"sourceUnit": 690,
							"src": "110:42:14",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 2524,
										"name": "Initializable",
										"nameLocations": [
											"691:13:14"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 689,
										"src": "691:13:14"
									},
									"id": 2525,
									"nodeType": "InheritanceSpecifier",
									"src": "691:13:14"
								}
							],
							"canonicalName": "ContextUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2523,
								"nodeType": "StructuredDocumentation",
								"src": "154:496:14",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 2561,
							"linearizedBaseContracts": [
								2561,
								689
							],
							"name": "ContextUpgradeable",
							"nameLocation": "669:18:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2530,
										"nodeType": "Block",
										"src": "763:7:14",
										"statements": []
									},
									"id": 2531,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2528,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2527,
												"name": "onlyInitializing",
												"nameLocations": [
													"746:16:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 634,
												"src": "746:16:14"
											},
											"nodeType": "ModifierInvocation",
											"src": "746:16:14"
										}
									],
									"name": "__Context_init",
									"nameLocation": "720:14:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2526,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "734:2:14"
									},
									"returnParameters": {
										"id": 2529,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "763:0:14"
									},
									"scope": 2561,
									"src": "711:59:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2536,
										"nodeType": "Block",
										"src": "838:7:14",
										"statements": []
									},
									"id": 2537,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2534,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2533,
												"name": "onlyInitializing",
												"nameLocations": [
													"821:16:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 634,
												"src": "821:16:14"
											},
											"nodeType": "ModifierInvocation",
											"src": "821:16:14"
										}
									],
									"name": "__Context_init_unchained",
									"nameLocation": "785:24:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2532,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "809:2:14"
									},
									"returnParameters": {
										"id": 2535,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "838:0:14"
									},
									"scope": 2561,
									"src": "776:69:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2545,
										"nodeType": "Block",
										"src": "912:34:14",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 2542,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "929:3:14",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 2543,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "933:6:14",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "929:10:14",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2541,
												"id": 2544,
												"nodeType": "Return",
												"src": "922:17:14"
											}
										]
									},
									"id": 2546,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "859:10:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2538,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "869:2:14"
									},
									"returnParameters": {
										"id": 2541,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2540,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2546,
												"src": "903:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2539,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "903:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "902:9:14"
									},
									"scope": 2561,
									"src": "850:96:14",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2554,
										"nodeType": "Block",
										"src": "1019:32:14",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 2551,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1036:3:14",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 2552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1040:4:14",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1036:8:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 2550,
												"id": 2553,
												"nodeType": "Return",
												"src": "1029:15:14"
											}
										]
									},
									"id": 2555,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "961:8:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2547,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "969:2:14"
									},
									"returnParameters": {
										"id": 2550,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2549,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2555,
												"src": "1003:14:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2548,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1003:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1002:16:14"
									},
									"scope": 2561,
									"src": "952:99:14",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 2556,
										"nodeType": "StructuredDocumentation",
										"src": "1057:254:14",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 2560,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "1336:5:14",
									"nodeType": "VariableDeclaration",
									"scope": 2561,
									"src": "1316:25:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 2557,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1316:7:14",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 2559,
										"length": {
											"hexValue": "3530",
											"id": 2558,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1324:2:14",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1316:11:14",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 2562,
							"src": "651:693:14",
							"usedErrors": []
						}
					],
					"src": "86:1259:14"
				},
				"id": 14
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/utils/CountersUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/utils/CountersUpgradeable.sol",
					"exportedSymbols": {
						"CountersUpgradeable": [
							2635
						]
					},
					"id": 2636,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2563,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:15"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "CountersUpgradeable",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2564,
								"nodeType": "StructuredDocumentation",
								"src": "112:311:15",
								"text": " @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"
							},
							"fullyImplemented": true,
							"id": 2635,
							"linearizedBaseContracts": [
								2635
							],
							"name": "CountersUpgradeable",
							"nameLocation": "432:19:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "CountersUpgradeable.Counter",
									"id": 2567,
									"members": [
										{
											"constant": false,
											"id": 2566,
											"mutability": "mutable",
											"name": "_value",
											"nameLocation": "805:6:15",
											"nodeType": "VariableDeclaration",
											"scope": 2567,
											"src": "797:14:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2565,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "797:7:15",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Counter",
									"nameLocation": "465:7:15",
									"nodeType": "StructDefinition",
									"scope": 2635,
									"src": "458:374:15",
									"visibility": "public"
								},
								{
									"body": {
										"id": 2578,
										"nodeType": "Block",
										"src": "912:38:15",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 2575,
														"name": "counter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2570,
														"src": "929:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$2567_storage_ptr",
															"typeString": "struct CountersUpgradeable.Counter storage pointer"
														}
													},
													"id": 2576,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "937:6:15",
													"memberName": "_value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2566,
													"src": "929:14:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2574,
												"id": 2577,
												"nodeType": "Return",
												"src": "922:21:15"
											}
										]
									},
									"id": 2579,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "current",
									"nameLocation": "847:7:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2571,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2570,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "871:7:15",
												"nodeType": "VariableDeclaration",
												"scope": 2579,
												"src": "855:23:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$2567_storage_ptr",
													"typeString": "struct CountersUpgradeable.Counter"
												},
												"typeName": {
													"id": 2569,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2568,
														"name": "Counter",
														"nameLocations": [
															"855:7:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2567,
														"src": "855:7:15"
													},
													"referencedDeclaration": 2567,
													"src": "855:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$2567_storage_ptr",
														"typeString": "struct CountersUpgradeable.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "854:25:15"
									},
									"returnParameters": {
										"id": 2574,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2573,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2579,
												"src": "903:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2572,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "903:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "902:9:15"
									},
									"scope": 2635,
									"src": "838:112:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2592,
										"nodeType": "Block",
										"src": "1009:70:15",
										"statements": [
											{
												"id": 2591,
												"nodeType": "UncheckedBlock",
												"src": "1019:54:15",
												"statements": [
													{
														"expression": {
															"id": 2589,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 2585,
																	"name": "counter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2582,
																	"src": "1043:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Counter_$2567_storage_ptr",
																		"typeString": "struct CountersUpgradeable.Counter storage pointer"
																	}
																},
																"id": 2587,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberLocation": "1051:6:15",
																"memberName": "_value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2566,
																"src": "1043:14:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 2588,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1061:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "1043:19:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2590,
														"nodeType": "ExpressionStatement",
														"src": "1043:19:15"
													}
												]
											}
										]
									},
									"id": 2593,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increment",
									"nameLocation": "965:9:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2583,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2582,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "991:7:15",
												"nodeType": "VariableDeclaration",
												"scope": 2593,
												"src": "975:23:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$2567_storage_ptr",
													"typeString": "struct CountersUpgradeable.Counter"
												},
												"typeName": {
													"id": 2581,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2580,
														"name": "Counter",
														"nameLocations": [
															"975:7:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2567,
														"src": "975:7:15"
													},
													"referencedDeclaration": 2567,
													"src": "975:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$2567_storage_ptr",
														"typeString": "struct CountersUpgradeable.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "974:25:15"
									},
									"returnParameters": {
										"id": 2584,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1009:0:15"
									},
									"scope": 2635,
									"src": "956:123:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2620,
										"nodeType": "Block",
										"src": "1138:176:15",
										"statements": [
											{
												"assignments": [
													2600
												],
												"declarations": [
													{
														"constant": false,
														"id": 2600,
														"mutability": "mutable",
														"name": "value",
														"nameLocation": "1156:5:15",
														"nodeType": "VariableDeclaration",
														"scope": 2620,
														"src": "1148:13:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2599,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1148:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2603,
												"initialValue": {
													"expression": {
														"id": 2601,
														"name": "counter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2596,
														"src": "1164:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$2567_storage_ptr",
															"typeString": "struct CountersUpgradeable.Counter storage pointer"
														}
													},
													"id": 2602,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1172:6:15",
													"memberName": "_value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2566,
													"src": "1164:14:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1148:30:15"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2607,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2605,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2600,
																"src": "1196:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2606,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1204:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1196:9:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "436f756e7465723a2064656372656d656e74206f766572666c6f77",
															"id": 2608,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1207:29:15",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f",
																"typeString": "literal_string \"Counter: decrement overflow\""
															},
															"value": "Counter: decrement overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f",
																"typeString": "literal_string \"Counter: decrement overflow\""
															}
														],
														"id": 2604,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1188:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2609,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1188:49:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2610,
												"nodeType": "ExpressionStatement",
												"src": "1188:49:15"
											},
											{
												"id": 2619,
												"nodeType": "UncheckedBlock",
												"src": "1247:61:15",
												"statements": [
													{
														"expression": {
															"id": 2617,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 2611,
																	"name": "counter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2596,
																	"src": "1271:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Counter_$2567_storage_ptr",
																		"typeString": "struct CountersUpgradeable.Counter storage pointer"
																	}
																},
																"id": 2613,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberLocation": "1279:6:15",
																"memberName": "_value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2566,
																"src": "1271:14:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2616,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2614,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2600,
																	"src": "1288:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2615,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1296:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "1288:9:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1271:26:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2618,
														"nodeType": "ExpressionStatement",
														"src": "1271:26:15"
													}
												]
											}
										]
									},
									"id": 2621,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decrement",
									"nameLocation": "1094:9:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2597,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2596,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "1120:7:15",
												"nodeType": "VariableDeclaration",
												"scope": 2621,
												"src": "1104:23:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$2567_storage_ptr",
													"typeString": "struct CountersUpgradeable.Counter"
												},
												"typeName": {
													"id": 2595,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2594,
														"name": "Counter",
														"nameLocations": [
															"1104:7:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2567,
														"src": "1104:7:15"
													},
													"referencedDeclaration": 2567,
													"src": "1104:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$2567_storage_ptr",
														"typeString": "struct CountersUpgradeable.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1103:25:15"
									},
									"returnParameters": {
										"id": 2598,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1138:0:15"
									},
									"scope": 2635,
									"src": "1085:229:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2633,
										"nodeType": "Block",
										"src": "1369:35:15",
										"statements": [
											{
												"expression": {
													"id": 2631,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 2627,
															"name": "counter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2624,
															"src": "1379:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$2567_storage_ptr",
																"typeString": "struct CountersUpgradeable.Counter storage pointer"
															}
														},
														"id": 2629,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "1387:6:15",
														"memberName": "_value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2566,
														"src": "1379:14:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 2630,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1396:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1379:18:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2632,
												"nodeType": "ExpressionStatement",
												"src": "1379:18:15"
											}
										]
									},
									"id": 2634,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "reset",
									"nameLocation": "1329:5:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2625,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2624,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "1351:7:15",
												"nodeType": "VariableDeclaration",
												"scope": 2634,
												"src": "1335:23:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$2567_storage_ptr",
													"typeString": "struct CountersUpgradeable.Counter"
												},
												"typeName": {
													"id": 2623,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2622,
														"name": "Counter",
														"nameLocations": [
															"1335:7:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2567,
														"src": "1335:7:15"
													},
													"referencedDeclaration": 2567,
													"src": "1335:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$2567_storage_ptr",
														"typeString": "struct CountersUpgradeable.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1334:25:15"
									},
									"returnParameters": {
										"id": 2626,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1369:0:15"
									},
									"scope": 2635,
									"src": "1320:84:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2636,
							"src": "424:982:15",
							"usedErrors": []
						}
					],
					"src": "87:1320:15"
				},
				"id": 15
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/utils/StorageSlotUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/utils/StorageSlotUpgradeable.sol",
					"exportedSymbols": {
						"StorageSlotUpgradeable": [
							2695
						]
					},
					"id": 2696,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2637,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:16"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "StorageSlotUpgradeable",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2638,
								"nodeType": "StructuredDocumentation",
								"src": "130:1148:16",
								"text": " @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._"
							},
							"fullyImplemented": true,
							"id": 2695,
							"linearizedBaseContracts": [
								2695
							],
							"name": "StorageSlotUpgradeable",
							"nameLocation": "1287:22:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "StorageSlotUpgradeable.AddressSlot",
									"id": 2641,
									"members": [
										{
											"constant": false,
											"id": 2640,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1353:5:16",
											"nodeType": "VariableDeclaration",
											"scope": 2641,
											"src": "1345:13:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2639,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1345:7:16",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressSlot",
									"nameLocation": "1323:11:16",
									"nodeType": "StructDefinition",
									"scope": 2695,
									"src": "1316:49:16",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlotUpgradeable.BooleanSlot",
									"id": 2644,
									"members": [
										{
											"constant": false,
											"id": 2643,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1405:5:16",
											"nodeType": "VariableDeclaration",
											"scope": 2644,
											"src": "1400:10:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 2642,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1400:4:16",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BooleanSlot",
									"nameLocation": "1378:11:16",
									"nodeType": "StructDefinition",
									"scope": 2695,
									"src": "1371:46:16",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlotUpgradeable.Bytes32Slot",
									"id": 2647,
									"members": [
										{
											"constant": false,
											"id": 2646,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1460:5:16",
											"nodeType": "VariableDeclaration",
											"scope": 2647,
											"src": "1452:13:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 2645,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1452:7:16",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Bytes32Slot",
									"nameLocation": "1430:11:16",
									"nodeType": "StructDefinition",
									"scope": 2695,
									"src": "1423:49:16",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlotUpgradeable.Uint256Slot",
									"id": 2650,
									"members": [
										{
											"constant": false,
											"id": 2649,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1515:5:16",
											"nodeType": "VariableDeclaration",
											"scope": 2650,
											"src": "1507:13:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2648,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1507:7:16",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Uint256Slot",
									"nameLocation": "1485:11:16",
									"nodeType": "StructDefinition",
									"scope": 2695,
									"src": "1478:49:16",
									"visibility": "public"
								},
								{
									"body": {
										"id": 2660,
										"nodeType": "Block",
										"src": "1709:106:16",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1771:38:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1785:14:16",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "1795:4:16"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "1785:6:16"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 2657,
														"isOffset": false,
														"isSlot": true,
														"src": "1785:6:16",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 2653,
														"isOffset": false,
														"isSlot": false,
														"src": "1795:4:16",
														"valueSize": 1
													}
												],
												"id": 2659,
												"nodeType": "InlineAssembly",
												"src": "1762:47:16"
											}
										]
									},
									"documentation": {
										"id": 2651,
										"nodeType": "StructuredDocumentation",
										"src": "1533:87:16",
										"text": " @dev Returns an `AddressSlot` with member `value` located at `slot`."
									},
									"id": 2661,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAddressSlot",
									"nameLocation": "1634:14:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2654,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2653,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "1657:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2661,
												"src": "1649:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2652,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1649:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1648:14:16"
									},
									"returnParameters": {
										"id": 2658,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2657,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1706:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2661,
												"src": "1686:21:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSlot_$2641_storage_ptr",
													"typeString": "struct StorageSlotUpgradeable.AddressSlot"
												},
												"typeName": {
													"id": 2656,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2655,
														"name": "AddressSlot",
														"nameLocations": [
															"1686:11:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2641,
														"src": "1686:11:16"
													},
													"referencedDeclaration": 2641,
													"src": "1686:11:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSlot_$2641_storage_ptr",
														"typeString": "struct StorageSlotUpgradeable.AddressSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1685:23:16"
									},
									"scope": 2695,
									"src": "1625:190:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2671,
										"nodeType": "Block",
										"src": "1997:106:16",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2059:38:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2073:14:16",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "2083:4:16"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "2073:6:16"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 2668,
														"isOffset": false,
														"isSlot": true,
														"src": "2073:6:16",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 2664,
														"isOffset": false,
														"isSlot": false,
														"src": "2083:4:16",
														"valueSize": 1
													}
												],
												"id": 2670,
												"nodeType": "InlineAssembly",
												"src": "2050:47:16"
											}
										]
									},
									"documentation": {
										"id": 2662,
										"nodeType": "StructuredDocumentation",
										"src": "1821:87:16",
										"text": " @dev Returns an `BooleanSlot` with member `value` located at `slot`."
									},
									"id": 2672,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBooleanSlot",
									"nameLocation": "1922:14:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2665,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2664,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "1945:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2672,
												"src": "1937:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2663,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1937:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1936:14:16"
									},
									"returnParameters": {
										"id": 2669,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2668,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1994:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2672,
												"src": "1974:21:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BooleanSlot_$2644_storage_ptr",
													"typeString": "struct StorageSlotUpgradeable.BooleanSlot"
												},
												"typeName": {
													"id": 2667,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2666,
														"name": "BooleanSlot",
														"nameLocations": [
															"1974:11:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2644,
														"src": "1974:11:16"
													},
													"referencedDeclaration": 2644,
													"src": "1974:11:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BooleanSlot_$2644_storage_ptr",
														"typeString": "struct StorageSlotUpgradeable.BooleanSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1973:23:16"
									},
									"scope": 2695,
									"src": "1913:190:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2682,
										"nodeType": "Block",
										"src": "2285:106:16",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2347:38:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2361:14:16",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "2371:4:16"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "2361:6:16"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 2679,
														"isOffset": false,
														"isSlot": true,
														"src": "2361:6:16",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 2675,
														"isOffset": false,
														"isSlot": false,
														"src": "2371:4:16",
														"valueSize": 1
													}
												],
												"id": 2681,
												"nodeType": "InlineAssembly",
												"src": "2338:47:16"
											}
										]
									},
									"documentation": {
										"id": 2673,
										"nodeType": "StructuredDocumentation",
										"src": "2109:87:16",
										"text": " @dev Returns an `Bytes32Slot` with member `value` located at `slot`."
									},
									"id": 2683,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytes32Slot",
									"nameLocation": "2210:14:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2676,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2675,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2233:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2683,
												"src": "2225:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2674,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2225:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2224:14:16"
									},
									"returnParameters": {
										"id": 2680,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2679,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2282:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2683,
												"src": "2262:21:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Slot_$2647_storage_ptr",
													"typeString": "struct StorageSlotUpgradeable.Bytes32Slot"
												},
												"typeName": {
													"id": 2678,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2677,
														"name": "Bytes32Slot",
														"nameLocations": [
															"2262:11:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2647,
														"src": "2262:11:16"
													},
													"referencedDeclaration": 2647,
													"src": "2262:11:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Slot_$2647_storage_ptr",
														"typeString": "struct StorageSlotUpgradeable.Bytes32Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2261:23:16"
									},
									"scope": 2695,
									"src": "2201:190:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2693,
										"nodeType": "Block",
										"src": "2573:106:16",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2635:38:16",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2649:14:16",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "2659:4:16"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "2649:6:16"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 2690,
														"isOffset": false,
														"isSlot": true,
														"src": "2649:6:16",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 2686,
														"isOffset": false,
														"isSlot": false,
														"src": "2659:4:16",
														"valueSize": 1
													}
												],
												"id": 2692,
												"nodeType": "InlineAssembly",
												"src": "2626:47:16"
											}
										]
									},
									"documentation": {
										"id": 2684,
										"nodeType": "StructuredDocumentation",
										"src": "2397:87:16",
										"text": " @dev Returns an `Uint256Slot` with member `value` located at `slot`."
									},
									"id": 2694,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getUint256Slot",
									"nameLocation": "2498:14:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2686,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2521:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2694,
												"src": "2513:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2685,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2513:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2512:14:16"
									},
									"returnParameters": {
										"id": 2691,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2690,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2570:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2694,
												"src": "2550:21:16",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Uint256Slot_$2650_storage_ptr",
													"typeString": "struct StorageSlotUpgradeable.Uint256Slot"
												},
												"typeName": {
													"id": 2689,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2688,
														"name": "Uint256Slot",
														"nameLocations": [
															"2550:11:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2650,
														"src": "2550:11:16"
													},
													"referencedDeclaration": 2650,
													"src": "2550:11:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Uint256Slot_$2650_storage_ptr",
														"typeString": "struct StorageSlotUpgradeable.Uint256Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2549:23:16"
									},
									"scope": 2695,
									"src": "2489:190:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2696,
							"src": "1279:1402:16",
							"usedErrors": []
						}
					],
					"src": "105:2577:16"
				},
				"id": 16
			},
			"@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/utils/math/MathUpgradeable.sol",
					"exportedSymbols": {
						"MathUpgradeable": [
							3560
						]
					},
					"id": 3561,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2697,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "103:23:17"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MathUpgradeable",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2698,
								"nodeType": "StructuredDocumentation",
								"src": "128:73:17",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3560,
							"linearizedBaseContracts": [
								3560
							],
							"name": "MathUpgradeable",
							"nameLocation": "210:15:17",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "MathUpgradeable.Rounding",
									"id": 2702,
									"members": [
										{
											"id": 2699,
											"name": "Down",
											"nameLocation": "256:4:17",
											"nodeType": "EnumValue",
											"src": "256:4:17"
										},
										{
											"id": 2700,
											"name": "Up",
											"nameLocation": "298:2:17",
											"nodeType": "EnumValue",
											"src": "298:2:17"
										},
										{
											"id": 2701,
											"name": "Zero",
											"nameLocation": "329:4:17",
											"nodeType": "EnumValue",
											"src": "329:4:17"
										}
									],
									"name": "Rounding",
									"nameLocation": "237:8:17",
									"nodeType": "EnumDefinition",
									"src": "232:122:17"
								},
								{
									"body": {
										"id": 2719,
										"nodeType": "Block",
										"src": "491:37:17",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2714,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2712,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2705,
															"src": "508:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 2713,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2707,
															"src": "512:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "508:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2716,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2707,
														"src": "520:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2717,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "508:13:17",
													"trueExpression": {
														"id": 2715,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2705,
														"src": "516:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2711,
												"id": 2718,
												"nodeType": "Return",
												"src": "501:20:17"
											}
										]
									},
									"documentation": {
										"id": 2703,
										"nodeType": "StructuredDocumentation",
										"src": "360:59:17",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 2720,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "433:3:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2708,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2705,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "445:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2720,
												"src": "437:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2704,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "437:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2707,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "456:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2720,
												"src": "448:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2706,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "448:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "436:22:17"
									},
									"returnParameters": {
										"id": 2711,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2710,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2720,
												"src": "482:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2709,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "482:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "481:9:17"
									},
									"scope": 3560,
									"src": "424:104:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2737,
										"nodeType": "Block",
										"src": "666:37:17",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2732,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2730,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2723,
															"src": "683:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 2731,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2725,
															"src": "687:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "683:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2734,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2725,
														"src": "695:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2735,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "683:13:17",
													"trueExpression": {
														"id": 2733,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2723,
														"src": "691:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2729,
												"id": 2736,
												"nodeType": "Return",
												"src": "676:20:17"
											}
										]
									},
									"documentation": {
										"id": 2721,
										"nodeType": "StructuredDocumentation",
										"src": "534:60:17",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 2738,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "608:3:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2726,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2723,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "620:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2738,
												"src": "612:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2722,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2725,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "631:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2738,
												"src": "623:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2724,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "623:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "611:22:17"
									},
									"returnParameters": {
										"id": 2729,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2728,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2738,
												"src": "657:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2727,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "656:9:17"
									},
									"scope": 3560,
									"src": "599:104:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2760,
										"nodeType": "Block",
										"src": "887:82:17",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2758,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2750,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2748,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2741,
																	"src": "942:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2749,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2743,
																	"src": "946:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "942:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2751,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "941:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2757,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2754,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2752,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2741,
																		"src": "952:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 2753,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2743,
																		"src": "956:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "952:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2755,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "951:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 2756,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "961:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "951:11:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "941:21:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2747,
												"id": 2759,
												"nodeType": "Return",
												"src": "934:28:17"
											}
										]
									},
									"documentation": {
										"id": 2739,
										"nodeType": "StructuredDocumentation",
										"src": "709:102:17",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 2761,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "825:7:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2744,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2741,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "841:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2761,
												"src": "833:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2740,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "833:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2743,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "852:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2761,
												"src": "844:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2742,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "844:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "832:22:17"
									},
									"returnParameters": {
										"id": 2747,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2746,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2761,
												"src": "878:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2745,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "878:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "877:9:17"
									},
									"scope": 3560,
									"src": "816:153:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2785,
										"nodeType": "Block",
										"src": "1239:123:17",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2773,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2771,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2764,
															"src": "1327:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 2772,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1332:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1327:6:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2782,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2780,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2777,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2775,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2764,
																			"src": "1341:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2776,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1345:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "1341:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2778,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1340:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2779,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2766,
																"src": "1350:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1340:11:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 2781,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1354:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1340:15:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2783,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1327:28:17",
													"trueExpression": {
														"hexValue": "30",
														"id": 2774,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1336:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2770,
												"id": 2784,
												"nodeType": "Return",
												"src": "1320:35:17"
											}
										]
									},
									"documentation": {
										"id": 2762,
										"nodeType": "StructuredDocumentation",
										"src": "975:188:17",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."
									},
									"id": 2786,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "1177:7:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2767,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2764,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1193:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2786,
												"src": "1185:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2763,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1185:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2766,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1204:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2786,
												"src": "1196:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2765,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1196:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1184:22:17"
									},
									"returnParameters": {
										"id": 2770,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2769,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2786,
												"src": "1230:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2768,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1230:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1229:9:17"
									},
									"scope": 3560,
									"src": "1168:194:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2907,
										"nodeType": "Block",
										"src": "1806:3797:17",
										"statements": [
											{
												"id": 2906,
												"nodeType": "UncheckedBlock",
												"src": "1816:3781:17",
												"statements": [
													{
														"assignments": [
															2799
														],
														"declarations": [
															{
																"constant": false,
																"id": 2799,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "2145:5:17",
																"nodeType": "VariableDeclaration",
																"scope": 2906,
																"src": "2137:13:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2798,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2137:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2800,
														"nodeType": "VariableDeclarationStatement",
														"src": "2137:13:17"
													},
													{
														"assignments": [
															2802
														],
														"declarations": [
															{
																"constant": false,
																"id": 2802,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "2217:5:17",
																"nodeType": "VariableDeclaration",
																"scope": 2906,
																"src": "2209:13:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2801,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2209:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2803,
														"nodeType": "VariableDeclarationStatement",
														"src": "2209:13:17"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "2289:157:17",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2307:30:17",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2324:1:17"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2327:1:17"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2334:1:17",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "2330:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2330:6:17"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "2317:6:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2317:20:17"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nodeType": "YulTypedName",
																			"src": "2311:2:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2354:18:17",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2367:1:17"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2370:1:17"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "2363:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2363:9:17"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "2354:5:17"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2389:43:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2406:2:17"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2410:5:17"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2402:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2402:14:17"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2421:2:17"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2425:5:17"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "2418:2:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2418:13:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2398:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2398:34:17"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "2389:5:17"
																		}
																	]
																}
															]
														},
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 2799,
																"isOffset": false,
																"isSlot": false,
																"src": "2354:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2799,
																"isOffset": false,
																"isSlot": false,
																"src": "2410:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2799,
																"isOffset": false,
																"isSlot": false,
																"src": "2425:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2802,
																"isOffset": false,
																"isSlot": false,
																"src": "2389:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2789,
																"isOffset": false,
																"isSlot": false,
																"src": "2324:1:17",
																"valueSize": 1
															},
															{
																"declaration": 2789,
																"isOffset": false,
																"isSlot": false,
																"src": "2367:1:17",
																"valueSize": 1
															},
															{
																"declaration": 2791,
																"isOffset": false,
																"isSlot": false,
																"src": "2327:1:17",
																"valueSize": 1
															},
															{
																"declaration": 2791,
																"isOffset": false,
																"isSlot": false,
																"src": "2370:1:17",
																"valueSize": 1
															}
														],
														"id": 2804,
														"nodeType": "InlineAssembly",
														"src": "2280:166:17"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2807,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2805,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2802,
																"src": "2527:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2806,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2536:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2527:10:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2813,
														"nodeType": "IfStatement",
														"src": "2523:75:17",
														"trueBody": {
															"id": 2812,
															"nodeType": "Block",
															"src": "2539:59:17",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2810,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2808,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2799,
																			"src": "2564:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 2809,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2793,
																			"src": "2572:11:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2564:19:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 2797,
																	"id": 2811,
																	"nodeType": "Return",
																	"src": "2557:26:17"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2817,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2815,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2793,
																		"src": "2708:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"id": 2816,
																		"name": "prod1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2802,
																		"src": "2722:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2708:19:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																],
																"id": 2814,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2700:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																	"typeString": "function (bool) pure"
																}
															},
															"id": 2818,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2700:28:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 2819,
														"nodeType": "ExpressionStatement",
														"src": "2700:28:17"
													},
													{
														"assignments": [
															2821
														],
														"declarations": [
															{
																"constant": false,
																"id": 2821,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "2992:9:17",
																"nodeType": "VariableDeclaration",
																"scope": 2906,
																"src": "2984:17:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2820,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2984:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2822,
														"nodeType": "VariableDeclarationStatement",
														"src": "2984:17:17"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3024:291:17",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "3093:38:17",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "3113:1:17"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "3116:1:17"
																			},
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "3119:11:17"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "3106:6:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3106:25:17"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nodeType": "YulIdentifier",
																			"src": "3093:9:17"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3213:41:17",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nodeType": "YulIdentifier",
																				"src": "3226:5:17"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nodeType": "YulIdentifier",
																						"src": "3236:9:17"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "3247:5:17"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nodeType": "YulIdentifier",
																					"src": "3233:2:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3233:20:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3222:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3222:32:17"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "3213:5:17"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3271:30:17",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "3284:5:17"
																			},
																			{
																				"name": "remainder",
																				"nodeType": "YulIdentifier",
																				"src": "3291:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3280:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3280:21:17"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "3271:5:17"
																		}
																	]
																}
															]
														},
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 2793,
																"isOffset": false,
																"isSlot": false,
																"src": "3119:11:17",
																"valueSize": 1
															},
															{
																"declaration": 2799,
																"isOffset": false,
																"isSlot": false,
																"src": "3247:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2799,
																"isOffset": false,
																"isSlot": false,
																"src": "3271:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2799,
																"isOffset": false,
																"isSlot": false,
																"src": "3284:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2802,
																"isOffset": false,
																"isSlot": false,
																"src": "3213:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2802,
																"isOffset": false,
																"isSlot": false,
																"src": "3226:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2821,
																"isOffset": false,
																"isSlot": false,
																"src": "3093:9:17",
																"valueSize": 1
															},
															{
																"declaration": 2821,
																"isOffset": false,
																"isSlot": false,
																"src": "3236:9:17",
																"valueSize": 1
															},
															{
																"declaration": 2821,
																"isOffset": false,
																"isSlot": false,
																"src": "3291:9:17",
																"valueSize": 1
															},
															{
																"declaration": 2789,
																"isOffset": false,
																"isSlot": false,
																"src": "3113:1:17",
																"valueSize": 1
															},
															{
																"declaration": 2791,
																"isOffset": false,
																"isSlot": false,
																"src": "3116:1:17",
																"valueSize": 1
															}
														],
														"id": 2823,
														"nodeType": "InlineAssembly",
														"src": "3015:300:17"
													},
													{
														"assignments": [
															2825
														],
														"declarations": [
															{
																"constant": false,
																"id": 2825,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "3630:4:17",
																"nodeType": "VariableDeclaration",
																"scope": 2906,
																"src": "3622:12:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2824,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3622:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2833,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2832,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2826,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2793,
																"src": "3637:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2830,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2828,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "~",
																			"prefix": true,
																			"src": "3652:12:17",
																			"subExpression": {
																				"id": 2827,
																				"name": "denominator",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2793,
																				"src": "3653:11:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2829,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3667:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3652:16:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2831,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3651:18:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3637:32:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "3622:47:17"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3692:362:17",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "3757:37:17",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "3776:11:17"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "3789:4:17"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "3772:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3772:22:17"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nodeType": "YulIdentifier",
																			"src": "3757:11:17"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3861:25:17",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "3874:5:17"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "3881:4:17"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "3870:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3870:16:17"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "3861:5:17"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4001:39:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4021:1:17",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nodeType": "YulIdentifier",
																								"src": "4024:4:17"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "4017:3:17"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4017:12:17"
																					},
																					{
																						"name": "twos",
																						"nodeType": "YulIdentifier",
																						"src": "4031:4:17"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "4013:3:17"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4013:23:17"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4038:1:17",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4009:3:17"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4009:31:17"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nodeType": "YulIdentifier",
																			"src": "4001:4:17"
																		}
																	]
																}
															]
														},
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 2793,
																"isOffset": false,
																"isSlot": false,
																"src": "3757:11:17",
																"valueSize": 1
															},
															{
																"declaration": 2793,
																"isOffset": false,
																"isSlot": false,
																"src": "3776:11:17",
																"valueSize": 1
															},
															{
																"declaration": 2799,
																"isOffset": false,
																"isSlot": false,
																"src": "3861:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2799,
																"isOffset": false,
																"isSlot": false,
																"src": "3874:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2825,
																"isOffset": false,
																"isSlot": false,
																"src": "3789:4:17",
																"valueSize": 1
															},
															{
																"declaration": 2825,
																"isOffset": false,
																"isSlot": false,
																"src": "3881:4:17",
																"valueSize": 1
															},
															{
																"declaration": 2825,
																"isOffset": false,
																"isSlot": false,
																"src": "4001:4:17",
																"valueSize": 1
															},
															{
																"declaration": 2825,
																"isOffset": false,
																"isSlot": false,
																"src": "4024:4:17",
																"valueSize": 1
															},
															{
																"declaration": 2825,
																"isOffset": false,
																"isSlot": false,
																"src": "4031:4:17",
																"valueSize": 1
															}
														],
														"id": 2834,
														"nodeType": "InlineAssembly",
														"src": "3683:371:17"
													},
													{
														"expression": {
															"id": 2839,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2835,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2799,
																"src": "4120:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2838,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2836,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2802,
																	"src": "4129:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2837,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2825,
																	"src": "4137:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4129:12:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4120:21:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2840,
														"nodeType": "ExpressionStatement",
														"src": "4120:21:17"
													},
													{
														"assignments": [
															2842
														],
														"declarations": [
															{
																"constant": false,
																"id": 2842,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "4467:7:17",
																"nodeType": "VariableDeclaration",
																"scope": 2906,
																"src": "4459:15:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2841,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4459:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2849,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2848,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2845,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 2843,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4478:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 2844,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2793,
																			"src": "4482:11:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4478:15:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2846,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4477:17:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 2847,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4497:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "4477:21:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4459:39:17"
													},
													{
														"expression": {
															"id": 2856,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2850,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2842,
																"src": "4715:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2855,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2851,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4726:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2854,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2852,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2793,
																		"src": "4730:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2853,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2842,
																		"src": "4744:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4730:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4726:25:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4715:36:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2857,
														"nodeType": "ExpressionStatement",
														"src": "4715:36:17"
													},
													{
														"expression": {
															"id": 2864,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2858,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2842,
																"src": "4784:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2863,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2859,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4795:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2862,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2860,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2793,
																		"src": "4799:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2861,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2842,
																		"src": "4813:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4799:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4795:25:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4784:36:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2865,
														"nodeType": "ExpressionStatement",
														"src": "4784:36:17"
													},
													{
														"expression": {
															"id": 2872,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2866,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2842,
																"src": "4854:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2871,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2867,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4865:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2870,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2868,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2793,
																		"src": "4869:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2869,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2842,
																		"src": "4883:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4869:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4865:25:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4854:36:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2873,
														"nodeType": "ExpressionStatement",
														"src": "4854:36:17"
													},
													{
														"expression": {
															"id": 2880,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2874,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2842,
																"src": "4924:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2879,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2875,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4935:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2878,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2876,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2793,
																		"src": "4939:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2877,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2842,
																		"src": "4953:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4939:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4935:25:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4924:36:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2881,
														"nodeType": "ExpressionStatement",
														"src": "4924:36:17"
													},
													{
														"expression": {
															"id": 2888,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2882,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2842,
																"src": "4994:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2887,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2883,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5005:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2886,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2884,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2793,
																		"src": "5009:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2885,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2842,
																		"src": "5023:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5009:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5005:25:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4994:36:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2889,
														"nodeType": "ExpressionStatement",
														"src": "4994:36:17"
													},
													{
														"expression": {
															"id": 2896,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2890,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2842,
																"src": "5065:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2895,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2891,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5076:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2894,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2892,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2793,
																		"src": "5080:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2893,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2842,
																		"src": "5094:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5080:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5076:25:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5065:36:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2897,
														"nodeType": "ExpressionStatement",
														"src": "5065:36:17"
													},
													{
														"expression": {
															"id": 2902,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2898,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2796,
																"src": "5535:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2901,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2899,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2799,
																	"src": "5544:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2900,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2842,
																	"src": "5552:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5544:15:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5535:24:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2903,
														"nodeType": "ExpressionStatement",
														"src": "5535:24:17"
													},
													{
														"expression": {
															"id": 2904,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2796,
															"src": "5580:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2797,
														"id": 2905,
														"nodeType": "Return",
														"src": "5573:13:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2787,
										"nodeType": "StructuredDocumentation",
										"src": "1368:305:17",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."
									},
									"id": 2908,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "1687:6:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2794,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2789,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "1711:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2908,
												"src": "1703:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2788,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1703:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2791,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "1730:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2908,
												"src": "1722:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2790,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1722:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2793,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "1749:11:17",
												"nodeType": "VariableDeclaration",
												"scope": 2908,
												"src": "1741:19:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2792,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1741:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1693:73:17"
									},
									"returnParameters": {
										"id": 2797,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2796,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "1798:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 2908,
												"src": "1790:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2795,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1790:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1789:16:17"
									},
									"scope": 3560,
									"src": "1678:3925:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2951,
										"nodeType": "Block",
										"src": "5883:189:17",
										"statements": [
											{
												"assignments": [
													2924
												],
												"declarations": [
													{
														"constant": false,
														"id": 2924,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "5901:6:17",
														"nodeType": "VariableDeclaration",
														"scope": 2951,
														"src": "5893:14:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2923,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5893:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2930,
												"initialValue": {
													"arguments": [
														{
															"id": 2926,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2911,
															"src": "5917:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2927,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2913,
															"src": "5920:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2928,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2915,
															"src": "5923:11:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2925,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2908,
															2952
														],
														"referencedDeclaration": 2908,
														"src": "5910:6:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 2929,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5910:25:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5893:42:17"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2942,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_enum$_Rounding_$2702",
															"typeString": "enum MathUpgradeable.Rounding"
														},
														"id": 2934,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2931,
															"name": "rounding",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2918,
															"src": "5949:8:17",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2702",
																"typeString": "enum MathUpgradeable.Rounding"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 2932,
																"name": "Rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2702,
																"src": "5961:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2702_$",
																	"typeString": "type(enum MathUpgradeable.Rounding)"
																}
															},
															"id": 2933,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "5970:2:17",
															"memberName": "Up",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2700,
															"src": "5961:11:17",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2702",
																"typeString": "enum MathUpgradeable.Rounding"
															}
														},
														"src": "5949:23:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2941,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2936,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2911,
																	"src": "5983:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2937,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2913,
																	"src": "5986:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2938,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2915,
																	"src": "5989:11:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2935,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "5976:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2939,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5976:25:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2940,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6004:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "5976:29:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "5949:56:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2948,
												"nodeType": "IfStatement",
												"src": "5945:98:17",
												"trueBody": {
													"id": 2947,
													"nodeType": "Block",
													"src": "6007:36:17",
													"statements": [
														{
															"expression": {
																"id": 2945,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2943,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2924,
																	"src": "6021:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 2944,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6031:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "6021:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2946,
															"nodeType": "ExpressionStatement",
															"src": "6021:11:17"
														}
													]
												}
											},
											{
												"expression": {
													"id": 2949,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2924,
													"src": "6059:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2922,
												"id": 2950,
												"nodeType": "Return",
												"src": "6052:13:17"
											}
										]
									},
									"documentation": {
										"id": 2909,
										"nodeType": "StructuredDocumentation",
										"src": "5609:121:17",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 2952,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "5744:6:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2919,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2911,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "5768:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2952,
												"src": "5760:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2910,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5760:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2913,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "5787:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2952,
												"src": "5779:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2912,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5779:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2915,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "5806:11:17",
												"nodeType": "VariableDeclaration",
												"scope": 2952,
												"src": "5798:19:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2914,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5798:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2918,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "5836:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 2952,
												"src": "5827:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2702",
													"typeString": "enum MathUpgradeable.Rounding"
												},
												"typeName": {
													"id": 2917,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2916,
														"name": "Rounding",
														"nameLocations": [
															"5827:8:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2702,
														"src": "5827:8:17"
													},
													"referencedDeclaration": 2702,
													"src": "5827:8:17",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2702",
														"typeString": "enum MathUpgradeable.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5750:100:17"
									},
									"returnParameters": {
										"id": 2922,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2921,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2952,
												"src": "5874:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2920,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5874:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5873:9:17"
									},
									"scope": 3560,
									"src": "5735:337:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3063,
										"nodeType": "Block",
										"src": "6348:1585:17",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2962,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2960,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2955,
														"src": "6362:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2961,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6367:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6362:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2966,
												"nodeType": "IfStatement",
												"src": "6358:45:17",
												"trueBody": {
													"id": 2965,
													"nodeType": "Block",
													"src": "6370:33:17",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 2963,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6391:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 2959,
															"id": 2964,
															"nodeType": "Return",
															"src": "6384:8:17"
														}
													]
												}
											},
											{
												"assignments": [
													2968
												],
												"declarations": [
													{
														"constant": false,
														"id": 2968,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "7090:6:17",
														"nodeType": "VariableDeclaration",
														"scope": 3063,
														"src": "7082:14:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2967,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7082:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2977,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2976,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 2969,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7099:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2974,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2971,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2955,
																			"src": "7110:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2970,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			3232,
																			3268
																		],
																		"referencedDeclaration": 3232,
																		"src": "7105:4:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 2972,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7105:7:17",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2973,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7116:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7105:12:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2975,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "7104:14:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7099:19:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7082:36:17"
											},
											{
												"id": 3062,
												"nodeType": "UncheckedBlock",
												"src": "7519:408:17",
												"statements": [
													{
														"expression": {
															"id": 2987,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2978,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2968,
																"src": "7543:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2986,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2983,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2979,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2968,
																				"src": "7553:6:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2982,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2980,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2955,
																					"src": "7562:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2981,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2968,
																					"src": "7566:6:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7562:10:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7553:19:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2984,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7552:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2985,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7577:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7552:26:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7543:35:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2988,
														"nodeType": "ExpressionStatement",
														"src": "7543:35:17"
													},
													{
														"expression": {
															"id": 2998,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2989,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2968,
																"src": "7592:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2997,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2994,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2990,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2968,
																				"src": "7602:6:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2993,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2991,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2955,
																					"src": "7611:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2992,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2968,
																					"src": "7615:6:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7611:10:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7602:19:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2995,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7601:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2996,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7626:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7601:26:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7592:35:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2999,
														"nodeType": "ExpressionStatement",
														"src": "7592:35:17"
													},
													{
														"expression": {
															"id": 3009,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3000,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2968,
																"src": "7641:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3008,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3005,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3001,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2968,
																				"src": "7651:6:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3004,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3002,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2955,
																					"src": "7660:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3003,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2968,
																					"src": "7664:6:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7660:10:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7651:19:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3006,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7650:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3007,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7675:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7650:26:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7641:35:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3010,
														"nodeType": "ExpressionStatement",
														"src": "7641:35:17"
													},
													{
														"expression": {
															"id": 3020,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3011,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2968,
																"src": "7690:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3019,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3016,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3012,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2968,
																				"src": "7700:6:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3015,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3013,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2955,
																					"src": "7709:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3014,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2968,
																					"src": "7713:6:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7709:10:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7700:19:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3017,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7699:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3018,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7724:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7699:26:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7690:35:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3021,
														"nodeType": "ExpressionStatement",
														"src": "7690:35:17"
													},
													{
														"expression": {
															"id": 3031,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3022,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2968,
																"src": "7739:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3030,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3027,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3023,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2968,
																				"src": "7749:6:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3026,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3024,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2955,
																					"src": "7758:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3025,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2968,
																					"src": "7762:6:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7758:10:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7749:19:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3028,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7748:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3029,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7773:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7748:26:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7739:35:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3032,
														"nodeType": "ExpressionStatement",
														"src": "7739:35:17"
													},
													{
														"expression": {
															"id": 3042,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3033,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2968,
																"src": "7788:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3041,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3038,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3034,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2968,
																				"src": "7798:6:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3037,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3035,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2955,
																					"src": "7807:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3036,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2968,
																					"src": "7811:6:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7807:10:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7798:19:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3039,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7797:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3040,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7822:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7797:26:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7788:35:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3043,
														"nodeType": "ExpressionStatement",
														"src": "7788:35:17"
													},
													{
														"expression": {
															"id": 3053,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3044,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2968,
																"src": "7837:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3052,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3049,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3045,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2968,
																				"src": "7847:6:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3048,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3046,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2955,
																					"src": "7856:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3047,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2968,
																					"src": "7860:6:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7856:10:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7847:19:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3050,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7846:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3051,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7871:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7846:26:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7837:35:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3054,
														"nodeType": "ExpressionStatement",
														"src": "7837:35:17"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 3056,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2968,
																	"src": "7897:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3059,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3057,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2955,
																		"src": "7905:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 3058,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2968,
																		"src": "7909:6:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7905:10:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3055,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2738,
																"src": "7893:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 3060,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7893:23:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2959,
														"id": 3061,
														"nodeType": "Return",
														"src": "7886:30:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2953,
										"nodeType": "StructuredDocumentation",
										"src": "6078:208:17",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 3064,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "6300:4:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2956,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2955,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "6313:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 3064,
												"src": "6305:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2954,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6305:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6304:11:17"
									},
									"returnParameters": {
										"id": 2959,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2958,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3064,
												"src": "6339:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2957,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6339:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6338:9:17"
									},
									"scope": 3560,
									"src": "6291:1642:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3099,
										"nodeType": "Block",
										"src": "8109:161:17",
										"statements": [
											{
												"id": 3098,
												"nodeType": "UncheckedBlock",
												"src": "8119:145:17",
												"statements": [
													{
														"assignments": [
															3076
														],
														"declarations": [
															{
																"constant": false,
																"id": 3076,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "8151:6:17",
																"nodeType": "VariableDeclaration",
																"scope": 3098,
																"src": "8143:14:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3075,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "8143:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3080,
														"initialValue": {
															"arguments": [
																{
																	"id": 3078,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3067,
																	"src": "8165:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3077,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3064,
																	3100
																],
																"referencedDeclaration": 3064,
																"src": "8160:4:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3079,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8160:7:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "8143:24:17"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3096,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3081,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3076,
																"src": "8188:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3091,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$2702",
																					"typeString": "enum MathUpgradeable.Rounding"
																				},
																				"id": 3085,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3082,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3070,
																					"src": "8198:8:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2702",
																						"typeString": "enum MathUpgradeable.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 3083,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2702,
																						"src": "8210:8:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$2702_$",
																							"typeString": "type(enum MathUpgradeable.Rounding)"
																						}
																					},
																					"id": 3084,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "8219:2:17",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2700,
																					"src": "8210:11:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2702",
																						"typeString": "enum MathUpgradeable.Rounding"
																					}
																				},
																				"src": "8198:23:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3090,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3088,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 3086,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3076,
																						"src": "8225:6:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 3087,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3076,
																						"src": "8234:6:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "8225:15:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3089,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3067,
																					"src": "8243:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8225:19:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "8198:46:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3093,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8251:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3094,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "8198:54:17",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3092,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8247:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3095,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8197:56:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "8188:65:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3074,
														"id": 3097,
														"nodeType": "Return",
														"src": "8181:72:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3065,
										"nodeType": "StructuredDocumentation",
										"src": "7939:89:17",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 3100,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8042:4:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3071,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3067,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8055:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 3100,
												"src": "8047:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3066,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8047:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3070,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8067:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 3100,
												"src": "8058:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2702",
													"typeString": "enum MathUpgradeable.Rounding"
												},
												"typeName": {
													"id": 3069,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3068,
														"name": "Rounding",
														"nameLocations": [
															"8058:8:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2702,
														"src": "8058:8:17"
													},
													"referencedDeclaration": 2702,
													"src": "8058:8:17",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2702",
														"typeString": "enum MathUpgradeable.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8046:30:17"
									},
									"returnParameters": {
										"id": 3074,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3073,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3100,
												"src": "8100:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3072,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8100:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8099:9:17"
									},
									"scope": 3560,
									"src": "8033:237:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3231,
										"nodeType": "Block",
										"src": "8455:922:17",
										"statements": [
											{
												"assignments": [
													3109
												],
												"declarations": [
													{
														"constant": false,
														"id": 3109,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8473:6:17",
														"nodeType": "VariableDeclaration",
														"scope": 3231,
														"src": "8465:14:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3108,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8465:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3111,
												"initialValue": {
													"hexValue": "30",
													"id": 3110,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "8482:1:17",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8465:18:17"
											},
											{
												"id": 3228,
												"nodeType": "UncheckedBlock",
												"src": "8493:855:17",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3116,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3114,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3112,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3103,
																	"src": "8521:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3113,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8530:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "8521:12:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3115,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8536:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8521:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3126,
														"nodeType": "IfStatement",
														"src": "8517:99:17",
														"trueBody": {
															"id": 3125,
															"nodeType": "Block",
															"src": "8539:77:17",
															"statements": [
																{
																	"expression": {
																		"id": 3119,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3117,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3103,
																			"src": "8557:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3118,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8567:3:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8557:13:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3120,
																	"nodeType": "ExpressionStatement",
																	"src": "8557:13:17"
																},
																{
																	"expression": {
																		"id": 3123,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3121,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3109,
																			"src": "8588:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3122,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8598:3:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8588:13:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3124,
																	"nodeType": "ExpressionStatement",
																	"src": "8588:13:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3131,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3129,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3127,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3103,
																	"src": "8633:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3128,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8642:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "8633:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3130,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8647:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8633:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3141,
														"nodeType": "IfStatement",
														"src": "8629:96:17",
														"trueBody": {
															"id": 3140,
															"nodeType": "Block",
															"src": "8650:75:17",
															"statements": [
																{
																	"expression": {
																		"id": 3134,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3132,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3103,
																			"src": "8668:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3133,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8678:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8668:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3135,
																	"nodeType": "ExpressionStatement",
																	"src": "8668:12:17"
																},
																{
																	"expression": {
																		"id": 3138,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3136,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3109,
																			"src": "8698:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3137,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8708:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8698:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3139,
																	"nodeType": "ExpressionStatement",
																	"src": "8698:12:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3146,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3144,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3142,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3103,
																	"src": "8742:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3143,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8751:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "8742:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3145,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8756:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8742:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3156,
														"nodeType": "IfStatement",
														"src": "8738:96:17",
														"trueBody": {
															"id": 3155,
															"nodeType": "Block",
															"src": "8759:75:17",
															"statements": [
																{
																	"expression": {
																		"id": 3149,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3147,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3103,
																			"src": "8777:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3148,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8787:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "8777:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3150,
																	"nodeType": "ExpressionStatement",
																	"src": "8777:12:17"
																},
																{
																	"expression": {
																		"id": 3153,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3151,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3109,
																			"src": "8807:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3152,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8817:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "8807:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3154,
																	"nodeType": "ExpressionStatement",
																	"src": "8807:12:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3161,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3159,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3157,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3103,
																	"src": "8851:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3158,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8860:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "8851:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3160,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8865:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8851:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3171,
														"nodeType": "IfStatement",
														"src": "8847:96:17",
														"trueBody": {
															"id": 3170,
															"nodeType": "Block",
															"src": "8868:75:17",
															"statements": [
																{
																	"expression": {
																		"id": 3164,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3162,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3103,
																			"src": "8886:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3163,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8896:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "8886:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3165,
																	"nodeType": "ExpressionStatement",
																	"src": "8886:12:17"
																},
																{
																	"expression": {
																		"id": 3168,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3166,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3109,
																			"src": "8916:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3167,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8926:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "8916:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3169,
																	"nodeType": "ExpressionStatement",
																	"src": "8916:12:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3176,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3174,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3172,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3103,
																	"src": "8960:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3173,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8969:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "8960:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3175,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8973:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8960:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3186,
														"nodeType": "IfStatement",
														"src": "8956:93:17",
														"trueBody": {
															"id": 3185,
															"nodeType": "Block",
															"src": "8976:73:17",
															"statements": [
																{
																	"expression": {
																		"id": 3179,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3177,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3103,
																			"src": "8994:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3178,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9004:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "8994:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3180,
																	"nodeType": "ExpressionStatement",
																	"src": "8994:11:17"
																},
																{
																	"expression": {
																		"id": 3183,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3181,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3109,
																			"src": "9023:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3182,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9033:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "9023:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3184,
																	"nodeType": "ExpressionStatement",
																	"src": "9023:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3191,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3189,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3187,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3103,
																	"src": "9066:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3188,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9075:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "9066:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3190,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9079:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9066:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3201,
														"nodeType": "IfStatement",
														"src": "9062:93:17",
														"trueBody": {
															"id": 3200,
															"nodeType": "Block",
															"src": "9082:73:17",
															"statements": [
																{
																	"expression": {
																		"id": 3194,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3192,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3103,
																			"src": "9100:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3193,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9110:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9100:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3195,
																	"nodeType": "ExpressionStatement",
																	"src": "9100:11:17"
																},
																{
																	"expression": {
																		"id": 3198,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3196,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3109,
																			"src": "9129:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3197,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9139:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9129:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3199,
																	"nodeType": "ExpressionStatement",
																	"src": "9129:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3206,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3204,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3202,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3103,
																	"src": "9172:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3203,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9181:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "9172:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3205,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9185:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9172:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3216,
														"nodeType": "IfStatement",
														"src": "9168:93:17",
														"trueBody": {
															"id": 3215,
															"nodeType": "Block",
															"src": "9188:73:17",
															"statements": [
																{
																	"expression": {
																		"id": 3209,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3207,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3103,
																			"src": "9206:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3208,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9216:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9206:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3210,
																	"nodeType": "ExpressionStatement",
																	"src": "9206:11:17"
																},
																{
																	"expression": {
																		"id": 3213,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3211,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3109,
																			"src": "9235:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3212,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9245:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9235:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3214,
																	"nodeType": "ExpressionStatement",
																	"src": "9235:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3221,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3219,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3217,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3103,
																	"src": "9278:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3218,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9287:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9278:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3220,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9291:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9278:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3227,
														"nodeType": "IfStatement",
														"src": "9274:64:17",
														"trueBody": {
															"id": 3226,
															"nodeType": "Block",
															"src": "9294:44:17",
															"statements": [
																{
																	"expression": {
																		"id": 3224,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3222,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3109,
																			"src": "9312:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3223,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9322:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "9312:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3225,
																	"nodeType": "ExpressionStatement",
																	"src": "9312:11:17"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3229,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3109,
													"src": "9364:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3107,
												"id": 3230,
												"nodeType": "Return",
												"src": "9357:13:17"
											}
										]
									},
									"documentation": {
										"id": 3101,
										"nodeType": "StructuredDocumentation",
										"src": "8276:113:17",
										"text": " @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3232,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "8403:4:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3104,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3103,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8416:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3232,
												"src": "8408:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3102,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8408:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8407:15:17"
									},
									"returnParameters": {
										"id": 3107,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3106,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3232,
												"src": "8446:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3105,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8446:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8445:9:17"
									},
									"scope": 3560,
									"src": "8394:983:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3267,
										"nodeType": "Block",
										"src": "9610:165:17",
										"statements": [
											{
												"id": 3266,
												"nodeType": "UncheckedBlock",
												"src": "9620:149:17",
												"statements": [
													{
														"assignments": [
															3244
														],
														"declarations": [
															{
																"constant": false,
																"id": 3244,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "9652:6:17",
																"nodeType": "VariableDeclaration",
																"scope": 3266,
																"src": "9644:14:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3243,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "9644:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3248,
														"initialValue": {
															"arguments": [
																{
																	"id": 3246,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3235,
																	"src": "9666:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3245,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3232,
																	3268
																],
																"referencedDeclaration": 3232,
																"src": "9661:4:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3247,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9661:11:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "9644:28:17"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3264,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3249,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3244,
																"src": "9693:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3259,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$2702",
																					"typeString": "enum MathUpgradeable.Rounding"
																				},
																				"id": 3253,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3250,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3238,
																					"src": "9703:8:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2702",
																						"typeString": "enum MathUpgradeable.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 3251,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2702,
																						"src": "9715:8:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$2702_$",
																							"typeString": "type(enum MathUpgradeable.Rounding)"
																						}
																					},
																					"id": 3252,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "9724:2:17",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2700,
																					"src": "9715:11:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2702",
																						"typeString": "enum MathUpgradeable.Rounding"
																					}
																				},
																				"src": "9703:23:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3258,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3256,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3254,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "9730:1:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 3255,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3244,
																						"src": "9735:6:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "9730:11:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3257,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3235,
																					"src": "9744:5:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9730:19:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "9703:46:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3261,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9756:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3262,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "9703:54:17",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3260,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9752:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3263,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "9702:56:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "9693:65:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3242,
														"id": 3265,
														"nodeType": "Return",
														"src": "9686:72:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3233,
										"nodeType": "StructuredDocumentation",
										"src": "9383:142:17",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3268,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "9539:4:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3235,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9552:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3268,
												"src": "9544:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3234,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9544:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3238,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "9568:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 3268,
												"src": "9559:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2702",
													"typeString": "enum MathUpgradeable.Rounding"
												},
												"typeName": {
													"id": 3237,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3236,
														"name": "Rounding",
														"nameLocations": [
															"9559:8:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2702,
														"src": "9559:8:17"
													},
													"referencedDeclaration": 2702,
													"src": "9559:8:17",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2702",
														"typeString": "enum MathUpgradeable.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9543:34:17"
									},
									"returnParameters": {
										"id": 3242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3241,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3268,
												"src": "9601:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3240,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9601:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9600:9:17"
									},
									"scope": 3560,
									"src": "9530:245:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3396,
										"nodeType": "Block",
										"src": "9962:828:17",
										"statements": [
											{
												"assignments": [
													3277
												],
												"declarations": [
													{
														"constant": false,
														"id": 3277,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "9980:6:17",
														"nodeType": "VariableDeclaration",
														"scope": 3396,
														"src": "9972:14:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3276,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9972:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3279,
												"initialValue": {
													"hexValue": "30",
													"id": 3278,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "9989:1:17",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9972:18:17"
											},
											{
												"id": 3393,
												"nodeType": "UncheckedBlock",
												"src": "10000:761:17",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3284,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3280,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3271,
																"src": "10028:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 3283,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3281,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10037:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3282,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10041:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10037:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "10028:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3296,
														"nodeType": "IfStatement",
														"src": "10024:99:17",
														"trueBody": {
															"id": 3295,
															"nodeType": "Block",
															"src": "10045:78:17",
															"statements": [
																{
																	"expression": {
																		"id": 3289,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3285,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3271,
																			"src": "10063:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 3288,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3286,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10072:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 3287,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10076:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "10072:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "10063:15:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3290,
																	"nodeType": "ExpressionStatement",
																	"src": "10063:15:17"
																},
																{
																	"expression": {
																		"id": 3293,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3291,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3277,
																			"src": "10096:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3292,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10106:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10096:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3294,
																	"nodeType": "ExpressionStatement",
																	"src": "10096:12:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3301,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3297,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3271,
																"src": "10140:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 3300,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3298,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10149:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3299,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10153:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "10149:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "10140:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3313,
														"nodeType": "IfStatement",
														"src": "10136:99:17",
														"trueBody": {
															"id": 3312,
															"nodeType": "Block",
															"src": "10157:78:17",
															"statements": [
																{
																	"expression": {
																		"id": 3306,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3302,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3271,
																			"src": "10175:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 3305,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3303,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10184:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 3304,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10188:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "10184:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "10175:15:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3307,
																	"nodeType": "ExpressionStatement",
																	"src": "10175:15:17"
																},
																{
																	"expression": {
																		"id": 3310,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3308,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3277,
																			"src": "10208:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3309,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10218:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "10208:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3311,
																	"nodeType": "ExpressionStatement",
																	"src": "10208:12:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3318,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3314,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3271,
																"src": "10252:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 3317,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3315,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10261:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3316,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10265:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "10261:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "10252:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3330,
														"nodeType": "IfStatement",
														"src": "10248:99:17",
														"trueBody": {
															"id": 3329,
															"nodeType": "Block",
															"src": "10269:78:17",
															"statements": [
																{
																	"expression": {
																		"id": 3323,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3319,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3271,
																			"src": "10287:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 3322,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3320,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10296:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 3321,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10300:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "10296:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "10287:15:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3324,
																	"nodeType": "ExpressionStatement",
																	"src": "10287:15:17"
																},
																{
																	"expression": {
																		"id": 3327,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3325,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3277,
																			"src": "10320:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3326,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10330:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "10320:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3328,
																	"nodeType": "ExpressionStatement",
																	"src": "10320:12:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3335,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3331,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3271,
																"src": "10364:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 3334,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3332,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10373:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3333,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10377:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "10373:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "10364:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3347,
														"nodeType": "IfStatement",
														"src": "10360:96:17",
														"trueBody": {
															"id": 3346,
															"nodeType": "Block",
															"src": "10380:76:17",
															"statements": [
																{
																	"expression": {
																		"id": 3340,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3336,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3271,
																			"src": "10398:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 3339,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3337,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10407:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 3338,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10411:1:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "10407:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "10398:14:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3341,
																	"nodeType": "ExpressionStatement",
																	"src": "10398:14:17"
																},
																{
																	"expression": {
																		"id": 3344,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3342,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3277,
																			"src": "10430:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3343,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10440:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "10430:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3345,
																	"nodeType": "ExpressionStatement",
																	"src": "10430:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3352,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3348,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3271,
																"src": "10473:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 3351,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3349,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10482:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3350,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10486:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "10482:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "10473:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3364,
														"nodeType": "IfStatement",
														"src": "10469:96:17",
														"trueBody": {
															"id": 3363,
															"nodeType": "Block",
															"src": "10489:76:17",
															"statements": [
																{
																	"expression": {
																		"id": 3357,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3353,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3271,
																			"src": "10507:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 3356,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3354,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10516:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 3355,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10520:1:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "10516:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "10507:14:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3358,
																	"nodeType": "ExpressionStatement",
																	"src": "10507:14:17"
																},
																{
																	"expression": {
																		"id": 3361,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3359,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3277,
																			"src": "10539:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3360,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10549:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "10539:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3362,
																	"nodeType": "ExpressionStatement",
																	"src": "10539:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3369,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3365,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3271,
																"src": "10582:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 3368,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3366,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10591:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3367,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10595:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "10591:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "10582:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3381,
														"nodeType": "IfStatement",
														"src": "10578:96:17",
														"trueBody": {
															"id": 3380,
															"nodeType": "Block",
															"src": "10598:76:17",
															"statements": [
																{
																	"expression": {
																		"id": 3374,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3370,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3271,
																			"src": "10616:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 3373,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3371,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10625:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 3372,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10629:1:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "10625:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "10616:14:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3375,
																	"nodeType": "ExpressionStatement",
																	"src": "10616:14:17"
																},
																{
																	"expression": {
																		"id": 3378,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3376,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3277,
																			"src": "10648:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3377,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10658:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "10648:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3379,
																	"nodeType": "ExpressionStatement",
																	"src": "10648:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3386,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3382,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3271,
																"src": "10691:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 3385,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3383,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10700:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3384,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10704:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10700:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "10691:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3392,
														"nodeType": "IfStatement",
														"src": "10687:64:17",
														"trueBody": {
															"id": 3391,
															"nodeType": "Block",
															"src": "10707:44:17",
															"statements": [
																{
																	"expression": {
																		"id": 3389,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3387,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3277,
																			"src": "10725:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3388,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10735:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "10725:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3390,
																	"nodeType": "ExpressionStatement",
																	"src": "10725:11:17"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3394,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3277,
													"src": "10777:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3275,
												"id": 3395,
												"nodeType": "Return",
												"src": "10770:13:17"
											}
										]
									},
									"documentation": {
										"id": 3269,
										"nodeType": "StructuredDocumentation",
										"src": "9781:114:17",
										"text": " @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3397,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "9909:5:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3271,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9923:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3397,
												"src": "9915:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3270,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9915:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9914:15:17"
									},
									"returnParameters": {
										"id": 3275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3274,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3397,
												"src": "9953:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3273,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9953:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9952:9:17"
									},
									"scope": 3560,
									"src": "9900:890:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3432,
										"nodeType": "Block",
										"src": "11025:165:17",
										"statements": [
											{
												"id": 3431,
												"nodeType": "UncheckedBlock",
												"src": "11035:149:17",
												"statements": [
													{
														"assignments": [
															3409
														],
														"declarations": [
															{
																"constant": false,
																"id": 3409,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "11067:6:17",
																"nodeType": "VariableDeclaration",
																"scope": 3431,
																"src": "11059:14:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3408,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11059:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3413,
														"initialValue": {
															"arguments": [
																{
																	"id": 3411,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3400,
																	"src": "11082:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3410,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3397,
																	3433
																],
																"referencedDeclaration": 3397,
																"src": "11076:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3412,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11076:12:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11059:29:17"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3429,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3414,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3409,
																"src": "11109:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3424,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$2702",
																					"typeString": "enum MathUpgradeable.Rounding"
																				},
																				"id": 3418,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3415,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3403,
																					"src": "11119:8:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2702",
																						"typeString": "enum MathUpgradeable.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 3416,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2702,
																						"src": "11131:8:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$2702_$",
																							"typeString": "type(enum MathUpgradeable.Rounding)"
																						}
																					},
																					"id": 3417,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "11140:2:17",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2700,
																					"src": "11131:11:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2702",
																						"typeString": "enum MathUpgradeable.Rounding"
																					}
																				},
																				"src": "11119:23:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3423,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3421,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 3419,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "11146:2:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 3420,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3409,
																						"src": "11150:6:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "11146:10:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3422,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3400,
																					"src": "11159:5:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11146:18:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "11119:45:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3426,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11171:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3427,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "11119:53:17",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3425,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11167:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3428,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "11118:55:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11109:64:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3407,
														"id": 3430,
														"nodeType": "Return",
														"src": "11102:71:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3398,
										"nodeType": "StructuredDocumentation",
										"src": "10796:143:17",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3433,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "10953:5:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3400,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10967:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3433,
												"src": "10959:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3399,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10959:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3403,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10983:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 3433,
												"src": "10974:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2702",
													"typeString": "enum MathUpgradeable.Rounding"
												},
												"typeName": {
													"id": 3402,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3401,
														"name": "Rounding",
														"nameLocations": [
															"10974:8:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2702,
														"src": "10974:8:17"
													},
													"referencedDeclaration": 2702,
													"src": "10974:8:17",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2702",
														"typeString": "enum MathUpgradeable.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10958:34:17"
									},
									"returnParameters": {
										"id": 3407,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3406,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3433,
												"src": "11016:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3405,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11016:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11015:9:17"
									},
									"scope": 3560,
									"src": "10944:246:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3519,
										"nodeType": "Block",
										"src": "11504:600:17",
										"statements": [
											{
												"assignments": [
													3442
												],
												"declarations": [
													{
														"constant": false,
														"id": 3442,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "11522:6:17",
														"nodeType": "VariableDeclaration",
														"scope": 3519,
														"src": "11514:14:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3441,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11514:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3444,
												"initialValue": {
													"hexValue": "30",
													"id": 3443,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "11531:1:17",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11514:18:17"
											},
											{
												"id": 3516,
												"nodeType": "UncheckedBlock",
												"src": "11542:533:17",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3449,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3447,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3445,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3436,
																	"src": "11570:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3446,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11579:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "11570:12:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3448,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11585:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11570:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3459,
														"nodeType": "IfStatement",
														"src": "11566:98:17",
														"trueBody": {
															"id": 3458,
															"nodeType": "Block",
															"src": "11588:76:17",
															"statements": [
																{
																	"expression": {
																		"id": 3452,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3450,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3436,
																			"src": "11606:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3451,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11616:3:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "11606:13:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3453,
																	"nodeType": "ExpressionStatement",
																	"src": "11606:13:17"
																},
																{
																	"expression": {
																		"id": 3456,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3454,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3442,
																			"src": "11637:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3455,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11647:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11637:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3457,
																	"nodeType": "ExpressionStatement",
																	"src": "11637:12:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3464,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3462,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3460,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3436,
																	"src": "11681:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3461,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11690:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "11681:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3463,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11695:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11681:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3474,
														"nodeType": "IfStatement",
														"src": "11677:95:17",
														"trueBody": {
															"id": 3473,
															"nodeType": "Block",
															"src": "11698:74:17",
															"statements": [
																{
																	"expression": {
																		"id": 3467,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3465,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3436,
																			"src": "11716:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3466,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11726:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11716:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3468,
																	"nodeType": "ExpressionStatement",
																	"src": "11716:12:17"
																},
																{
																	"expression": {
																		"id": 3471,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3469,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3442,
																			"src": "11746:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3470,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11756:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11746:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3472,
																	"nodeType": "ExpressionStatement",
																	"src": "11746:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3479,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3477,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3475,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3436,
																	"src": "11789:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3476,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11798:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "11789:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3478,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11803:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11789:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3489,
														"nodeType": "IfStatement",
														"src": "11785:95:17",
														"trueBody": {
															"id": 3488,
															"nodeType": "Block",
															"src": "11806:74:17",
															"statements": [
																{
																	"expression": {
																		"id": 3482,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3480,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3436,
																			"src": "11824:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3481,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11834:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11824:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3483,
																	"nodeType": "ExpressionStatement",
																	"src": "11824:12:17"
																},
																{
																	"expression": {
																		"id": 3486,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3484,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3442,
																			"src": "11854:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3485,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11864:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11854:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3487,
																	"nodeType": "ExpressionStatement",
																	"src": "11854:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3494,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3492,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3490,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3436,
																	"src": "11897:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3491,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11906:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "11897:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3493,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11911:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11897:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3504,
														"nodeType": "IfStatement",
														"src": "11893:95:17",
														"trueBody": {
															"id": 3503,
															"nodeType": "Block",
															"src": "11914:74:17",
															"statements": [
																{
																	"expression": {
																		"id": 3497,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3495,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3436,
																			"src": "11932:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3496,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11942:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11932:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3498,
																	"nodeType": "ExpressionStatement",
																	"src": "11932:12:17"
																},
																{
																	"expression": {
																		"id": 3501,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3499,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3442,
																			"src": "11962:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3500,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11972:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11962:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3502,
																	"nodeType": "ExpressionStatement",
																	"src": "11962:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3509,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3507,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3505,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3436,
																	"src": "12005:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3506,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12014:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "12005:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3508,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12018:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12005:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3515,
														"nodeType": "IfStatement",
														"src": "12001:64:17",
														"trueBody": {
															"id": 3514,
															"nodeType": "Block",
															"src": "12021:44:17",
															"statements": [
																{
																	"expression": {
																		"id": 3512,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3510,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3442,
																			"src": "12039:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3511,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12049:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "12039:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3513,
																	"nodeType": "ExpressionStatement",
																	"src": "12039:11:17"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3517,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3442,
													"src": "12091:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3440,
												"id": 3518,
												"nodeType": "Return",
												"src": "12084:13:17"
											}
										]
									},
									"documentation": {
										"id": 3434,
										"nodeType": "StructuredDocumentation",
										"src": "11196:240:17",
										"text": " @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 3520,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "11450:6:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3437,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3436,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11465:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3520,
												"src": "11457:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3435,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11457:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11456:15:17"
									},
									"returnParameters": {
										"id": 3440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3439,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3520,
												"src": "11495:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3438,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11495:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11494:9:17"
									},
									"scope": 3560,
									"src": "11441:663:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3558,
										"nodeType": "Block",
										"src": "12340:173:17",
										"statements": [
											{
												"id": 3557,
												"nodeType": "UncheckedBlock",
												"src": "12350:157:17",
												"statements": [
													{
														"assignments": [
															3532
														],
														"declarations": [
															{
																"constant": false,
																"id": 3532,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "12382:6:17",
																"nodeType": "VariableDeclaration",
																"scope": 3557,
																"src": "12374:14:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3531,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "12374:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3536,
														"initialValue": {
															"arguments": [
																{
																	"id": 3534,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3523,
																	"src": "12398:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3533,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3520,
																	3559
																],
																"referencedDeclaration": 3520,
																"src": "12391:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3535,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12391:13:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "12374:30:17"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3555,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3537,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3532,
																"src": "12425:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3550,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$2702",
																					"typeString": "enum MathUpgradeable.Rounding"
																				},
																				"id": 3541,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3538,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3526,
																					"src": "12435:8:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2702",
																						"typeString": "enum MathUpgradeable.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 3539,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2702,
																						"src": "12447:8:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$2702_$",
																							"typeString": "type(enum MathUpgradeable.Rounding)"
																						}
																					},
																					"id": 3540,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "12456:2:17",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 2700,
																					"src": "12447:11:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$2702",
																						"typeString": "enum MathUpgradeable.Rounding"
																					}
																				},
																				"src": "12435:23:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3549,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3547,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3542,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12462:1:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 3545,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 3543,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3532,
																									"src": "12468:6:17",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"hexValue": "38",
																									"id": 3544,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "12477:1:17",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_8_by_1",
																										"typeString": "int_const 8"
																									},
																									"value": "8"
																								},
																								"src": "12468:10:17",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 3546,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "12467:12:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12462:17:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3548,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3523,
																					"src": "12482:5:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12462:25:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12435:52:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3552,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12494:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3553,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12435:60:17",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3551,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12490:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3554,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12434:62:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "12425:71:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3530,
														"id": 3556,
														"nodeType": "Return",
														"src": "12418:78:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3521,
										"nodeType": "StructuredDocumentation",
										"src": "12110:143:17",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3559,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "12267:6:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3527,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3523,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12282:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3559,
												"src": "12274:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3522,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12274:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3526,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "12298:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 3559,
												"src": "12289:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2702",
													"typeString": "enum MathUpgradeable.Rounding"
												},
												"typeName": {
													"id": 3525,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3524,
														"name": "Rounding",
														"nameLocations": [
															"12289:8:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2702,
														"src": "12289:8:17"
													},
													"referencedDeclaration": 2702,
													"src": "12289:8:17",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2702",
														"typeString": "enum MathUpgradeable.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12273:34:17"
									},
									"returnParameters": {
										"id": 3530,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3529,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3559,
												"src": "12331:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3528,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12331:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12330:9:17"
									},
									"scope": 3560,
									"src": "12258:255:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3561,
							"src": "202:12313:17",
							"usedErrors": []
						}
					],
					"src": "103:12413:17"
				},
				"id": 17
			},
			"contracts/BRNKC.sol": {
				"ast": {
					"absolutePath": "contracts/BRNKC.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							2363
						],
						"ArraysUpgradeable": [
							2519
						],
						"BearNetwork": [
							3704
						],
						"ContextUpgradeable": [
							2561
						],
						"CountersUpgradeable": [
							2635
						],
						"ERC1967UpgradeUpgradeable": [
							510
						],
						"ERC20BurnableUpgradeable": [
							1706
						],
						"ERC20SnapshotUpgradeable": [
							2054
						],
						"ERC20Upgradeable": [
							1564
						],
						"IBeaconUpgradeable": [
							520
						],
						"IERC1822ProxiableUpgradeable": [
							141
						],
						"IERC20MetadataUpgradeable": [
							2079
						],
						"IERC20Upgradeable": [
							1642
						],
						"Initializable": [
							689
						],
						"MathUpgradeable": [
							3560
						],
						"OwnableUpgradeable": [
							131
						],
						"PausableUpgradeable": [
							952
						],
						"StorageSlotUpgradeable": [
							2695
						],
						"UUPSUpgradeable": [
							825
						]
					},
					"id": 3705,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3562,
							"literals": [
								"solidity",
								">",
								"0.5",
								".16",
								"<",
								"1.0",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "297:31:18"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/ERC20Upgradeable.sol",
							"id": 3563,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3705,
							"sourceUnit": 1565,
							"src": "332:84:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20BurnableUpgradeable.sol",
							"id": 3564,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3705,
							"sourceUnit": 1707,
							"src": "418:103:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable@4.8.0/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol",
							"id": 3565,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3705,
							"sourceUnit": 2055,
							"src": "523:103:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable@4.8.0/access/OwnableUpgradeable.sol",
							"id": 3566,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3705,
							"sourceUnit": 132,
							"src": "628:81:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable@4.8.0/security/PausableUpgradeable.sol",
							"id": 3567,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3705,
							"sourceUnit": 953,
							"src": "711:84:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol",
							"file": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/Initializable.sol",
							"id": 3568,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3705,
							"sourceUnit": 690,
							"src": "797:81:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable@4.8.0/proxy/utils/UUPSUpgradeable.sol",
							"id": 3569,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3705,
							"sourceUnit": 826,
							"src": "880:83:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3571,
										"name": "Initializable",
										"nameLocations": [
											"1042:13:18"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 689,
										"src": "1042:13:18"
									},
									"id": 3572,
									"nodeType": "InheritanceSpecifier",
									"src": "1042:13:18"
								},
								{
									"baseName": {
										"id": 3573,
										"name": "ERC20Upgradeable",
										"nameLocations": [
											"1057:16:18"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1564,
										"src": "1057:16:18"
									},
									"id": 3574,
									"nodeType": "InheritanceSpecifier",
									"src": "1057:16:18"
								},
								{
									"baseName": {
										"id": 3575,
										"name": "ERC20BurnableUpgradeable",
										"nameLocations": [
											"1075:24:18"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1706,
										"src": "1075:24:18"
									},
									"id": 3576,
									"nodeType": "InheritanceSpecifier",
									"src": "1075:24:18"
								},
								{
									"baseName": {
										"id": 3577,
										"name": "ERC20SnapshotUpgradeable",
										"nameLocations": [
											"1101:24:18"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2054,
										"src": "1101:24:18"
									},
									"id": 3578,
									"nodeType": "InheritanceSpecifier",
									"src": "1101:24:18"
								},
								{
									"baseName": {
										"id": 3579,
										"name": "OwnableUpgradeable",
										"nameLocations": [
											"1127:18:18"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 131,
										"src": "1127:18:18"
									},
									"id": 3580,
									"nodeType": "InheritanceSpecifier",
									"src": "1127:18:18"
								},
								{
									"baseName": {
										"id": 3581,
										"name": "PausableUpgradeable",
										"nameLocations": [
											"1147:19:18"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 952,
										"src": "1147:19:18"
									},
									"id": 3582,
									"nodeType": "InheritanceSpecifier",
									"src": "1147:19:18"
								},
								{
									"baseName": {
										"id": 3583,
										"name": "UUPSUpgradeable",
										"nameLocations": [
											"1168:15:18"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 825,
										"src": "1168:15:18"
									},
									"id": 3584,
									"nodeType": "InheritanceSpecifier",
									"src": "1168:15:18"
								}
							],
							"canonicalName": "BearNetwork",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3570,
								"nodeType": "StructuredDocumentation",
								"src": "967:51:18",
								"text": "@custom:security-contact bnkt@bearnetwork.net"
							},
							"fullyImplemented": true,
							"id": 3704,
							"linearizedBaseContracts": [
								3704,
								825,
								510,
								141,
								952,
								131,
								2054,
								1706,
								1564,
								2079,
								1642,
								2561,
								689
							],
							"name": "BearNetwork",
							"nameLocation": "1027:11:18",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 3591,
										"nodeType": "Block",
										"src": "1259:41:18",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3588,
														"name": "_disableInitializers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 670,
														"src": "1270:20:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 3589,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1270:22:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3590,
												"nodeType": "ExpressionStatement",
												"src": "1270:22:18"
											}
										]
									},
									"documentation": {
										"id": 3585,
										"nodeType": "StructuredDocumentation",
										"src": "1191:48:18",
										"text": "@custom:oz-upgrades-unsafe-allow constructor"
									},
									"id": 3592,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3586,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1256:2:18"
									},
									"returnParameters": {
										"id": 3587,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1259:0:18"
									},
									"scope": 3704,
									"src": "1245:55:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3628,
										"nodeType": "Block",
										"src": "1349:272:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "42656172204e6574776f726b",
															"id": 3598,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1373:14:18",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_06e4a9254e69bc66f474c0e9f15cc75d38aa6cd9b92b6dc5997e5731342db9a9",
																"typeString": "literal_string \"Bear Network\""
															},
															"value": "Bear Network"
														},
														{
															"hexValue": "42524e4b43",
															"id": 3599,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1389:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc23976c85c564777293fa6e61216e879ec5db27c094f2ea015fab376e5b5b70",
																"typeString": "literal_string \"BRNKC\""
															},
															"value": "BRNKC"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_06e4a9254e69bc66f474c0e9f15cc75d38aa6cd9b92b6dc5997e5731342db9a9",
																"typeString": "literal_string \"Bear Network\""
															},
															{
																"typeIdentifier": "t_stringliteral_fc23976c85c564777293fa6e61216e879ec5db27c094f2ea015fab376e5b5b70",
																"typeString": "literal_string \"BRNKC\""
															}
														],
														"id": 3597,
														"name": "__ERC20_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 999,
														"src": "1360:12:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 3600,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1360:37:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3601,
												"nodeType": "ExpressionStatement",
												"src": "1360:37:18"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3602,
														"name": "__ERC20Burnable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1660,
														"src": "1408:20:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 3603,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1408:22:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3604,
												"nodeType": "ExpressionStatement",
												"src": "1408:22:18"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3605,
														"name": "__ERC20Snapshot_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1723,
														"src": "1441:20:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 3606,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1441:22:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3607,
												"nodeType": "ExpressionStatement",
												"src": "1441:22:18"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3608,
														"name": "__Ownable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 26,
														"src": "1474:14:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 3609,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1474:16:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3610,
												"nodeType": "ExpressionStatement",
												"src": "1474:16:18"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3611,
														"name": "__Pausable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 856,
														"src": "1501:15:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 3612,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1501:17:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3613,
												"nodeType": "ExpressionStatement",
												"src": "1501:17:18"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3614,
														"name": "__UUPSUpgradeable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 707,
														"src": "1529:22:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 3615,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1529:24:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3616,
												"nodeType": "ExpressionStatement",
												"src": "1529:24:18"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 3618,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1572:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 3619,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1576:6:18",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1572:10:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3625,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "313030303030303030",
																"id": 3620,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1584:9:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"value": "100000000"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3624,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3621,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1596:2:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 3622,
																		"name": "decimals",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1047,
																		"src": "1602:8:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																			"typeString": "function () view returns (uint8)"
																		}
																	},
																	"id": 3623,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1602:10:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "1596:16:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1584:28:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3617,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1376,
														"src": "1566:5:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3626,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1566:47:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3627,
												"nodeType": "ExpressionStatement",
												"src": "1566:47:18"
											}
										]
									},
									"functionSelector": "8129fc1c",
									"id": 3629,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3595,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3594,
												"name": "initializer",
												"nameLocations": [
													"1330:11:18"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 591,
												"src": "1330:11:18"
											},
											"nodeType": "ModifierInvocation",
											"src": "1330:11:18"
										}
									],
									"name": "initialize",
									"nameLocation": "1317:10:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3593,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1327:2:18"
									},
									"returnParameters": {
										"id": 3596,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1349:0:18"
									},
									"scope": 3704,
									"src": "1308:313:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3637,
										"nodeType": "Block",
										"src": "1666:30:18",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3634,
														"name": "_snapshot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1783,
														"src": "1677:9:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$_t_uint256_$",
															"typeString": "function () returns (uint256)"
														}
													},
													"id": 3635,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1677:11:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3636,
												"nodeType": "ExpressionStatement",
												"src": "1677:11:18"
											}
										]
									},
									"functionSelector": "9711715a",
									"id": 3638,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3632,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3631,
												"name": "onlyOwner",
												"nameLocations": [
													"1656:9:18"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 45,
												"src": "1656:9:18"
											},
											"nodeType": "ModifierInvocation",
											"src": "1656:9:18"
										}
									],
									"name": "snapshot",
									"nameLocation": "1638:8:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3630,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1646:2:18"
									},
									"returnParameters": {
										"id": 3633,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1666:0:18"
									},
									"scope": 3704,
									"src": "1629:67:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3646,
										"nodeType": "Block",
										"src": "1738:27:18",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3643,
														"name": "_pause",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 930,
														"src": "1749:6:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 3644,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1749:8:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3645,
												"nodeType": "ExpressionStatement",
												"src": "1749:8:18"
											}
										]
									},
									"functionSelector": "8456cb59",
									"id": 3647,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3641,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3640,
												"name": "onlyOwner",
												"nameLocations": [
													"1728:9:18"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 45,
												"src": "1728:9:18"
											},
											"nodeType": "ModifierInvocation",
											"src": "1728:9:18"
										}
									],
									"name": "pause",
									"nameLocation": "1713:5:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3639,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1718:2:18"
									},
									"returnParameters": {
										"id": 3642,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1738:0:18"
									},
									"scope": 3704,
									"src": "1704:61:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3655,
										"nodeType": "Block",
										"src": "1809:29:18",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3652,
														"name": "_unpause",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 946,
														"src": "1820:8:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 3653,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1820:10:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3654,
												"nodeType": "ExpressionStatement",
												"src": "1820:10:18"
											}
										]
									},
									"functionSelector": "3f4ba83a",
									"id": 3656,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3650,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3649,
												"name": "onlyOwner",
												"nameLocations": [
													"1799:9:18"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 45,
												"src": "1799:9:18"
											},
											"nodeType": "ModifierInvocation",
											"src": "1799:9:18"
										}
									],
									"name": "unpause",
									"nameLocation": "1782:7:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3648,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1789:2:18"
									},
									"returnParameters": {
										"id": 3651,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1809:0:18"
									},
									"scope": 3704,
									"src": "1773:65:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3670,
										"nodeType": "Block",
										"src": "1905:36:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 3666,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3658,
															"src": "1922:2:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3667,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3660,
															"src": "1926:6:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3665,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1376,
														"src": "1916:5:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3668,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1916:17:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3669,
												"nodeType": "ExpressionStatement",
												"src": "1916:17:18"
											}
										]
									},
									"functionSelector": "40c10f19",
									"id": 3671,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3663,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3662,
												"name": "onlyOwner",
												"nameLocations": [
													"1895:9:18"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 45,
												"src": "1895:9:18"
											},
											"nodeType": "ModifierInvocation",
											"src": "1895:9:18"
										}
									],
									"name": "mint",
									"nameLocation": "1855:4:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3658,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1868:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 3671,
												"src": "1860:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3657,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1860:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3660,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1880:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 3671,
												"src": "1872:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3659,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1872:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1859:28:18"
									},
									"returnParameters": {
										"id": 3664,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1905:0:18"
									},
									"scope": 3704,
									"src": "1846:95:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1547,
										1905
									],
									"body": {
										"id": 3693,
										"nodeType": "Block",
										"src": "2129:63:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 3688,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3673,
															"src": "2167:4:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3689,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3675,
															"src": "2173:2:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3690,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3677,
															"src": "2177:6:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 3685,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "2140:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_BearNetwork_$3704_$",
																"typeString": "type(contract super BearNetwork)"
															}
														},
														"id": 3687,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2146:20:18",
														"memberName": "_beforeTokenTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1905,
														"src": "2140:26:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 3691,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2140:44:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3692,
												"nodeType": "ExpressionStatement",
												"src": "2140:44:18"
											}
										]
									},
									"id": 3694,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3680,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3679,
												"name": "whenNotPaused",
												"nameLocations": [
													"2048:13:18"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 874,
												"src": "2048:13:18"
											},
											"nodeType": "ModifierInvocation",
											"src": "2048:13:18"
										}
									],
									"name": "_beforeTokenTransfer",
									"nameLocation": "1958:20:18",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3683,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 3681,
												"name": "ERC20Upgradeable",
												"nameLocations": [
													"2080:16:18"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1564,
												"src": "2080:16:18"
											},
											{
												"id": 3682,
												"name": "ERC20SnapshotUpgradeable",
												"nameLocations": [
													"2098:24:18"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2054,
												"src": "2098:24:18"
											}
										],
										"src": "2071:52:18"
									},
									"parameters": {
										"id": 3678,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3673,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1987:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 3694,
												"src": "1979:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3672,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1979:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3675,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2001:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 3694,
												"src": "1993:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3674,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1993:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3677,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2013:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 3694,
												"src": "2005:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3676,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2005:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1978:42:18"
									},
									"returnParameters": {
										"id": 3684,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2129:0:18"
									},
									"scope": 3704,
									"src": "1949:243:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										819
									],
									"body": {
										"id": 3702,
										"nodeType": "Block",
										"src": "2314:2:18",
										"statements": []
									},
									"id": 3703,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3699,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3698,
												"name": "onlyOwner",
												"nameLocations": [
													"2281:9:18"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 45,
												"src": "2281:9:18"
											},
											"nodeType": "ModifierInvocation",
											"src": "2281:9:18"
										}
									],
									"name": "_authorizeUpgrade",
									"nameLocation": "2209:17:18",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3700,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2300:8:18"
									},
									"parameters": {
										"id": 3697,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3696,
												"mutability": "mutable",
												"name": "newImplementation",
												"nameLocation": "2235:17:18",
												"nodeType": "VariableDeclaration",
												"scope": 3703,
												"src": "2227:25:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3695,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2227:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2226:27:18"
									},
									"returnParameters": {
										"id": 3701,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2314:0:18"
									},
									"scope": 3704,
									"src": "2200:116:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3705,
							"src": "1018:1301:18",
							"usedErrors": []
						}
					],
					"src": "297:2024:18"
				},
				"id": 18
			}
		}
	}
}